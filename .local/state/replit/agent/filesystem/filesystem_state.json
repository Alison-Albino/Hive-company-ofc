{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hive - Real Estate and Services Platform\n\n## Overview\n\nHive is a comprehensive web platform that connects properties to people who really need them, similar to iFood's model but for real estate and professional services. The platform serves as a marketplace where users can discover properties (houses, apartments, commercial spaces, event halls) and find qualified service providers (plumbers, electricians, painters, cleaners, etc.) all in one place.\n\nThe application uses a modern full-stack architecture with React frontend, Express.js backend, PostgreSQL database with Drizzle ORM, and is designed to be responsive across mobile, tablet, and desktop devices.\n\n## Recent Changes (January 2025)\n\n### Sistema de Perfis Profissionais Estilo Rede Social (Janeiro 2025)\n- **Perfil Público Completo**: Visualização de perfis de prestadores totalmente reformulada estilo rede social\n  - Hero section com foto de capa em gradiente dourado e foto de perfil circular destacada\n  - Layout em colunas: sidebar com informações essenciais e área principal com portfólio\n  - Seção \"Sobre\" personalizada com biografia do prestador\n  - Grid de especialidades com badges coloridos em tema dourado\n  - Galeria de portfólio com hover effects e contador de trabalhos\n  - Cards de estatísticas (verificação, trabalhos, especialidades)\n  - Área de contato destacada com call-to-action para iniciar conversa\n- **Correção Crítica de Redirecionamento**: Resolvido bug onde \"Ver perfil\" direcionava incorretamente\n  - ProfilePage agora usa hook useRoute para capturar parâmetro profileId da URL\n  - Sistema diferencia entre visualizar próprio perfil (editável) vs perfil de terceiros (read-only)\n  - Endpoint /api/profiles/:id integrado corretamente para buscar dados de outros usuários\n  - Experiência visual distinta para visualização vs edição de perfis\n\n### Correção do Sistema de Progressão de Perfil (Janeiro 2025)\n- **Bug Crítico Corrigido**: Sistema de progressão de perfil não detectava corretamente campos preenchidos\n  - Critério de mudança de onboarding para dashboard alterado de completionPercentage < 80% para verificação de categories\n  - Lógica de detecção de completude de campos simplificada para ser mais flexível\n  - Removida duplicação de \"finalizar cadastro\" que confundia prestadores\n  - ProfileProgressTracker agora detecta corretamente quando categorias e fotos foram adicionadas\n- **Dashboard Diferenciado**: Implementação completa da experiência personalizada\n  - Prestadores com categorias definidas veem dashboard completo imediatamente\n  - Imobiliárias (categoria 'imobiliaria') têm acesso ao RealEstateDashboard especializado\n  - Endpoint /api/my-properties funcional para buscar propriedades do usuário logado\n\n### Sistema de Controle de Assinatura Implementado (Janeiro 2025)\n- **Sistema Completo de Assinatura**: Controle total do ciclo de vida das assinaturas:\n  - Duração fixa de 30 dias para ambos os planos (BE HIVE R$ 29 e HIVE GOLD R$ 59)\n  - Período de cancelamento gratuito de 7 dias após criação da assinatura\n  - Integração completa com Stripe para processamento de pagamentos\n  - Criação automática de registro de assinatura após pagamento bem-sucedido\n- **Dashboard de Assinatura**: Página dedicada `/subscription` para gerenciamento:\n  - Visualização detalhada do status da assinatura ativa\n  - Informações de duração, renovação e elegibilidade para cancelamento\n  - Funcionalidade de cancelamento dentro do período permitido\n  - Histórico completo de assinaturas anteriores\n- **Backend Storage Completo**: Métodos implementados para:\n  - Criação e gerenciamento de assinaturas com status e datas\n  - Verificação de elegibilidade para cancelamento baseada em períodos\n  - Registro de histórico de pagamentos integrado ao Stripe\n  - Ativação/desativação automática de planos de prestadores\n- **Correção de Conflitos Stripe**: Resolvido erro de configuração que impedia pagamentos\n  - Removido conflito entre `automatic_payment_methods` e `payment_method_types`\n  - Sistema de checkout totalmente operacional com todos os métodos de pagamento\n\n### Complete Implementation of Hive-First Contact Policy\n- **Mandatory Chat Platform**: All user contact now exclusively through Hive platform:\n  - Removed all phone numbers and email addresses from provider profiles and property listings\n  - Implemented authentication-required chat system across all user interactions\n  - Added informative messages about \"primeiro contato via Hive\" policy on all pages\n  - Property detail pages, profiles, and services require login before chat initiation\n- **Functional Chat System**: Real-time messaging platform fully operational:\n  - Fixed React hooks ordering issues in ChatPage component\n  - Chat conversations load properly for authenticated users\n  - All chat endpoints protected with authentication middleware\n- **Stripe Payment Integration**: Subscription system working correctly:\n  - Backend processing subscriptions successfully (clientSecret generation confirmed)\n  - Plan A: \"BE HIVE\" - R$ 29/mês (CPF individuals)\n  - Plan B: \"HIVE GOLD\" - R$ 59/mês (CNPJ companies)\n  - Improved error handling for payment processing\n- **Platform Policy Enforcement**: Complete removal of direct contact methods ensures all communication flows through Hive marketplace\n- **Enhanced Payment Methods**: Stripe configured with automatic payment methods detection:\n  - Supports all available payment methods: Cartões, Apple Pay, Google Pay, Link\n  - Dynamic payment method detection based on user device and account configuration\n  - Improved checkout experience with tabbed layout and wallet integration\n  - Auto-redirect support for payment methods requiring external authentication\n\n### Enhanced Category System with Plan-Based Access Control (January 2025)\n- **Clear Plan-Based Category Separation**: Logical category organization:\n  - **CPF Plans (BE HIVE R$ 29/mês)**: 13 service categories with planType=\"CPF\"\n    * Eletricista, Encanador, Pintor, Pedreiro, Marceneiro, Limpeza, Jardinagem\n    * Ar Condicionado, Dedetização, Segurança, Assistência Técnica, Serralheria, Mudanças\n  - **CNPJ Plans (HIVE GOLD R$ 59/mês)**: All CPF categories PLUS exclusive \"Imobiliária\" category\n    * Single consolidated \"Imobiliária\" category with planType=\"CNPJ\"\n    * 10 real estate subcategories (Residenciais, Comerciais, Incorporação, etc.)\n- **Subcategory Selection System**: Advanced provider configuration:\n  - Providers select 1 main category and 1-3 subcategories\n  - Mandatory biography field (minimum requirements)\n  - Optional profile image upload\n  - Optional portfolio images (up to 5 images)\n- **Plan-Based Filtering**: Strict access control implementation:\n  - CPF users see ONLY categories with planType=\"CPF\" (13 service categories)\n  - CNPJ users see ALL categories (13 CPF service categories + 1 CNPJ imobiliária)\n  - Frontend and backend validation ensures plan compliance\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: Portuguese (Brazil) - All interface messages and content should be in PT-BR.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: TailwindCSS with custom design system using neutral colors, white, gold, and black theme\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints under `/api` prefix\n- **Data Layer**: In-memory storage implementation with interface for future database integration\n- **Middleware**: Custom logging, JSON parsing, error handling\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: Six main entities:\n  - **Properties**: Real estate listings with pricing, location, amenities, and agency information\n  - **Service Providers**: Professional service providers with ratings, categories, and portfolio\n  - **Service Categories**: 14 total categories (13 basic services + 1 consolidated imobiliária) with subcategories and provider counts\n  - **Plans**: Subscription plans for different user types (CPF individuals vs CNPJ companies)\n  - **Subscriptions**: Complete subscription management with 30-day duration and 7-day cancellation window\n  - **Payment History**: Transaction records integrated with Stripe payment processing\n\n### Component Architecture\n- **Design System**: Consistent component library with variants and proper TypeScript support\n- **Card-based UI**: Property cards, service provider cards, and category cards for intuitive browsing\n- **Interactive Map**: Custom map component with property markers and nearby places visualization\n- **Chat System**: Complete messaging platform with widget and full-page interface\n  - Real-time chat widget with intelligent responses and contextual help\n  - Full chat page (/chat) with Facebook-style interface\n  - Sidebar with conversation list, search functionality, and user status\n  - Message history with read/unread status indicators\n  - Responsive design for mobile and desktop\n- **Responsive Layout**: Mobile-first design with grid systems that adapt to different screen sizes\n- **Navigation**: Sticky header with mobile hamburger menu and desktop horizontal navigation\n- **Multi-view Interface**: Toggle between grid view and mixed map+list view for property browsing\n- **Adaptive Layout**: Desktop shows map and property list side-by-side, mobile shows map above and list below\n\n### Authentication & Authorization\n- **Planned Implementation**: Session-based authentication with role-based access control\n- **User Types**: Two-tier plan system (Plan A for individuals/CPF, Plan B for companies/CNPJ)\n\n### Search & Discovery\n- **Location Search**: Complete search system with text input for any location with autocomplete suggestions\n- **Interactive Map**: Click anywhere on map to find nearby properties and points of interest\n- **Property Discovery**: Visual search with property markers and detailed property cards\n- **Location Insights**: Shows hospitals, schools, supermarkets, and other important places near any selected area\n- **Nearby Properties**: Click on map to discover properties in the selected region\n- **Service Discovery**: Category-based browsing with rating-based sorting and location filtering\n- **Featured Content**: Highlighted properties and top-rated service providers\n- **Chat Support**: Intelligent chat widget with contextual responses about properties and services\n\n## External Dependencies\n\n### Core Technologies\n- **@neondatabase/serverless**: PostgreSQL database connection for serverless environments\n- **drizzle-orm & drizzle-kit**: Type-safe ORM and migration tools\n- **@tanstack/react-query**: Server state management and caching\n\n### UI & Styling\n- **@radix-ui/***: Accessible headless UI primitives for complex components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **clsx & tailwind-merge**: Conditional className utilities\n\n### Development Tools\n- **tsx**: TypeScript execution for development server\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Replit-specific development tooling\n\n### Form & Validation\n- **react-hook-form & @hookform/resolvers**: Form state management\n- **drizzle-zod**: Schema validation integration\n- **zod**: Runtime type validation\n\n### Additional Libraries\n- **date-fns**: Date manipulation utilities\n- **embla-carousel-react**: Carousel/slider components\n- **cmdk**: Command palette interface\n- **wouter**: Lightweight routing library\n- **nanoid**: Unique ID generation","size_bytes":12071},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Hive custom colors\n        \"hive-gold\": \"var(--hive-gold)\",\n        \"hive-gold-dark\": \"var(--hive-gold-dark)\",\n        \"hive-black\": \"var(--hive-black)\",\n        \"hive-gray\": \"var(--hive-gray)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3012},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { loginSchema, registerSchema, providerRegistrationSchema, createPropertySchema } from \"@shared/auth-schema\";\nimport type { AuthUser } from \"@shared/auth-schema\";\nimport Stripe from \"stripe\";\n\n// Simple session storage (in production, use proper session management)\ninterface Session {\n  userId: string;\n  user: AuthUser;\n}\n\nconst sessions = new Map<string, Session>();\n\n// Middleware to check authentication\nfunction requireAuth(req: any, res: any, next: any) {\n  const sessionId = req.headers.authorization?.replace('Bearer ', '');\n  if (!sessionId || !sessions.has(sessionId)) {\n    return res.status(401).json({ message: \"Não autorizado\" });\n  }\n  \n  const session = sessions.get(sessionId)!;\n  req.user = session.user;\n  req.userId = session.userId;\n  next();\n}\n\n// Middleware to check if user is a provider\nfunction requireProvider(req: any, res: any, next: any) {\n  if (req.user.userType !== \"provider\") {\n    return res.status(403).json({ message: \"Acesso restrito a prestadores de serviços\" });\n  }\n  next();\n}\n\n// Middleware to check if user is a real estate provider\nfunction requireRealEstateProvider(req: any, res: any, next: any) {\n  if (!req.user.provider || !req.user.provider.categories.includes(\"imobiliaria\")) {\n    return res.status(403).json({ message: \"Apenas imobiliárias podem cadastrar propriedades\" });\n  }\n  \n  if (!req.user.provider.planActive) {\n    return res.status(403).json({ message: \"Plano inativo. Assine um plano para cadastrar propriedades\" });\n  }\n  \n  next();\n}\n\n// Initialize Stripe\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-07-30.basil\" as any,\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication endpoints\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const result = await storage.login(validatedData);\n      \n      if (result.success && result.user) {\n        const sessionId = `session_${Date.now()}_${Math.random()}`;\n        sessions.set(sessionId, { userId: result.user.id, user: result.user });\n        \n        res.json({\n          success: true,\n          user: result.user,\n          sessionId: sessionId\n        });\n      } else {\n        res.status(401).json(result);\n      }\n    } catch (error: any) {\n      res.status(400).json({ success: false, message: error.message || \"Dados inválidos\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      const result = await storage.register(validatedData);\n      \n      if (result.success && result.user) {\n        const sessionId = `session_${Date.now()}_${Math.random()}`;\n        sessions.set(sessionId, { userId: result.user.id, user: result.user });\n        \n        res.json({\n          success: true,\n          user: result.user,\n          sessionId: sessionId\n        });\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error: any) {\n      res.status(400).json({ success: false, message: error.message || \"Dados inválidos\" });\n    }\n  });\n\n  app.post(\"/api/auth/register-provider\", async (req, res) => {\n    try {\n      const validatedData = providerRegistrationSchema.parse(req.body);\n      const result = await storage.registerProvider(validatedData);\n      \n      if (result.success && result.user) {\n        const sessionId = `session_${Date.now()}_${Math.random()}`;\n        sessions.set(sessionId, { userId: result.user.id, user: result.user });\n        \n        res.json({\n          success: true,\n          user: result.user,\n          sessionId: sessionId,\n          message: \"Cadastro realizado! Complete o pagamento do plano para ativar sua conta.\"\n        });\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error: any) {\n      res.status(400).json({ success: false, message: error.message || \"Dados inválidos\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", requireAuth, (req, res) => {\n    const sessionId = req.headers.authorization?.replace('Bearer ', '');\n    if (sessionId) {\n      sessions.delete(sessionId);\n    }\n    res.json({ success: true });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, (req, res) => {\n    res.json({ user: (req as any).user });\n  });\n\n  // Upgrade user to provider\n  app.post(\"/api/auth/upgrade-to-provider\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ success: false, message: \"Usuário não encontrado\" });\n      }\n\n      if (user.userType === \"provider\") {\n        return res.status(400).json({ success: false, message: \"Usuário já é prestador\" });\n      }\n\n      const providerData = {\n        ...req.body,\n        name: user.name,\n        email: user.email,\n      };\n\n      const result = await storage.upgradeToProvider(userId, providerData);\n      \n      if (result.success) {\n        res.json({ success: true, user: result.user, message: \"Upgrade realizado com sucesso\" });\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error: any) {\n      console.error(\"Upgrade to provider error:\", error);\n      res.status(500).json({ success: false, message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Profile management routes\n  app.get(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).userId;\n      const user = await storage.getUserById(userId);\n      \n      if (!user) {\n        return res.status(404).json({ success: false, message: \"Usuário não encontrado\" });\n      }\n\n      res.json({ success: true, profile: user });\n    } catch (error: any) {\n      console.error(\"Get profile error:\", error);\n      res.status(500).json({ success: false, message: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.put(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).userId;\n      const profileData = req.body;\n      \n      const updatedUser = await storage.updateUserProfile(userId, profileData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ success: false, message: \"Usuário não encontrado\" });\n      }\n\n      // CRÍTICO: Update session with new user data\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (sessionId && sessions.has(sessionId)) {\n        sessions.set(sessionId, { userId: updatedUser.id, user: updatedUser });\n      }\n\n      res.json({ success: true, profile: updatedUser, message: \"Perfil atualizado com sucesso\" });\n    } catch (error: any) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ success: false, message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Update user categories (for business providers)\n  app.put(\"/api/user/categories\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).userId;\n      const { categoryIds } = req.body;\n      \n      if (!Array.isArray(categoryIds)) {\n        return res.status(400).json({ \n          success: false, \n          message: \"categoryIds deve ser um array\" \n        });\n      }\n\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ success: false, message: \"Usuário não encontrado\" });\n      }\n\n      if (user.userType !== \"provider\" || user.providerPlan !== \"B\") {\n        return res.status(403).json({ \n          success: false, \n          message: \"Apenas prestadores empresariais podem definir categorias\" \n        });\n      }\n\n      const updatedUser = await storage.updateUserCategories(userId, categoryIds);\n      \n      res.json({ \n        success: true, \n        user: updatedUser, \n        message: \"Categorias atualizadas com sucesso\" \n      });\n    } catch (error: any) {\n      console.error(\"Update categories error:\", error);\n      res.status(500).json({ success: false, message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Provider property creation endpoint\n  app.post(\"/api/properties\", requireAuth, requireRealEstateProvider, async (req, res) => {\n    try {\n      const validatedData = createPropertySchema.parse(req.body);\n      const property = await storage.createPropertyAsProvider((req as any).userId, validatedData);\n      \n      if (property) {\n        res.status(201).json({ success: true, property });\n      } else {\n        res.status(403).json({ \n          success: false, \n          message: \"Não foi possível criar a propriedade. Verifique suas permissões e plano ativo.\" \n        });\n      }\n    } catch (error: any) {\n      res.status(400).json({ success: false, message: error.message || \"Dados inválidos\" });\n    }\n  });\n\n  // Stripe subscription endpoint\n  app.post(\"/api/create-subscription\", requireAuth, async (req, res) => {\n    try {\n      const { planType } = req.body;\n      const user = (req as any).user;\n      \n      console.log('Creating subscription for user:', user.id, 'plan:', planType, 'email:', user.email);\n      \n      if (!user || !user.email) {\n        console.log('Invalid user or no email for user:', user?.id);\n        return res.status(400).json({ error: \"Usuário ou email inválido\" });\n      }\n\n      // Plan pricing\n      const planPrices = {\n        A: 2900, // R$ 29.00 in centavos\n        B: 5900, // R$ 59.00 in centavos\n      };\n\n      if (!planPrices[planType as keyof typeof planPrices]) {\n        return res.status(400).json({ error: \"Tipo de plano inválido\" });\n      }\n\n      // Create or retrieve Stripe customer\n      let customer;\n      try {\n        const customers = await stripe.customers.list({\n          email: user.email,\n          limit: 1,\n        });\n\n        if (customers.data.length > 0) {\n          customer = customers.data[0];\n        } else {\n          customer = await stripe.customers.create({\n            email: user.email,\n            name: user.name,\n            metadata: {\n              userId: user.id,\n              planType: planType,\n            },\n          });\n        }\n      } catch (error) {\n        console.error('Error creating/retrieving customer:', error);\n        return res.status(500).json({ error: \"Erro ao criar cliente no Stripe\" });\n      }\n\n      // Create payment intent for subscription\n      try {\n        const paymentIntentConfig = {\n          amount: planPrices[planType as keyof typeof planPrices],\n          currency: 'brl',\n          customer: customer.id,\n          payment_method_types: ['card'],\n          metadata: {\n            userId: user.id,\n            planType: planType,\n            subscription: 'true',\n          },\n        };\n        \n        console.log('Creating PaymentIntent with config:', JSON.stringify(paymentIntentConfig, null, 2));\n        \n        const paymentIntent = await stripe.paymentIntents.create(paymentIntentConfig);\n\n        res.json({\n          clientSecret: paymentIntent.client_secret,\n          customerId: customer.id,\n        });\n      } catch (error) {\n        console.error('Error creating payment intent:', error);\n        res.status(500).json({ error: \"Erro ao criar intenção de pagamento\" });\n      }\n    } catch (error: any) {\n      console.error('Create subscription error:', error);\n      res.status(500).json({ error: error.message || \"Erro interno do servidor\" });\n    }\n  });\n\n  // Process payment success endpoint\n  app.post(\"/api/process-payment-success\", requireAuth, async (req, res) => {\n    try {\n      const { paymentIntentId, planType } = req.body;\n      const user = (req as any).user;\n      \n      console.log(`Processing payment success for user ${user.id} with plan ${planType}`);\n\n      // Verify payment intent with Stripe\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.status === 'succeeded' && paymentIntent.metadata.userId === user.id) {\n        // Upgrade user to provider with the selected plan\n        const upgradeData = {\n          planType: planType as \"A\" | \"B\",\n          speciality: planType === 'A' ? 'Prestador Pessoa Física' : 'Prestador Empresarial',\n          categories: planType === 'B' ? ['imobiliaria'] : ['geral'],\n        };\n\n        const result = await storage.upgradeToProvider(user.id, upgradeData);\n        \n        if (result.success) {\n          // Update session with new user data\n          const sessionId = req.headers.authorization?.replace('Bearer ', '');\n          if (sessionId && sessions.has(sessionId)) {\n            sessions.set(sessionId, { userId: result.user!.id, user: result.user! });\n          }\n          \n          console.log(`User ${user.id} upgraded to provider plan ${planType}`);\n          res.json({ success: true, user: result.user });\n        } else {\n          res.status(400).json({ success: false, message: \"Erro ao fazer upgrade\" });\n        }\n      } else {\n        res.status(400).json({ success: false, message: \"Pagamento não verificado\" });\n      }\n    } catch (error) {\n      console.error('Process payment success error:', error);\n      res.status(500).json({ success: false, error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Webhook endpoint for Stripe events (for production use)\n  app.post(\"/api/webhook/stripe\", async (req, res) => {\n    try {\n      const event = req.body;\n\n      // Handle successful payment\n      if (event.type === 'payment_intent.succeeded') {\n        const paymentIntent = event.data.object;\n        const { userId, planType } = paymentIntent.metadata;\n\n        if (paymentIntent.metadata.subscription === 'true') {\n          // Upgrade user to provider with the selected plan\n          const upgradeData = {\n            planType: planType,\n            speciality: planType === 'A' ? 'Prestador Pessoa Física' : 'Prestador Empresarial',\n            categories: planType === 'B' ? ['imobiliaria'] : ['geral'],\n          };\n\n          await storage.upgradeToProvider(userId, upgradeData);\n          console.log(`User ${userId} upgraded to provider plan ${planType}`);\n        }\n      }\n\n      res.json({ received: true });\n    } catch (error) {\n      console.error('Webhook error:', error);\n      res.status(400).json({ error: 'Webhook error' });\n    }\n  });\n\n  // Endpoint para completar configuração do perfil do prestador\n  app.post(\"/api/complete-provider-setup\", requireAuth, async (req, res) => {\n    try {\n      const { categoryId, subcategories, biography, profileImage, portfolioImages } = req.body;\n      const user = (req as any).user;\n      \n      // Validar dados obrigatórios\n      if (!categoryId || !subcategories || subcategories.length === 0 || !biography) {\n        return res.status(400).json({ error: \"Dados obrigatórios não fornecidos\" });\n      }\n      \n      if (subcategories.length > 3) {\n        return res.status(400).json({ error: \"Máximo de 3 subcategorias permitidas\" });\n      }\n      \n      // Buscar categoria para validar\n      const category = await storage.getServiceCategoryById(categoryId);\n      if (!category) {\n        return res.status(400).json({ error: \"Categoria não encontrada\" });\n      }\n      \n      // Validar se as subcategorias pertencem à categoria\n      const invalidSubcategories = subcategories.filter((sub: string) => \n        !category.subcategories?.includes(sub)\n      );\n      if (invalidSubcategories.length > 0) {\n        return res.status(400).json({ error: \"Subcategorias inválidas para esta categoria\" });\n      }\n      \n      // Criar/atualizar perfil detalhado do prestador\n      await storage.createOrUpdateProviderProfile({\n        userId: user.id,\n        categoryId,\n        subcategories,\n        biography,\n        profileImage,\n        portfolioImages: portfolioImages || [],\n      });\n      \n      // Atualizar categorias do usuário e marcar como completamente configurado\n      const updatedUser = await storage.updateUserCategories(user.id, [category.slug]);\n      \n      // Marcar perfil como completamente configurado para evitar redirecionamento\n      if (updatedUser) {\n        await storage.markProviderAsCompletelySetup(user.id);\n      }\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"Usuário não encontrado\" });\n      }\n      \n      // Update session with new user data\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (sessionId && sessions.has(sessionId)) {\n        sessions.set(sessionId, { userId: updatedUser.id, user: updatedUser });\n      }\n      \n      res.json({ success: true, user: updatedUser });\n    } catch (error) {\n      console.error(\"Complete provider setup error:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Properties routes\n  app.get(\"/api/properties\", async (req, res) => {\n    try {\n      const properties = await storage.getProperties();\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/featured\", async (req, res) => {\n    try {\n      const properties = await storage.getFeaturedProperties();\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching featured properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/:id\", async (req, res) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      res.json(property);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching property\" });\n    }\n  });\n\n  // Get properties for current user (authenticated endpoint)\n  app.get(\"/api/my-properties\", requireAuth, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      const userProperties = await storage.getPropertiesByCreator(user.id);\n      res.json(userProperties);\n    } catch (error) {\n      console.error(\"Error fetching user properties:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Service providers routes\n  app.get(\"/api/service-providers\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const providers = category \n        ? await storage.getServiceProvidersByCategory(category)\n        : await storage.getServiceProviders();\n      res.json(providers);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching service providers\" });\n    }\n  });\n\n  app.get(\"/api/service-providers/:id\", async (req, res) => {\n    try {\n      const provider = await storage.getServiceProvider(req.params.id);\n      if (!provider) {\n        return res.status(404).json({ message: \"Service provider not found\" });\n      }\n      res.json(provider);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching service provider\" });\n    }\n  });\n\n  // Service categories routes\n  app.get(\"/api/service-categories\", async (req, res) => {\n    try {\n      const categories = await storage.getServiceCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching service categories\" });\n    }\n  });\n\n  // Plans routes\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const plans = await storage.getPlans();\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching plans\" });\n    }\n  });\n\n  // Property views endpoint\n  app.post(\"/api/properties/:id/view\", async (req, res) => {\n    try {\n      const property = await storage.incrementPropertyViews(req.params.id);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      res.json({ success: true, views: property.views });\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating property views\" });\n    }\n  });\n\n  // Config endpoint for maps key\n  app.get('/api/config/maps-key', (req, res) => {\n    const apiKey = process.env.GOOGLE_MAPS_API_KEY;\n    if (apiKey) {\n      res.send(apiKey);\n    } else {\n      res.status(404).send('API key not found');\n    }\n  });\n\n  // Profile routes\n  app.get('/api/profiles', async (req, res) => {\n    try {\n      const { documentType, city } = req.query;\n      const profiles = await storage.getUserProfiles({ \n        documentType: documentType as string,\n        city: city as string \n      });\n      res.json(profiles);\n    } catch (error) {\n      console.error('Error fetching profiles:', error);\n      res.status(500).json({ message: 'Error fetching profiles' });\n    }\n  });\n\n  app.get('/api/profiles/:id', async (req, res) => {\n    try {\n      const profile = await storage.getUserProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ message: 'Profile not found' });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      res.status(500).json({ message: 'Error fetching profile' });\n    }\n  });\n\n  app.get('/api/profiles/:id/reviews', async (req, res) => {\n    try {\n      // Retornar array vazio temporariamente - implementar depois\n      res.json([]);\n    } catch (error) {\n      console.error('Error fetching profile reviews:', error);\n      res.status(500).json({ message: 'Error fetching profile reviews' });\n    }\n  });\n\n  // Chat endpoint - Assistant (requires authentication)\n  app.post(\"/api/chat\", requireAuth, async (req, res) => {\n    const { message } = req.body;\n\n    try {\n      // Criar mensagem do usuário na conversa do assistente\n      await storage.createMessage({\n        conversationId: 'conv-assistant',\n        senderId: 'user',\n        receiverId: 'assistant',\n        message,\n        createdAt: new Date().toISOString(),\n        read: false\n      });\n\n      // Simular resposta do assistente\n      const responses = {\n        ola: \"Olá! Como posso ajudá-lo hoje? Está procurando por alguma propriedade específica?\",\n        ajuda: \"Estou aqui para ajudar! Você pode buscar propriedades por localização, ver detalhes de imóveis ou encontrar prestadores de serviços.\",\n        propriedades: \"Temos várias propriedades disponíveis! Use o mapa para explorar diferentes regiões ou digite uma localização específica na busca.\",\n        servicos: \"Temos prestadores qualificados em várias categorias! Que tipo de serviço você precisa?\",\n        default: \"Interessante! Como posso ajudá-lo com propriedades ou serviços? Digite sua dúvida e eu terei prazer em ajudar.\"\n      };\n\n      const lowerMessage = message.toLowerCase();\n      let response = responses.default;\n\n      for (const [key, value] of Object.entries(responses)) {\n        if (key !== \"default\" && lowerMessage.includes(key)) {\n          response = value;\n          break;\n        }\n      }\n\n      // Criar resposta do assistente\n      await storage.createMessage({\n        conversationId: 'conv-assistant',\n        senderId: 'assistant',\n        receiverId: 'user',\n        message: response,\n        createdAt: new Date().toISOString(),\n        read: false\n      });\n\n      res.json({\n        message: response,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error('Error in chat:', error);\n      res.status(500).json({ message: 'Failed to process chat message' });\n    }\n  });\n\n  // Chat endpoints (all require authentication)\n  app.get('/api/chat/conversations', requireAuth, async (req, res) => {\n    try {\n      const conversations = await storage.getAllConversations();\n      res.json(conversations);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n      res.status(500).json({ message: 'Failed to fetch conversations' });\n    }\n  });\n\n  app.post('/api/chat/conversations', requireAuth, async (req, res) => {\n    try {\n      const { providerId } = req.body;\n      if (!providerId) {\n        return res.status(400).json({ message: 'Provider ID is required' });\n      }\n      const userId = (req as any).user.id; // Get authenticated user ID\n      const conversation = await storage.getOrCreateConversation(userId, providerId);\n      res.json(conversation);\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      res.status(500).json({ message: 'Failed to create conversation' });\n    }\n  });\n\n  app.get('/api/chat/conversations/:id/messages', requireAuth, async (req, res) => {\n    try {\n      const messages = await storage.getMessagesByConversationId(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      res.status(500).json({ message: 'Failed to fetch messages' });\n    }\n  });\n\n  app.post('/api/chat/conversations/:id/messages', requireAuth, async (req, res) => {\n    try {\n      const { message, receiverId } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: 'Message is required' });\n      }\n      \n      // Criar mensagem do usuário\n      const userMessage = await storage.createMessage({\n        conversationId: req.params.id,\n        senderId: 'user',\n        receiverId: receiverId || 'provider',\n        message,\n        createdAt: new Date().toISOString(),\n        read: false\n      });\n\n      // Se não é o assistente, simular resposta do prestador\n      if (req.params.id !== 'conv-assistant') {\n        setTimeout(async () => {\n          const responses = [\n            \"Olá! Obrigado por entrar em contato. Como posso ajudar?\",\n            \"Oi! Vou verificar sua demanda e retorno já com o orçamento.\",\n            \"Entendi sua necessidade. Posso fazer o trabalho sim, quando precisa?\",\n            \"Perfeito! Tenho disponibilidade para atender. Vamos conversar melhor?\",\n            \"Boa tarde! Recebi sua mensagem. Posso ajudar sim com esse serviço.\"\n          ];\n          \n          await storage.createMessage({\n            conversationId: req.params.id,\n            senderId: receiverId || 'provider',\n            receiverId: 'user',\n            message: responses[Math.floor(Math.random() * responses.length)],\n            createdAt: new Date().toISOString(),\n            read: false\n          });\n        }, 2000);\n      }\n\n      res.json(userMessage);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      res.status(500).json({ message: 'Failed to send message' });\n    }\n  });\n\n  // Notifications endpoints (require authentication)\n  app.get('/api/notifications', requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).user.id; // Get authenticated user ID\n      const notifications = await storage.getNotificationsByUserId(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      res.status(500).json({ message: 'Failed to fetch notifications' });\n    }\n  });\n\n  app.get('/api/notifications/count', requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).user.id; // Get authenticated user ID\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error('Error fetching notification count:', error);\n      res.status(500).json({ message: 'Failed to fetch notification count' });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', requireAuth, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ message: 'Notification marked as read' });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      res.status(500).json({ message: 'Failed to mark notification as read' });\n    }\n  });\n\n  // ===== SUBSCRIPTION MANAGEMENT ROUTES =====\n  \n  // Criar assinatura após pagamento bem-sucedido\n  app.post('/api/subscriptions/create', async (req, res) => {\n    try {\n      const { userId, planType, stripeSubscriptionId } = req.body;\n      \n      if (!userId || !planType) {\n        return res.status(400).json({ message: 'Dados obrigatórios: userId e planType' });\n      }\n\n      const subscription = await storage.createSubscription(userId, planType, stripeSubscriptionId);\n      \n      // Criar registro de pagamento\n      await storage.createPaymentRecord({\n        subscriptionId: subscription.id,\n        userId,\n        amount: subscription.price,\n        currency: 'BRL',\n        stripePaymentIntentId: stripeSubscriptionId,\n        status: 'succeeded',\n        paymentMethod: 'card'\n      });\n\n      res.json({\n        success: true,\n        subscription,\n        message: 'Assinatura criada com sucesso!'\n      });\n    } catch (error) {\n      console.error('Erro ao criar assinatura:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Verificar status da assinatura\n  app.get('/api/subscriptions/status/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const validity = await storage.checkSubscriptionValidity(userId);\n      \n      res.json(validity);\n    } catch (error) {\n      console.error('Erro ao verificar assinatura:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Cancelar assinatura (dentro do período de 7 dias)\n  app.post('/api/subscriptions/:subscriptionId/cancel', async (req, res) => {\n    try {\n      const { subscriptionId } = req.params;\n      \n      // Verificar elegibilidade para cancelamento\n      const eligibility = await storage.checkCancellationEligibility(subscriptionId);\n      if (!eligibility.eligible) {\n        return res.status(400).json({ \n          success: false, \n          message: eligibility.reason \n        });\n      }\n\n      const cancelled = await storage.cancelSubscription(subscriptionId);\n      if (cancelled) {\n        res.json({ \n          success: true, \n          message: 'Assinatura cancelada com sucesso' \n        });\n      } else {\n        res.status(400).json({ \n          success: false, \n          message: 'Não foi possível cancelar a assinatura' \n        });\n      }\n    } catch (error) {\n      console.error('Erro ao cancelar assinatura:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Histórico de assinaturas do usuário\n  app.get('/api/subscriptions/history/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const history = await storage.getSubscriptionHistory(userId);\n      res.json(history);\n    } catch (error) {\n      console.error('Erro ao buscar histórico:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Verificar elegibilidade para cancelamento\n  app.get('/api/subscriptions/:subscriptionId/cancellation-eligibility', async (req, res) => {\n    try {\n      const { subscriptionId } = req.params;\n      const eligibility = await storage.checkCancellationEligibility(subscriptionId);\n      res.json(eligibility);\n    } catch (error) {\n      console.error('Erro ao verificar elegibilidade:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Atualizar status da assinatura (para webhooks do Stripe)\n  app.post('/api/subscriptions/:subscriptionId/status', async (req, res) => {\n    try {\n      const { subscriptionId } = req.params;\n      const { status } = req.body;\n      \n      const subscription = await storage.updateSubscriptionStatus(subscriptionId, status);\n      if (subscription) {\n        res.json({ success: true, subscription });\n      } else {\n        res.status(404).json({ message: 'Assinatura não encontrada' });\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar status:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":32094},"server/storage-database.ts":{"content":"import {\n  properties,\n  serviceProviders,\n  serviceCategories,\n  plans,\n  users,\n  userProfiles,\n  reviews,\n  chatMessages,\n  conversations,\n  type Property,\n  type InsertProperty,\n  type ServiceProvider,\n  type InsertServiceProvider,\n  type ServiceCategory,\n  type InsertServiceCategory,\n  type Plan,\n  type InsertPlan,\n  type User,\n  type UpsertUser,\n  type UserProfile,\n  type InsertUserProfile,\n  type Review,\n  type InsertReview,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Conversation,\n  type InsertConversation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, like, desc, asc, inArray } from \"drizzle-orm\";\nimport type { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // Property operations\n  async getProperties(): Promise<Property[]> {\n    return await db.select().from(properties).orderBy(desc(properties.id));\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    const [property] = await db.select().from(properties).where(eq(properties.id, id));\n    return property;\n  }\n\n  async getFeaturedProperties(): Promise<Property[]> {\n    return await db.select().from(properties).where(eq(properties.featured, true)).limit(6);\n  }\n\n  async createProperty(property: InsertProperty): Promise<Property> {\n    const [created] = await db.insert(properties).values(property).returning();\n    return created;\n  }\n\n  async updateProperty(id: string, property: Partial<InsertProperty>): Promise<Property | undefined> {\n    const [updated] = await db\n      .update(properties)\n      .set(property)\n      .where(eq(properties.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Service provider operations\n  async getServiceProviders(): Promise<ServiceProvider[]> {\n    return await db.select().from(serviceProviders).orderBy(desc(serviceProviders.rating));\n  }\n\n  async getServiceProvider(id: string): Promise<ServiceProvider | undefined> {\n    const [provider] = await db.select().from(serviceProviders).where(eq(serviceProviders.id, id));\n    return provider;\n  }\n\n  async createServiceProvider(provider: InsertServiceProvider): Promise<ServiceProvider> {\n    const [created] = await db.insert(serviceProviders).values(provider).returning();\n    return created;\n  }\n\n  // Service category operations\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return await db.select().from(serviceCategories).orderBy(asc(serviceCategories.name));\n  }\n\n  async createServiceCategory(category: InsertServiceCategory): Promise<ServiceCategory> {\n    const [created] = await db.insert(serviceCategories).values(category).returning();\n    return created;\n  }\n\n  // Plan operations\n  async getPlans(): Promise<Plan[]> {\n    return await db.select().from(plans).orderBy(asc(plans.type));\n  }\n\n  async createPlan(plan: InsertPlan): Promise<Plan> {\n    const [created] = await db.insert(plans).values(plan).returning();\n    return created;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // User profile operations\n  async getUserProfiles(params?: { \n    documentType?: string; \n    city?: string; \n    specialties?: string[] \n  }): Promise<UserProfile[]> {\n    let query = db.select().from(userProfiles);\n\n    if (params?.documentType) {\n      query = query.where(eq(userProfiles.documentType, params.documentType));\n    }\n    \n    if (params?.city) {\n      query = query.where(like(userProfiles.city, `%${params.city}%`));\n    }\n\n    return await query.orderBy(desc(userProfiles.rating), desc(userProfiles.lastActive));\n  }\n\n  async getUserProfile(id: string): Promise<UserProfile | undefined> {\n    const [profile] = await db.select().from(userProfiles).where(eq(userProfiles.id, id));\n    return profile;\n  }\n\n  async getUserProfileByDocumentNumber(documentNumber: string): Promise<UserProfile | undefined> {\n    const [profile] = await db.select().from(userProfiles).where(eq(userProfiles.documentNumber, documentNumber));\n    return profile;\n  }\n\n  async createUserProfile(profile: InsertUserProfile): Promise<UserProfile> {\n    const [created] = await db.insert(userProfiles).values(profile).returning();\n    return created;\n  }\n\n  async updateUserProfile(id: string, profile: Partial<InsertUserProfile>): Promise<UserProfile | undefined> {\n    const [updated] = await db\n      .update(userProfiles)\n      .set({ ...profile, updatedAt: new Date() })\n      .where(eq(userProfiles.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Review operations\n  async getProfileReviews(profileId: string): Promise<Review[]> {\n    return await db\n      .select()\n      .from(reviews)\n      .where(eq(reviews.profileId, profileId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [created] = await db.insert(reviews).values(review).returning();\n    \n    // Update profile rating and review count\n    const profileReviews = await this.getProfileReviews(review.profileId);\n    const avgRating = profileReviews.reduce((sum, r) => sum + r.rating, 0) / profileReviews.length;\n    \n    await db\n      .update(userProfiles)\n      .set({\n        rating: avgRating.toFixed(1),\n        reviewCount: profileReviews.length,\n        updatedAt: new Date(),\n      })\n      .where(eq(userProfiles.id, review.profileId));\n    \n    return created;\n  }\n\n  // Chat operations\n  async getConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(like(conversations.participantIds, `%${userId}%`))\n      .orderBy(desc(conversations.lastMessageAt));\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation;\n  }\n\n  async getChatMessages(conversationId: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.conversationId, conversationId))\n      .orderBy(asc(chatMessages.createdAt));\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [created] = await db.insert(conversations).values(conversation).returning();\n    return created;\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [created] = await db.insert(chatMessages).values(message).returning();\n    \n    // Update conversation last message\n    await db\n      .update(conversations)\n      .set({\n        lastMessage: message.message,\n        lastMessageAt: new Date(),\n      })\n      .where(eq(conversations.id, message.conversationId));\n    \n    return created;\n  }\n}","size_bytes":7101},"server/storage.ts":{"content":"import { type Property, type InsertProperty, type ServiceProvider, type InsertServiceProvider, type ServiceCategory, type InsertServiceCategory, type Plan, type InsertPlan } from \"@shared/schema\";\nimport type { AuthUser, LoginData, RegisterData, ProviderRegistrationData, CreatePropertyData } from \"@shared/auth-schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Properties\n  getProperties(): Promise<Property[]>;\n  getFeaturedProperties(): Promise<Property[]>;\n  getProperty(id: string): Promise<Property | undefined>;\n  getPropertiesByCreator(creatorId: string): Promise<Property[]>;\n  incrementPropertyViews(id: string): Promise<Property | undefined>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  \n  // Service Providers\n  getServiceProviders(): Promise<ServiceProvider[]>;\n  getServiceProvidersByCategory(category: string): Promise<ServiceProvider[]>;\n  getServiceProvider(id: string): Promise<ServiceProvider | undefined>;\n  createServiceProvider(provider: InsertServiceProvider): Promise<ServiceProvider>;\n  \n  // Service Categories\n  getServiceCategories(): Promise<ServiceCategory[]>;\n  getServiceCategory(slug: string): Promise<ServiceCategory | undefined>;\n  getServiceCategoryById(id: string): Promise<ServiceCategory | undefined>;\n  createServiceCategory(category: InsertServiceCategory): Promise<ServiceCategory>;\n  \n  // Plans\n  getPlans(): Promise<Plan[]>;\n  getPlan(id: string): Promise<Plan | undefined>;\n  createPlan(plan: InsertPlan): Promise<Plan>;\n\n  // Authentication operations\n  login(data: LoginData): Promise<{ success: boolean; user?: AuthUser; message?: string }>;\n  register(data: RegisterData): Promise<{ success: boolean; user?: AuthUser; message?: string }>;\n  registerProvider(data: ProviderRegistrationData): Promise<{ success: boolean; user?: AuthUser; message?: string }>;\n  \n  // User operations\n  getUser(id: string): Promise<AuthUser | undefined>;\n  getUserByEmail(email: string): Promise<AuthUser | undefined>;\n  getUserById(id: string): Promise<AuthUser | undefined>;\n  updateUserProfile(id: string, profileData: any): Promise<AuthUser | null>;\n  updateUserCategories(userId: string, categoryIds: string[]): Promise<AuthUser | null>;\n  upgradeToProvider(userId: string, providerData: any): Promise<{ success: boolean; user?: AuthUser; message?: string }>;\n  createOrUpdateProviderProfile(profileData: {\n    userId: string;\n    categoryId: string;\n    subcategories: string[];\n    biography: string;\n    profileImage?: string;\n    portfolioImages: string[];\n  }): Promise<void>;\n  \n  // Property operations for providers\n  createPropertyAsProvider(userId: string, property: CreatePropertyData): Promise<Property | null>;\n  canCreateProperty(userId: string): Promise<boolean>;\n\n  // Subscription operations\n  createSubscription(userId: string, planType: string, stripeSubscriptionId?: string): Promise<any>;\n  getActiveSubscription(userId: string): Promise<any>;\n  updateSubscriptionStatus(subscriptionId: string, status: string): Promise<any>;\n  cancelSubscription(subscriptionId: string): Promise<boolean>;\n  checkSubscriptionValidity(userId: string): Promise<{ valid: boolean; subscription?: any; canCancel?: boolean }>;\n  createPaymentRecord(paymentData: any): Promise<any>;\n  getSubscriptionHistory(userId: string): Promise<any[]>;\n  checkCancellationEligibility(subscriptionId: string): Promise<{ eligible: boolean; reason?: string }>;\n\n  // User profile operations (legacy, keeping for compatibility)\n  getUserProfiles(params?: { documentType?: string; city?: string }): Promise<any[]>;\n  getUserProfile(id: string): Promise<any>;\n  createUserProfile(profile: any): Promise<any>;\n  updateUserProfile(id: string, profile: any): Promise<any>;\n  upsertUser(user: any): Promise<any>;\n}\n\n// Simple in-memory user interface for authentication\ninterface SimpleUser {\n  id: string;\n  email: string;\n  password: string;\n  name: string;\n  userType: \"viewer\" | \"provider\";\n  isActive: boolean;\n  providerId?: string;\n  providerPlan?: string;\n  categories?: string[];\n  subcategories?: string[];\n  profileImageUrl?: string;\n  portfolioImages?: string[];\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  phoneNumber?: string;\n  businessHours?: string;\n  bio?: string;\n  documentType?: string;\n  documentNumber?: string;\n}\n\nexport class MemStorage implements IStorage {\n  private properties: Map<string, Property>;\n  private serviceProviders: Map<string, ServiceProvider>;\n  private serviceCategories: Map<string, ServiceCategory>;\n  private plans: Map<string, Plan>;\n  private users: Map<string, SimpleUser>;\n  private sampleProfiles: any[];\n  private sampleUsers: any[];\n\n  constructor() {\n    this.properties = new Map();\n    this.serviceProviders = new Map();\n    this.serviceCategories = new Map();\n    this.plans = new Map();\n    this.users = new Map();\n    this.sampleProfiles = [];\n    this.sampleUsers = [];\n    this.seedData();\n    this.seedTestUsers();\n  }\n\n  private seedData() {\n    // Seed Properties\n    const sampleProperties: Property[] = [\n      {\n        id: randomUUID(),\n        title: \"Apartamento Luxury Vista Mar\",\n        description: \"Apartamento moderno com vista para o mar, totalmente mobiliado com acabamentos de luxo.\",\n        price: \"850000.00\",\n        priceType: \"sale\",\n        propertyType: \"apartment\",\n        location: \"Copacabana, Rio de Janeiro\",\n        bedrooms: 3,\n        bathrooms: 2,\n        parkingSpaces: 2,\n        area: 120,\n        imageUrl: \"https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        images: [],\n        amenities: [\"Piscina\", \"Academia\", \"Varanda\", \"Ar condicionado\"],\n        agencyName: \"Imobiliária Premium RJ\",\n        agencyId: \"agency-premium-rj\",\n        agencyLogo: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Casa Condomínio Fechado\",\n        description: \"Casa espaçosa em condomínio fechado com área de lazer completa.\",\n        price: \"3500.00\",\n        priceType: \"rent\",\n        propertyType: \"house\",\n        location: \"Barra da Tijuca, Rio de Janeiro\",\n        bedrooms: 4,\n        bathrooms: 3,\n        parkingSpaces: 4,\n        area: 200,\n        imageUrl: \"https://images.unsplash.com/photo-1580587771525-78b9dba3b914?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        images: [],\n        amenities: [\"Jardim\", \"Churrasqueira\", \"Piscina\", \"Segurança 24h\"],\n        agencyName: \"Barra Imóveis Ltda\",\n        agencyId: \"agency-barra-ltda\",\n        agencyLogo: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Salão de Festas Premium\",\n        description: \"Salão elegante para eventos com capacidade para 200 pessoas.\",\n        price: \"1200.00\",\n        priceType: \"event\",\n        propertyType: \"event_hall\",\n        location: \"Ipanema, Rio de Janeiro\",\n        bedrooms: null,\n        bathrooms: 4,\n        parkingSpaces: 50,\n        area: 300,\n        imageUrl: \"https://images.unsplash.com/photo-1519167758481-83f550bb49b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        images: [],\n        amenities: [\"Cozinha\", \"Som profissional\", \"Iluminação\", \"Decoração\"],\n        agencyName: \"Eventos & Celebrações\",\n        agencyId: \"agency-eventos-celebracoes\",\n        agencyLogo: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Sala Comercial Centro\",\n        description: \"Sala comercial moderna no centro da cidade com excelente localização.\",\n        price: \"2800.00\",\n        priceType: \"rent\",\n        propertyType: \"commercial\",\n        location: \"Centro, Rio de Janeiro\",\n        bedrooms: null,\n        bathrooms: 2,\n        parkingSpaces: 2,\n        area: 120,\n        imageUrl: \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        images: [],\n        amenities: [\"Fibra óptica\", \"Ar condicionado\", \"Elevador\", \"Segurança\"],\n        agencyName: \"Centro Business Imóveis\",\n        agencyId: \"agency-centro-business\",\n        agencyLogo: \"https://images.unsplash.com/photo-1497366411874-c6010221eadc?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      // Mais propriedades da Imobiliária Premium RJ\n      {\n        id: randomUUID(),\n        title: \"Cobertura Duplex Vista Lagoa\",\n        description: \"Cobertura luxuosa com terraço privativo e vista deslumbrante para a Lagoa Rodrigo de Freitas. Acabamentos importados.\",\n        price: \"2200000.00\",\n        priceType: \"sale\",\n        propertyType: \"apartment\",\n        location: \"Lagoa, Rio de Janeiro\",\n        bedrooms: 4,\n        bathrooms: 4,\n        parkingSpaces: 3,\n        area: 280,\n        imageUrl: \"https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1512917774080-9991f1c4c750?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1571055107559-3e67626fa8be?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Terraço privativo\", \"Vista lagoa\", \"Suíte master\", \"Home office\", \"Lareira\"],\n        agencyName: \"Imobiliária Premium RJ\",\n        agencyId: \"agency-premium-rj\",\n        agencyLogo: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Apartamento Frente Mar Leblon\",\n        description: \"Apartamento de luxo com vista frontal para o mar do Leblon. Completamente reformado e mobiliado.\",\n        price: \"8500.00\",\n        priceType: \"rent\",\n        propertyType: \"apartment\",\n        location: \"Leblon, Rio de Janeiro\",\n        bedrooms: 2,\n        bathrooms: 2,\n        parkingSpaces: 1,\n        area: 95,\n        imageUrl: \"https://images.unsplash.com/photo-1571055107559-3e67626fa8be?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1484154218962-a197022b5858?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Vista mar\", \"Mobiliado\", \"Varanda\", \"Portaria 24h\"],\n        agencyName: \"Imobiliária Premium RJ\",\n        agencyId: \"agency-premium-rj\",\n        agencyLogo: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: false,\n        views: 0,\n      },\n      // Propriedades da Barra Imóveis Ltda\n      {\n        id: randomUUID(),\n        title: \"Casa Condomínio Alpha Barra\",\n        description: \"Casa moderna em condomínio de luxo com área de lazer completa e segurança 24 horas.\",\n        price: \"1200000.00\",\n        priceType: \"sale\",\n        propertyType: \"house\",\n        location: \"Recreio dos Bandeirantes, Rio de Janeiro\",\n        bedrooms: 5,\n        bathrooms: 4,\n        parkingSpaces: 4,\n        area: 350,\n        imageUrl: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1505843513577-22bb7d21e455?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Piscina privativa\", \"Quintal amplo\", \"Churrasqueira\", \"Condomínio fechado\"],\n        agencyName: \"Barra Imóveis Ltda\",\n        agencyId: \"agency-barra-ltda\",\n        agencyLogo: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Apartamento 3 Quartos Downtown\",\n        description: \"Apartamento moderno próximo ao shopping com excelente infraestrutura e lazer.\",\n        price: \"4500.00\",\n        priceType: \"rent\",\n        propertyType: \"apartment\",\n        location: \"Downtown, Rio de Janeiro\",\n        bedrooms: 3,\n        bathrooms: 2,\n        parkingSpaces: 2,\n        area: 85,\n        imageUrl: \"https://images.unsplash.com/photo-1505843513577-22bb7d21e455?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1580587771525-78b9dba3b914?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Academia\", \"Playground\", \"Salão de festas\", \"Piscina\"],\n        agencyName: \"Barra Imóveis Ltda\",\n        agencyId: \"agency-barra-ltda\",\n        agencyLogo: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: false,\n        views: 0,\n      },\n      // Propriedades da Eventos & Celebrações\n      {\n        id: randomUUID(),\n        title: \"Salão Premium Vista Cristo\",\n        description: \"Salão elegante com vista panorâmica do Cristo Redentor. Ideal para casamentos e eventos corporativos.\",\n        price: \"2500.00\",\n        priceType: \"event\",\n        propertyType: \"event_hall\",\n        location: \"Santa Teresa, Rio de Janeiro\",\n        bedrooms: null,\n        bathrooms: 6,\n        parkingSpaces: 80,\n        area: 500,\n        imageUrl: \"https://images.unsplash.com/photo-1464207687429-7505649dae38?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1519167758481-83f550bb49b3?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Vista Cristo\", \"Catering completo\", \"Som e luz\", \"Decoração inclusa\"],\n        agencyName: \"Eventos & Celebrações\",\n        agencyId: \"agency-eventos-celebracoes\",\n        agencyLogo: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: true,\n        views: 0,\n      },\n      // Propriedades da Centro Business Imóveis\n      {\n        id: randomUUID(),\n        title: \"Sala Comercial Corporate Tower\",\n        description: \"Sala comercial moderna em prédio corporativo com infraestrutura completa no coração financeiro da cidade.\",\n        price: \"4200.00\",\n        priceType: \"rent\",\n        propertyType: \"commercial\",\n        location: \"Centro, Rio de Janeiro\",\n        bedrooms: null,\n        bathrooms: 1,\n        parkingSpaces: 2,\n        area: 65,\n        imageUrl: \"https://images.unsplash.com/photo-1541123437800-1bb1317badc2?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Recepção\", \"Internet fibra\", \"Ar central\", \"Estacionamento\"],\n        agencyName: \"Centro Business Imóveis\",\n        agencyId: \"agency-centro-business\",\n        agencyLogo: \"https://images.unsplash.com/photo-1497366411874-c6010221eadc?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: false,\n        views: 0,\n      },\n      // Propriedades da Zona Norte Homes\n      {\n        id: randomUUID(),\n        title: \"Casa Familiar Tijuca\",\n        description: \"Casa tradicional com quintal amplo, ideal para famílias. Localizada em rua tranquila próxima ao metrô.\",\n        price: \"650000.00\",\n        priceType: \"sale\",\n        propertyType: \"house\",\n        location: \"Tijuca, Rio de Janeiro\",\n        bedrooms: 3,\n        bathrooms: 2,\n        parkingSpaces: 1,\n        area: 120,\n        imageUrl: \"https://images.unsplash.com/photo-1484154218962-a197022b5858?w=800&h=600&fit=crop\",\n        images: [\n          \"https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop\"\n        ],\n        amenities: [\"Quintal\", \"Próximo metrô\", \"Garagem\", \"Área de serviço\"],\n        agencyName: \"Zona Norte Homes\",\n        agencyId: \"agency-zona-norte-homes\",\n        agencyLogo: \"https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: false,\n        views: 0,\n      },\n      {\n        id: randomUUID(),\n        title: \"Apartamento 2 Quartos Vila Isabel\",\n        description: \"Apartamento aconchegante em prédio residencial com portaria. Ótima localização na Vila Isabel.\",\n        price: \"2800.00\",\n        priceType: \"rent\",\n        propertyType: \"apartment\",\n        location: \"Vila Isabel, Rio de Janeiro\",\n        bedrooms: 2,\n        bathrooms: 1,\n        parkingSpaces: 1,\n        area: 70,\n        imageUrl: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?w=800&h=600&fit=crop\",\n        images: [],\n        amenities: [\"Portaria\", \"Elevador\", \"Área de serviço\", \"Sol da manhã\"],\n        agencyName: \"Zona Norte Homes\",\n        agencyId: \"agency-zona-norte-homes\",\n        agencyLogo: \"https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=400&fit=crop\",\n        status: \"available\",\n        featured: false,\n        views: 0,\n      }\n    ];\n\n    sampleProperties.forEach(property => {\n      this.properties.set(property.id, property);\n    });\n\n    // CATEGORIAS PARA PLANOS CPF (BE HIVE R$ 29/mês) - 13 categorias de serviços básicos\n    const cpfCategories: ServiceCategory[] = [\n      { \n        id: randomUUID(), \n        name: \"Encanador\", \n        icon: \"fas fa-wrench\", \n        slug: \"encanador\", \n        providerCount: 156,\n        planType: \"CPF\",\n        subcategories: [\"Desentupimento\", \"Instalação Hidráulica\", \"Vazamentos\", \"Aquecedores\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Eletricista\", \n        icon: \"fas fa-bolt\", \n        slug: \"eletricista\", \n        providerCount: 89,\n        planType: \"CPF\",\n        subcategories: [\"Instalação Residencial\", \"Manutenção Industrial\", \"Iluminação\", \"Tomadas e Interruptores\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Pintor\", \n        icon: \"fas fa-paint-roller\", \n        slug: \"pintor\", \n        providerCount: 203,\n        planType: \"CPF\",\n        subcategories: [\"Pintura Residencial\", \"Pintura Comercial\", \"Textura\", \"Verniz e Lacas\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Pedreiro\", \n        icon: \"fas fa-hard-hat\", \n        slug: \"pedreiro\", \n        providerCount: 67,\n        planType: \"CPF\",\n        subcategories: [\"Construção\", \"Reforma\", \"Acabamentos\", \"Reparos\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Marceneiro\", \n        icon: \"fas fa-hammer\", \n        slug: \"marceneiro\", \n        providerCount: 42,\n        planType: \"CPF\",\n        subcategories: [\"Móveis Planejados\", \"Móveis Sob Medida\", \"Reparos\", \"Restauração\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Limpeza\", \n        icon: \"fas fa-broom\", \n        slug: \"limpeza\", \n        providerCount: 124,\n        planType: \"CPF\",\n        subcategories: [\"Limpeza Residencial\", \"Limpeza Pós-Obra\", \"Limpeza de Vidros\", \"Diarista\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Jardinagem\", \n        icon: \"fas fa-leaf\", \n        slug: \"jardinagem\", \n        providerCount: 95,\n        planType: \"CPF\",\n        subcategories: [\"Paisagismo\", \"Manutenção\", \"Poda\", \"Irrigação\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Ar Condicionado\", \n        icon: \"fas fa-snowflake\", \n        slug: \"ar-condicionado\", \n        providerCount: 167,\n        planType: \"CPF\",\n        subcategories: [\"Instalação\", \"Manutenção\", \"Reparo\", \"Limpeza\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Dedetização\", \n        icon: \"fas fa-bug\", \n        slug: \"dedetizacao\", \n        providerCount: 76,\n        planType: \"CPF\",\n        subcategories: [\"Controle de Pragas\", \"Desinsetização\", \"Desratização\", \"Descupinização\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Segurança\", \n        icon: \"fas fa-shield-alt\", \n        slug: \"seguranca\", \n        providerCount: 73,\n        planType: \"CPF\",\n        subcategories: [\"Câmeras\", \"Alarmes\", \"Cercas Elétricas\", \"Monitoramento\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Assistência Técnica\", \n        icon: \"fas fa-tools\", \n        slug: \"assistencia-tecnica\", \n        providerCount: 145,\n        planType: \"CPF\",\n        subcategories: [\"Eletrodomésticos\", \"Eletrônicos\", \"Celulares\", \"Informática\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Serralheria\", \n        icon: \"fas fa-industry\", \n        slug: \"serralheria\", \n        providerCount: 89,\n        planType: \"CPF\",\n        subcategories: [\"Portões\", \"Grades\", \"Estruturas Metálicas\", \"Soldas\"]\n      },\n      { \n        id: randomUUID(), \n        name: \"Mudanças\", \n        icon: \"fas fa-truck\", \n        slug: \"mudancas\", \n        providerCount: 81,\n        planType: \"CPF\",\n        subcategories: [\"Mudanças Residenciais\", \"Mudanças Comerciais\", \"Transporte de Móveis\", \"Embalagem\"]\n      },\n    ];\n\n    // CATEGORIA PARA PLANOS CNPJ (HIVE GOLD R$ 59/mês) - Categoria imobiliária exclusiva\n    const cnpjCategories: ServiceCategory[] = [\n      { \n        id: randomUUID(), \n        name: \"Imobiliária\", \n        icon: \"fas fa-building\", \n        slug: \"imobiliaria\", \n        providerCount: 245,\n        planType: \"CNPJ\",\n        subcategories: [\n          \"Imóveis Residenciais\",\n          \"Imóveis Comerciais\", \n          \"Incorporação e Lançamentos\",\n          \"Locação de Temporada\",\n          \"Administração Predial\",\n          \"Avaliação Imobiliária\",\n          \"Corretagem Especializada\",\n          \"Regularização Imobiliária\",\n          \"Espaços para Eventos\",\n          \"Consultoria Imobiliária\"\n        ]\n      }\n    ];\n\n    // Combinar todas as categorias\n    const allCategories = [...cpfCategories, ...cnpjCategories];\n    \n    allCategories.forEach(category => {\n      this.serviceCategories.set(category.id, category);\n    });\n\n    // Seed Service Providers\n    const providers: ServiceProvider[] = [\n      {\n        id: randomUUID(),\n        name: \"Carlos Silva\",\n        speciality: \"Eletricista Residencial\",\n        description: \"Especialista em instalações elétricas residenciais com mais de 10 anos de experiência.\",\n        documentType: \"CPF\",\n        location: \"Copacabana, Rio de Janeiro\",\n        rating: \"5.0\",\n        reviewCount: 127,\n        imageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1621905251918-48416bd8575a?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1621905251918-48416bd8575a?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1621905251918-48416bd8575a?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n        ],\n        categories: [\"electrician\"],\n        planType: \"A\",\n        verified: true,\n      },\n      {\n        id: randomUUID(),\n        name: \"Limpeza Premium\",\n        speciality: \"Limpeza Residencial e Comercial\",\n        description: \"Empresa especializada em limpeza profissional com equipe treinada e produtos de qualidade.\",\n        documentType: \"CNPJ\",\n        location: \"Barra da Tijuca, Rio de Janeiro\",\n        rating: \"4.9\",\n        reviewCount: 89,\n        imageUrl: \"https://images.unsplash.com/photo-1527515637462-cff94eecc1ac?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1541123437800-1bb1317badc2?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n        ],\n        categories: [\"cleaning\"],\n        planType: \"B\",\n        verified: true,\n      },\n      {\n        id: randomUUID(),\n        name: \"João Tintas\",\n        speciality: \"Pintura Residencial e Comercial\",\n        description: \"Pintor profissional com experiência em diversos tipos de acabamento e técnicas.\",\n        documentType: \"CPF\",\n        location: \"Ipanema, Rio de Janeiro\",\n        rating: \"4.7\",\n        reviewCount: 156,\n        imageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1567767292278-a4f21aa2d36e?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n          \"https://images.unsplash.com/photo-1497366412874-3415097a27e7?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n        ],\n        categories: [\"painter\"],\n        planType: \"A\",\n        verified: true,\n      },\n      // Imobiliárias como prestadores de serviços\n      {\n        id: \"agency-premium-rj\",\n        name: \"Imobiliária Premium RJ\",\n        speciality: \"Imóveis de Luxo na Zona Sul\",\n        description: \"Especializada em imóveis de alto padrão em Copacabana, Ipanema e Leblon. Mais de 15 anos no mercado imobiliário.\",\n        documentType: \"CNPJ\",\n        location: \"Copacabana, Rio de Janeiro\",\n        rating: \"4.9\",\n        reviewCount: 234,\n        imageUrl: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=400&fit=crop\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1512917774080-9991f1c4c750?w=800&h=600&fit=crop\"\n        ],\n        categories: [\"imobiliaria\"],\n        planType: \"B\",\n        verified: true,\n      },\n      {\n        id: \"agency-barra-ltda\",\n        name: \"Barra Imóveis Ltda\",\n        speciality: \"Residencial e Comercial na Barra\",\n        description: \"Imobiliária tradicional da Barra da Tijuca com foco em residências familiares e empreendimentos comerciais.\",\n        documentType: \"CNPJ\", \n        location: \"Barra da Tijuca, Rio de Janeiro\",\n        rating: \"4.7\",\n        reviewCount: 189,\n        imageUrl: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=400&h=400&fit=crop\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1580587771525-78b9dba3b914?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1505843513577-22bb7d21e455?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=800&h=600&fit=crop\"\n        ],\n        categories: [\"imobiliaria\"],\n        planType: \"B\",\n        verified: true,\n      },\n      {\n        id: \"agency-eventos-celebracoes\",\n        name: \"Eventos & Celebrações\",\n        speciality: \"Espaços para Eventos e Festas\",\n        description: \"Especializada em locação de salões de festa, espaços para casamentos e eventos corporativos em toda a cidade.\",\n        documentType: \"CNPJ\",\n        location: \"Ipanema, Rio de Janeiro\", \n        rating: \"4.8\",\n        reviewCount: 156,\n        imageUrl: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=400&h=400&fit=crop\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1519167758481-83f550bb49b3?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1464207687429-7505649dae38?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=800&h=600&fit=crop\"\n        ],\n        categories: [\"imobiliaria\"],\n        planType: \"B\",\n        verified: true,\n      },\n      {\n        id: \"agency-centro-business\",\n        name: \"Centro Business Imóveis\",\n        speciality: \"Escritórios e Salas Comerciais\",\n        description: \"Foco exclusivo em imóveis comerciais no centro da cidade. Parceira de grandes empresas e startups.\",\n        documentType: \"CNPJ\",\n        location: \"Centro, Rio de Janeiro\",\n        rating: \"4.6\", \n        reviewCount: 98,\n        imageUrl: \"https://images.unsplash.com/photo-1497366411874-c6010221eadc?w=400&h=400&fit=crop\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1541123437800-1bb1317badc2?w=800&h=600&fit=crop\"\n        ],\n        categories: [\"imobiliaria\"],\n        planType: \"B\",\n        verified: true,\n      },\n      {\n        id: \"agency-zona-norte-homes\",\n        name: \"Zona Norte Homes\",\n        speciality: \"Residenciais Zona Norte e Tijuca\",\n        description: \"Imobiliária especializada em residências familiares na Zona Norte, Tijuca e adjacências. Preços acessíveis.\",\n        documentType: \"CNPJ\",\n        location: \"Tijuca, Rio de Janeiro\",\n        rating: \"4.5\",\n        reviewCount: 167,\n        imageUrl: \"https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=400&fit=crop\",\n        portfolioImages: [\n          \"https://images.unsplash.com/photo-1449844908441-8829872d2607?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop\",\n          \"https://images.unsplash.com/photo-1484154218962-a197022b5858?w=800&h=600&fit=crop\"\n        ],\n        categories: [\"imobiliaria\"],\n        planType: \"B\", \n        verified: true,\n      }\n    ];\n\n    providers.forEach(provider => {\n      this.serviceProviders.set(provider.id, provider);\n    });\n\n    // Seed Plans\n    const plans: Plan[] = [\n      {\n        id: randomUUID(),\n        name: \"BE HIVE\",\n        type: \"A\",\n        price: \"29.00\",\n        features: [\n          \"Perfil profissional completo\",\n          \"Galeria de trabalhos (até 20 fotos)\",\n          \"Sistema de avaliações\",\n          \"Contato direto com clientes\",\n          \"Aparição em buscas\",\n          \"Todas as categorias de serviço\",\n          \"Suporte via WhatsApp\"\n        ],\n        targetAudience: \"CPF\",\n        popular: false,\n      },\n      {\n        id: randomUUID(),\n        name: \"HIVE GOLD\",\n        type: \"B\",\n        price: \"59.00\",\n        features: [\n          \"Tudo do Plano A, mais:\",\n          \"Perfil de empresa completo\",\n          \"Listagem ilimitada de imóveis\",\n          \"Destaque em buscas\",\n          \"Equipe de profissionais\",\n          \"Galeria ilimitada de fotos\",\n          \"Relatórios e analytics\",\n          \"Suporte prioritário\"\n        ],\n        targetAudience: \"CNPJ\",\n        popular: true,\n      }\n    ];\n\n    plans.forEach(plan => {\n      this.plans.set(plan.id, plan);\n    });\n\n    // Seed Sample Profiles\n    const sampleProfilesData = [\n      {\n        id: 'cfe135d3-a1bc-451e-87ac-45ab1c584f25',\n        documentType: 'CPF',\n        displayName: 'João Silva',\n        bio: 'Especialista em reparos domésticos e instalações elétricas. Mais de 10 anos de experiência no mercado.',\n        profession: 'Eletricista',\n        city: 'São Paulo',\n        state: 'SP',\n        specialties: ['Instalação Elétrica', 'Reparos', 'Manutenção'],\n        services: ['Instalação', 'Reparo', 'Manutenção preventiva'],\n        profileImage: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face',\n        rating: '4.8',\n        reviewCount: 156,\n        completedJobs: 89,\n        responseTime: 15,\n        verified: true,\n        available: true,\n        planType: 'A',\n        phone: '(11) 98765-4321',\n        socialLinks: {\n          whatsapp: '5511987654321',\n          instagram: 'https://instagram.com/joaoeletricista'\n        },\n        portfolioImages: []\n      },\n      {\n        id: 'd8d5b78d-493b-411b-8eb6-c6d943215874',\n        documentType: 'CNPJ',\n        displayName: 'Construtora Alfa Ltda',\n        bio: 'Empresa especializada em construção civil e reformas residenciais e comerciais.',\n        companyName: 'Construtora Alfa Ltda',\n        tradeName: 'Alfa Construções',\n        profession: 'Construção Civil',\n        city: 'Rio de Janeiro',\n        state: 'RJ',\n        foundedYear: 2010,\n        employeeCount: 25,\n        companyDescription: 'Somos uma empresa consolidada no mercado de construção civil, oferecendo serviços completos de construção e reforma.',\n        specialties: ['Construção', 'Reforma', 'Acabamentos'],\n        services: ['Obra completa', 'Reforma', 'Acabamentos finos'],\n        profileImage: 'https://images.unsplash.com/photo-1541888946425-d81bb19240f5?w=400&h=400&fit=crop',\n        rating: '4.9',\n        reviewCount: 234,\n        completedJobs: 145,\n        responseTime: 30,\n        verified: true,\n        available: true,\n        planType: 'B',\n        phone: '(21) 3456-7890',\n        website: 'https://alfaconstrucoes.com.br',\n        socialLinks: {\n          website: 'https://alfaconstrucoes.com.br',\n          instagram: 'https://instagram.com/alfaconstrucoes',\n          linkedin: 'https://linkedin.com/company/alfa-construcoes'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1503387762-592deb58ef4e?w=800&h=600&fit=crop',\n          'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: randomUUID(),\n        documentType: 'CPF',\n        displayName: 'Maria Santos',\n        bio: 'Paisagista experiente, especializada em jardins residenciais e comerciais com foco em sustentabilidade.',\n        profession: 'Paisagista',\n        city: 'Belo Horizonte',\n        state: 'MG',\n        specialties: ['Jardins', 'Paisagismo', 'Plantas nativas'],\n        services: ['Projeto de jardim', 'Manutenção', 'Consultoria'],\n        profileImage: 'https://images.unsplash.com/photo-1494790108755-2616b612b632?w=400&h=400&fit=crop&crop=face',\n        rating: '4.7',\n        reviewCount: 89,\n        completedJobs: 67,\n        responseTime: 20,\n        verified: true,\n        available: false,\n        planType: 'A',\n        phone: '(31) 99876-5432',\n        socialLinks: {\n          instagram: 'https://instagram.com/mariapaisagista',\n          facebook: 'https://facebook.com/mariasantospaisagismo'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=800&h=600&fit=crop',\n          'https://images.unsplash.com/photo-1585320806297-9794b3e4eeae?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: 'a275f77f-969e-450a-b9ef-d0594b4f0603',\n        documentType: 'CPF',\n        displayName: 'Carlos Mendes',\n        bio: 'Encanador com mais de 15 anos de experiência em instalações hidráulicas e reparos de emergência.',\n        profession: 'Encanador',\n        city: 'Brasília',\n        state: 'DF',\n        specialties: ['Instalação hidráulica', 'Vazamentos', 'Desentupimento'],\n        services: ['Reparo urgente', 'Instalação', 'Manutenção preventiva'],\n        profileImage: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',\n        rating: '4.9',\n        reviewCount: 312,\n        completedJobs: 278,\n        responseTime: 5,\n        verified: true,\n        available: true,\n        planType: 'A',\n        phone: '(61) 99999-8888',\n        socialLinks: {\n          whatsapp: '556199999888'\n        },\n        portfolioImages: []\n      },\n      {\n        id: '61cfe2ef-bb3b-4960-bb1d-111492d7d997',\n        documentType: 'CPF',\n        displayName: 'Ana Costa',\n        bio: 'Pintora especializada em pintura residencial e decorativa. Trabalho com tintas ecológicas e técnicas modernas.',\n        profession: 'Pintor',\n        city: 'Salvador',\n        state: 'BA',\n        specialties: ['Pintura residencial', 'Pintura decorativa', 'Textura'],\n        services: ['Pintura interna', 'Pintura externa', 'Decoração'],\n        profileImage: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face',\n        rating: '4.6',\n        reviewCount: 98,\n        completedJobs: 76,\n        responseTime: 25,\n        verified: true,\n        available: true,\n        planType: 'A',\n        phone: '(71) 98888-7777',\n        socialLinks: {\n          whatsapp: '5571988887777',\n          instagram: 'https://instagram.com/anapintora'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1562259949-e8e7689d7828?w=800&h=600&fit=crop',\n          'https://images.unsplash.com/photo-1589939705384-5185137a7f0f?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: 'f8d5b78d-493b-411b-8eb6-c6d943215875',\n        documentType: 'CPF',\n        displayName: 'Roberto Silva',\n        bio: 'Técnico em ar condicionado e refrigeração com certificações internacionais.',\n        profession: 'Ar Condicionado',\n        city: 'Recife',\n        state: 'PE',\n        specialties: ['Instalação', 'Manutenção', 'Split', 'Central'],\n        services: ['Instalação de split', 'Limpeza', 'Reparo'],\n        profileImage: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',\n        rating: '4.8',\n        reviewCount: 187,\n        completedJobs: 143,\n        responseTime: 30,\n        verified: true,\n        available: true,\n        planType: 'A',\n        phone: '(81) 97777-6666',\n        socialLinks: {\n          whatsapp: '558197776666'\n        },\n        portfolioImages: []\n      },\n      {\n        id: 'g9e5c78f-594c-512c-9fc7-d7e954326876',\n        documentType: 'CNPJ',\n        displayName: 'TechFix Assistência Técnica',\n        bio: 'Empresa especializada em assistência técnica de eletrodomésticos e eletrônicos.',\n        companyName: 'TechFix Assistência Técnica Ltda',\n        tradeName: 'TechFix',\n        profession: 'Assistência Técnica',\n        city: 'Fortaleza',\n        state: 'CE',\n        foundedYear: 2015,\n        employeeCount: 8,\n        companyDescription: 'Especialistas em reparo de eletrodomésticos, celulares e equipamentos eletrônicos.',\n        specialties: ['Eletrodomésticos', 'Celulares', 'Eletrônicos'],\n        services: ['Reparo', 'Manutenção', 'Substituição de peças'],\n        profileImage: 'https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?w=400&h=400&fit=crop',\n        rating: '4.7',\n        reviewCount: 256,\n        completedJobs: 189,\n        responseTime: 15,\n        verified: true,\n        available: true,\n        planType: 'B',\n        phone: '(85) 3333-4444',\n        website: 'https://techfix.com.br',\n        socialLinks: {\n          website: 'https://techfix.com.br',\n          instagram: 'https://instagram.com/techfixce'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1621905251189-08b45d6a269e?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: 'h0f6d89g-605d-623d-0gd8-e8f065437987',\n        documentType: 'CPF',\n        displayName: 'Lucas Ferreira',\n        bio: 'Marceneiro artesanal especializado em móveis planejados e restauração de antiguidades.',\n        profession: 'Marceneiro',\n        city: 'Curitiba',\n        state: 'PR',\n        specialties: ['Móveis planejados', 'Restauração', 'Madeira maciça'],\n        services: ['Móveis sob medida', 'Restauração', 'Reparos'],\n        profileImage: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face',\n        rating: '4.9',\n        reviewCount: 67,\n        completedJobs: 45,\n        responseTime: 60,\n        verified: true,\n        available: false,\n        planType: 'A',\n        phone: '(41) 96666-5555',\n        socialLinks: {\n          whatsapp: '554196665555',\n          instagram: 'https://instagram.com/lucasmarceneiro'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=600&fit=crop',\n          'https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: 'i1g7e90h-716e-734e-1he9-f9g176548098',\n        documentType: 'CPF',\n        displayName: 'Fernanda Oliveira',\n        bio: 'Diarista e faxineira profissional com experiência em limpeza residencial e comercial.',\n        profession: 'Limpeza',\n        city: 'Porto Alegre',\n        state: 'RS',\n        specialties: ['Limpeza residencial', 'Limpeza pós-obra', 'Organização'],\n        services: ['Faxina completa', 'Limpeza semanal', 'Limpeza pós-mudança'],\n        profileImage: 'https://images.unsplash.com/photo-1494790108755-2616b612b632?w=400&h=400&fit=crop&crop=face',\n        rating: '4.8',\n        reviewCount: 134,\n        completedJobs: 298,\n        responseTime: 20,\n        verified: true,\n        available: true,\n        planType: 'A',\n        phone: '(51) 95555-4444',\n        socialLinks: {\n          whatsapp: '555195554444'\n        },\n        portfolioImages: []\n      },\n      {\n        id: 'j2h8f01i-827f-845f-2if0-g0h287659109',\n        documentType: 'CNPJ',\n        displayName: 'Verde Jardins Ltda',\n        bio: 'Empresa de jardinagem e paisagismo para residências e empresas.',\n        companyName: 'Verde Jardins Paisagismo Ltda',\n        tradeName: 'Verde Jardins',\n        profession: 'Jardinagem',\n        city: 'Goiânia',\n        state: 'GO',\n        foundedYear: 2018,\n        employeeCount: 12,\n        companyDescription: 'Especialistas em criação e manutenção de jardins, gramados e áreas verdes.',\n        specialties: ['Paisagismo', 'Manutenção', 'Irrigação'],\n        services: ['Projeto de jardim', 'Manutenção mensal', 'Sistema de irrigação'],\n        profileImage: 'https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&h=400&fit=crop',\n        rating: '4.6',\n        reviewCount: 89,\n        completedJobs: 67,\n        responseTime: 45,\n        verified: true,\n        available: true,\n        planType: 'B',\n        phone: '(62) 3222-1111',\n        website: 'https://verdejardins.com.br',\n        socialLinks: {\n          website: 'https://verdejardins.com.br',\n          instagram: 'https://instagram.com/verdejardinsgo',\n          facebook: 'https://facebook.com/verdejardins'\n        },\n        portfolioImages: [\n          'https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=800&h=600&fit=crop',\n          'https://images.unsplash.com/photo-1585320806297-9794b3e4eeae?w=800&h=600&fit=crop'\n        ]\n      },\n      {\n        id: 'k3i9g12j-938g-956g-3jg1-h1i398760210',\n        documentType: 'CPF',\n        displayName: 'Paulo Santos',\n        bio: 'Serralheiro especializado em portões, grades e estruturas metálicas.',\n        profession: 'Serralheiro',\n        city: 'Campinas',\n        state: 'SP',\n        specialties: ['Portões', 'Grades', 'Soldas', 'Estruturas metálicas'],\n        services: ['Instalação de portões', 'Reparos', 'Soldas em geral'],\n        profileImage: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=400&h=400&fit=crop&crop=face',\n        rating: '4.5',\n        reviewCount: 78,\n        completedJobs: 56,\n        responseTime: 40,\n        verified: false,\n        available: true,\n        planType: 'A',\n        phone: '(19) 94444-3333',\n        socialLinks: {\n          whatsapp: '551994443333'\n        },\n        portfolioImages: []\n      }\n    ];\n\n    this.sampleProfiles = sampleProfilesData;\n    \n    // Seed some example conversations\n    this.seedConversations();\n  }\n\n  private seedConversations() {\n    // Create sample conversations\n    const conversations = [\n      {\n        id: 'conv-assistant',\n        participantId: 'assistant',\n        participantName: 'Assistente Hive',\n        participantType: 'assistant',\n        lastMessage: 'Olá! Como posso ajudá-lo hoje?',\n        lastMessageAt: new Date(Date.now() - 300000).toISOString(), // 5 minutes ago\n        unreadCount: 0,\n        isOnline: true\n      },\n      {\n        id: 'conv-joao',\n        participantId: 'cfe135d3-a1bc-451e-87ac-45ab1c584f25',\n        participantName: 'João Santos',\n        participantImage: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',\n        participantType: 'provider',\n        lastMessage: 'Oi! Posso ajudar com sua demanda de elétrica.',\n        lastMessageAt: new Date(Date.now() - 120000).toISOString(), // 2 minutes ago\n        unreadCount: 2,\n        isOnline: true\n      },\n      {\n        id: 'conv-maria',\n        participantId: '61cfe2ef-bb3b-4960-bb1d-111492d7d997',\n        participantName: 'Ana Costa',\n        participantImage: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face',\n        participantType: 'provider',\n        lastMessage: 'Enviei o orçamento por WhatsApp',\n        lastMessageAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n        unreadCount: 0,\n        isOnline: false\n      }\n    ];\n\n    conversations.forEach(conv => {\n      this.conversations.set(conv.id, conv);\n    });\n\n    // Create sample messages\n    const messages = [\n      {\n        id: 'msg1',\n        conversationId: 'conv-assistant',\n        sender: 'assistant',\n        message: 'Olá! Bem-vindo ao Hive. Como posso ajudá-lo hoje?',\n        timestamp: new Date(Date.now() - 300000).toISOString(),\n        isRead: true\n      },\n      {\n        id: 'msg2',\n        conversationId: 'conv-joao',\n        sender: 'provider',\n        message: 'Oi! Vi que você está procurando um eletricista.',\n        timestamp: new Date(Date.now() - 180000).toISOString(),\n        isRead: true\n      },\n      {\n        id: 'msg3',\n        conversationId: 'conv-joao',\n        sender: 'provider',\n        message: 'Posso ajudar com sua demanda de elétrica. Qual o problema?',\n        timestamp: new Date(Date.now() - 120000).toISOString(),\n        isRead: false\n      },\n      {\n        id: 'msg4',\n        conversationId: 'conv-maria',\n        sender: 'user',\n        message: 'Preciso de um orçamento para pintura da casa',\n        timestamp: new Date(Date.now() - 7200000).toISOString(),\n        isRead: true\n      },\n      {\n        id: 'msg5',\n        conversationId: 'conv-maria',\n        sender: 'provider',\n        message: 'Enviei o orçamento por WhatsApp. Dê uma olhada!',\n        timestamp: new Date(Date.now() - 3600000).toISOString(),\n        isRead: true\n      }\n    ];\n\n    messages.forEach(msg => {\n      this.chatMessages.set(msg.id, msg);\n    });\n  }\n\n  // Properties\n  async getProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values());\n  }\n\n  async getFeaturedProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(property => property.featured);\n  }\n\n  async getPropertiesByCreator(creatorId: string): Promise<Property[]> {\n    // For now, we'll match properties by agencyId since we don't have a createdBy field\n    // In a real implementation with database, you'd filter by a proper createdBy/ownerId field\n    return Array.from(this.properties.values()).filter(p => p.agencyId === creatorId);\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    return this.properties.get(id);\n  }\n\n  async incrementPropertyViews(id: string): Promise<Property | undefined> {\n    const property = this.properties.get(id);\n    if (property) {\n      property.views = (property.views || 0) + 1;\n      this.properties.set(id, property);\n      return property;\n    }\n    return undefined;\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const id = randomUUID();\n    const property: Property = { \n      ...insertProperty, \n      id, \n      views: 0, \n      status: \"available\",\n      bedrooms: insertProperty.bedrooms || null,\n      bathrooms: insertProperty.bathrooms || null,\n      parkingSpaces: insertProperty.parkingSpaces || null,\n      area: insertProperty.area || null\n    };\n    this.properties.set(id, property);\n    return property;\n  }\n\n  // Service Providers\n  async getServiceProviders(): Promise<ServiceProvider[]> {\n    return Array.from(this.serviceProviders.values()).sort((a, b) => \n      parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\")\n    );\n  }\n\n  async getServiceProvidersByCategory(category: string): Promise<ServiceProvider[]> {\n    return Array.from(this.serviceProviders.values())\n      .filter(provider => provider.categories.includes(category))\n      .sort((a, b) => parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\"));\n  }\n\n  async getServiceProvider(id: string): Promise<ServiceProvider | undefined> {\n    return this.serviceProviders.get(id);\n  }\n\n  async createServiceProvider(insertProvider: InsertServiceProvider): Promise<ServiceProvider> {\n    const id = randomUUID();\n    const provider: ServiceProvider = { \n      ...insertProvider, \n      id, \n      rating: \"0.0\", \n      reviewCount: 0, \n      verified: false,\n      description: insertProvider.description || null,\n      phone: insertProvider.phone || null,\n      email: insertProvider.email || null,\n      portfolioImages: (insertProvider.portfolioImages as string[]) || []\n    };\n    this.serviceProviders.set(id, provider);\n    return provider;\n  }\n\n  // Service Categories\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return Array.from(this.serviceCategories.values());\n  }\n\n  async getServiceCategory(slug: string): Promise<ServiceCategory | undefined> {\n    return Array.from(this.serviceCategories.values()).find(cat => cat.slug === slug);\n  }\n\n  async getServiceCategoryById(id: string): Promise<ServiceCategory | undefined> {\n    return this.serviceCategories.get(id);\n  }\n\n  async createServiceCategory(insertCategory: InsertServiceCategory): Promise<ServiceCategory> {\n    const id = randomUUID();\n    const category: ServiceCategory = { ...insertCategory, id, providerCount: 0 };\n    this.serviceCategories.set(id, category);\n    return category;\n  }\n\n  // Plans\n  async getPlans(): Promise<Plan[]> {\n    return Array.from(this.plans.values());\n  }\n\n  async getPlan(id: string): Promise<Plan | undefined> {\n    return this.plans.get(id);\n  }\n\n  async createPlan(insertPlan: InsertPlan): Promise<Plan> {\n    const id = randomUUID();\n    const plan: Plan = { \n      ...insertPlan, \n      id, \n      popular: insertPlan.popular || false,\n      features: [...(insertPlan.features || [])]\n    };\n    this.plans.set(id, plan);\n    return plan;\n  }\n\n  // Profile implementations\n  async getUser(id: string): Promise<any> {\n    return this.sampleUsers.find(u => u.id === id);\n  }\n\n  async upsertUser(user: any): Promise<any> {\n    return user;\n  }\n\n  async getUserProfiles(params?: { documentType?: string; city?: string }): Promise<any[]> {\n    let profiles = this.sampleProfiles;\n    \n    if (params?.documentType) {\n      profiles = profiles.filter(p => p.documentType === params.documentType);\n    }\n    \n    if (params?.city) {\n      profiles = profiles.filter(p => p.city?.includes(params.city) || false);\n    }\n    \n    return profiles;\n  }\n\n  async getUserProfile(id: string): Promise<any> {\n    return this.sampleProfiles.find(p => p.id === id);\n  }\n\n  async createUserProfile(profile: any): Promise<any> {\n    const newProfile = { ...profile, id: randomUUID() };\n    this.sampleProfiles.push(newProfile);\n    return newProfile;\n  }\n\n  // Chat and notifications methods\n  private conversations: Map<string, any> = new Map();\n  private chatMessages: Map<string, any> = new Map();\n  private notifications: Map<string, any> = new Map();\n\n  async getAllConversations(): Promise<any[]> {\n    return Array.from(this.conversations.values());\n  }\n\n  async getConversationsByUserId(userId: string): Promise<any[]> {\n    return Array.from(this.conversations.values()).filter(c => c.participantIds?.includes(userId));\n  }\n\n  async getOrCreateConversation(userId: string, providerId: string): Promise<any> {\n    // Buscar conversa existente usando o participantId (não participantIds)\n    const existingConversation = Array.from(this.conversations.values()).find(c => \n      c.participantId === providerId\n    );\n    \n    if (existingConversation) {\n      return existingConversation;\n    }\n\n    const providerProfile = this.sampleProfiles.find(p => p.id === providerId);\n    \n    const newConversation = {\n      id: randomUUID(),\n      participantId: providerId,\n      participantName: providerProfile?.displayName || 'Profissional',\n      participantImage: providerProfile?.profileImage,\n      participantType: 'provider',\n      lastMessage: 'Conversa iniciada',\n      lastMessageAt: new Date().toISOString(),\n      unreadCount: 0,\n      isOnline: Math.random() > 0.5\n    };\n\n    this.conversations.set(newConversation.id, newConversation);\n    return newConversation;\n  }\n\n  async getMessagesByConversationId(conversationId: string): Promise<any[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(m => m.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt || a.timestamp).getTime() - new Date(b.createdAt || b.timestamp).getTime());\n  }\n\n  async createMessage(message: any): Promise<any> {\n    const newMessage = {\n      id: randomUUID(),\n      conversationId: message.conversationId,\n      senderId: message.senderId || message.sender,\n      receiverId: message.receiverId,\n      message: message.message,\n      createdAt: message.createdAt || message.timestamp,\n      read: message.read || message.isRead || false\n    };\n\n    this.chatMessages.set(newMessage.id, newMessage);\n\n    // Update conversation last message\n    const conversation = this.conversations.get(message.conversationId);\n    if (conversation) {\n      conversation.lastMessage = message.message;\n      conversation.lastMessageAt = message.createdAt || message.timestamp;\n    }\n\n    return newMessage;\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    Array.from(this.chatMessages.values()).forEach(message => {\n      if (message.conversationId === conversationId && message.sender !== 'user') {\n        message.isRead = true;\n      }\n    });\n  }\n\n  // Notifications methods\n  async getNotificationsByUserId(userId: string): Promise<any[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async createNotification(notification: any): Promise<any> {\n    const newNotification = {\n      id: randomUUID(),\n      userId: notification.userId,\n      type: notification.type,\n      title: notification.title,\n      content: notification.content,\n      isRead: false,\n      relatedId: notification.relatedId || null,\n      createdAt: new Date(),\n    };\n\n    this.notifications.set(newNotification.id, newNotification);\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n    }\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    return Array.from(this.notifications.values()).filter((n: any) => n.userId === userId && !n.isRead).length;\n  }\n\n  async updateUserProfile(id: string, profile: any): Promise<any> {\n    const index = this.sampleProfiles.findIndex(p => p.id === id);\n    if (index >= 0) {\n      this.sampleProfiles[index] = { ...this.sampleProfiles[index], ...profile };\n      return this.sampleProfiles[index];\n    }\n    return undefined;\n  }\n\n  async updateUserCategories(userId: string, categoryIds: string[]): Promise<AuthUser | null> {\n    const user = this.users.get(userId);\n    if (!user) {\n      return null;\n    }\n\n    // Update user categories\n    user.categories = categoryIds;\n    this.users.set(userId, user);\n\n    // If user has a provider profile, update it too\n    if (user.providerId) {\n      const provider = this.serviceProviders.get(user.providerId);\n      if (provider) {\n        provider.categories = categoryIds;\n        this.serviceProviders.set(user.providerId, provider);\n      }\n    }\n\n    return this.buildAuthUser(user);\n  }\n\n  async markProviderAsCompletelySetup(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      // Mark user as completely setup to avoid further redirections\n      (user as any).setupCompleted = true;\n      this.users.set(userId, user);\n    }\n  }\n\n  // Provider profile management\n  private providerProfiles: Map<string, any> = new Map();\n\n  async createOrUpdateProviderProfile(profileData: {\n    userId: string;\n    categoryId: string;\n    subcategories: string[];\n    biography: string;\n    profileImage?: string;\n    portfolioImages: string[];\n  }): Promise<void> {\n    const profile = {\n      ...profileData,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Store provider profile details\n    this.providerProfiles.set(profileData.userId, profile);\n\n    // CRÍTICO: Update SimpleUser data to persist in buildAuthUser\n    const user = this.users.get(profileData.userId);\n    if (user) {\n      user.subcategories = profileData.subcategories;\n      user.bio = profileData.biography;\n      user.profileImageUrl = profileData.profileImage;\n      user.portfolioImages = profileData.portfolioImages;\n      this.users.set(profileData.userId, user);\n    }\n\n    // Update user profile in sampleProfiles to include this data\n    const existingProfileIndex = this.sampleProfiles.findIndex(p => p.id === profileData.userId);\n    if (existingProfileIndex >= 0) {\n      this.sampleProfiles[existingProfileIndex] = {\n        ...this.sampleProfiles[existingProfileIndex],\n        bio: profileData.biography,\n        profileImage: profileData.profileImage || this.sampleProfiles[existingProfileIndex].profileImage,\n        portfolioImages: profileData.portfolioImages,\n        subcategories: profileData.subcategories,\n        categoryId: profileData.categoryId\n      };\n    } else {\n      // Create new profile if doesn't exist\n      const newProfile = {\n        id: profileData.userId,\n        displayName: 'Prestador Hive',\n        bio: profileData.biography,\n        profileImage: profileData.profileImage,\n        portfolioImages: profileData.portfolioImages,\n        subcategories: profileData.subcategories,\n        categoryId: profileData.categoryId,\n        documentType: 'CPF',\n        profession: 'Prestador de Serviços',\n        city: 'São Paulo',\n        state: 'SP',\n        verified: false,\n        available: true,\n        planType: 'A',\n        rating: '0.0',\n        reviewCount: 0,\n        completedJobs: 0,\n        responseTime: 60,\n        socialLinks: {}\n      };\n      this.sampleProfiles.push(newProfile);\n    }\n  }\n\n  // User management operations\n  async getUserById(id: string): Promise<AuthUser | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    return {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      userType: user.userType,\n      isActive: user.isActive,\n      completionPercentage: user.userType === 'provider' ? 65 : 45,\n      planStatus: user.userType === 'provider' ? 'active' : undefined,\n      isVerified: user.userType === 'provider',\n      documentsVerified: false,\n    };\n  }\n\n  async updateUserProfile(id: string, profileData: any): Promise<AuthUser | null> {\n    const user = this.users.get(id);\n    if (!user) return null;\n\n    // Update basic user data\n    if (profileData.name) user.name = profileData.name;\n    if (profileData.email) user.email = profileData.email;\n    if (profileData.profileImageUrl) user.profileImageUrl = profileData.profileImageUrl;\n    if (profileData.address) user.address = profileData.address;\n    if (profileData.city) user.city = profileData.city;\n    if (profileData.state) user.state = profileData.state;\n    if (profileData.zipCode) user.zipCode = profileData.zipCode;\n    if (profileData.phoneNumber) user.phoneNumber = profileData.phoneNumber;\n    if (profileData.businessHours) user.businessHours = profileData.businessHours;\n    if (profileData.description) user.bio = profileData.description;\n    if (profileData.documentType) user.documentType = profileData.documentType;\n    if (profileData.documentNumber) user.documentNumber = profileData.documentNumber;\n    if (profileData.portfolioImages) user.portfolioImages = profileData.portfolioImages;\n\n    // Update provider data if exists\n    if (user.userType === 'provider' && user.providerId) {\n      const provider = this.serviceProviders.get(user.providerId);\n      if (provider) {\n        if (profileData.speciality) provider.speciality = profileData.speciality;\n        if (profileData.description) provider.description = profileData.description;\n        if (profileData.location) provider.location = profileData.location;\n        if (profileData.phoneNumber) provider.phone = profileData.phoneNumber;\n        if (profileData.profileImageUrl) provider.imageUrl = profileData.profileImageUrl;\n        if (profileData.categories) provider.categories = profileData.categories;\n        if (profileData.documentType) provider.documentType = profileData.documentType;\n        if (profileData.documentNumber) provider.documentNumber = profileData.documentNumber;\n        if (profileData.portfolioImages) provider.portfolioImages = profileData.portfolioImages;\n      }\n    }\n\n    // Return updated auth user\n    return this.buildAuthUser(user);\n  }\n\n  async upgradeToProvider(userId: string, providerData: any): Promise<{ success: boolean; user?: AuthUser; message?: string }> {\n    const user = this.users.get(userId);\n    if (!user) {\n      return { success: false, message: \"Usuário não encontrado\" };\n    }\n\n    if (user.userType === \"provider\") {\n      return { success: false, message: \"Usuário já é prestador\" };\n    }\n\n    try {\n      // Update user type to provider\n      user.userType = \"provider\";\n\n      // Create service provider profile\n      const providerId = randomUUID();\n      const provider: ServiceProvider = {\n        id: providerId,\n        userId: userId,\n        name: providerData.name,\n        speciality: providerData.speciality,\n        description: providerData.description,\n        documentType: providerData.documentType,\n        documentNumber: providerData.documentNumber,\n        location: providerData.location,\n        rating: \"0.0\",\n        reviewCount: 0,\n        imageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop\",\n        portfolioImages: [],\n        categories: providerData.categories,\n        phone: providerData.phone,\n        email: providerData.email,\n        planType: providerData.planType,\n        planActive: true, // Activated immediately for demo\n        verified: false,\n      };\n\n      user.providerId = providerId;\n      \n      this.users.set(userId, user);\n      this.serviceProviders.set(providerId, provider);\n\n      const authUser = await this.buildAuthUser(user);\n      return { success: true, user: authUser };\n    } catch (error) {\n      console.error(\"Error upgrading user to provider:\", error);\n      return { success: false, message: \"Erro ao fazer upgrade para prestador\" };\n    }\n  }\n\n  // Authentication operations\n  async login(data: LoginData): Promise<{ success: boolean; user?: AuthUser; message?: string }> {\n    const user = Array.from(this.users.values()).find(u => u.email === data.email);\n    \n    if (!user) {\n      return { success: false, message: \"Email ou senha incorretos\" };\n    }\n\n    const isPasswordValid = await bcrypt.compare(data.password, user.password);\n    if (!isPasswordValid) {\n      return { success: false, message: \"Email ou senha incorretos\" };\n    }\n\n    if (!user.isActive) {\n      return { success: false, message: \"Conta desativada\" };\n    }\n\n    const authUser = await this.buildAuthUser(user);\n    return { success: true, user: authUser };\n  }\n\n  async register(data: RegisterData): Promise<{ success: boolean; user?: AuthUser; message?: string }> {\n    // Check if email already exists\n    const existingUser = Array.from(this.users.values()).find(u => u.email === data.email);\n    if (existingUser) {\n      return { success: false, message: \"Email já está em uso\" };\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n\n    // Create user\n    const userId = randomUUID();\n    const user: SimpleUser = {\n      id: userId,\n      email: data.email,\n      password: hashedPassword,\n      name: data.name,\n      userType: data.userType,\n      isActive: true,\n    };\n\n    this.users.set(userId, user);\n\n    const authUser = await this.buildAuthUser(user);\n    return { success: true, user: authUser };\n  }\n\n  async registerProvider(data: ProviderRegistrationData): Promise<{ success: boolean; user?: AuthUser; message?: string }> {\n    // Check if email already exists\n    const existingUser = Array.from(this.users.values()).find(u => u.email === data.email);\n    if (existingUser) {\n      return { success: false, message: \"Email já está em uso\" };\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n\n    // Create user\n    const userId = randomUUID();\n    const user: SimpleUser = {\n      id: userId,\n      email: data.email,\n      password: hashedPassword,\n      name: data.name,\n      userType: \"provider\",\n      isActive: true,\n    };\n\n    // Create service provider profile\n    const providerId = randomUUID();\n    const provider: ServiceProvider = {\n      id: providerId,\n      userId: userId,\n      name: data.name,\n      speciality: data.speciality,\n      description: data.description,\n      documentType: data.documentType,\n      documentNumber: data.documentNumber,\n      location: data.location,\n      rating: \"0.0\",\n      reviewCount: 0,\n      imageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop\",\n      portfolioImages: [],\n      categories: data.categories,\n      phone: data.phone,\n      email: data.email,\n      planType: data.planType,\n      planActive: false, // Will be activated after payment\n      verified: false,\n    };\n\n    user.providerId = providerId;\n    \n    this.users.set(userId, user);\n    this.serviceProviders.set(providerId, provider);\n\n    const authUser = await this.buildAuthUser(user);\n    return { success: true, user: authUser };\n  }\n\n  async getUserByEmail(email: string): Promise<AuthUser | undefined> {\n    const user = Array.from(this.users.values()).find(u => u.email === email);\n    if (!user) return undefined;\n    return this.buildAuthUser(user);\n  }\n\n  async canCreateProperty(userId: string): Promise<boolean> {\n    const user = this.users.get(userId);\n    if (!user || user.userType !== \"provider\" || !user.providerId) {\n      return false;\n    }\n\n    const provider = this.serviceProviders.get(user.providerId);\n    if (!provider || !provider.planActive) {\n      return false;\n    }\n\n    // Only real estate agencies can create properties\n    return provider.categories.includes(\"imobiliaria\");\n  }\n\n  async createPropertyAsProvider(userId: string, propertyData: CreatePropertyData): Promise<Property | null> {\n    const canCreate = await this.canCreateProperty(userId);\n    if (!canCreate) {\n      return null;\n    }\n\n    const user = this.users.get(userId);\n    const provider = this.serviceProviders.get(user!.providerId!);\n\n    const propertyId = randomUUID();\n    const property: Property = {\n      id: propertyId,\n      title: propertyData.title,\n      description: propertyData.description,\n      price: propertyData.price,\n      priceType: propertyData.priceType,\n      propertyType: propertyData.propertyType,\n      location: propertyData.location,\n      bedrooms: propertyData.bedrooms,\n      bathrooms: propertyData.bathrooms,\n      parkingSpaces: propertyData.parkingSpaces,\n      area: propertyData.area,\n      imageUrl: propertyData.imageUrl,\n      images: propertyData.images,\n      amenities: propertyData.amenities,\n      agencyName: provider!.name,\n      agencyId: provider!.id,\n      agencyLogo: provider!.imageUrl,\n      status: \"available\",\n      featured: false,\n      views: 0,\n      createdBy: userId,\n    };\n\n    this.properties.set(propertyId, property);\n    return property;\n  }\n\n  private calculateCompletionPercentage(user: SimpleUser, provider?: ServiceProvider): number {\n    if (user.userType === 'viewer') {\n      // For viewers: basic profile completion\n      const fields = [\n        user.name,\n        user.email,\n      ];\n      const filledFields = fields.filter(field => field && field.trim().length > 0).length;\n      return Math.round((filledFields / fields.length) * 100);\n    }\n    \n    // For providers: comprehensive profile completion\n    const fields = [\n      user.name,\n      user.email,\n      provider?.speciality,\n      provider?.description,\n      provider?.documentType,\n      provider?.documentNumber,\n      provider?.location,\n      provider?.imageUrl,\n      provider?.phone,\n      provider?.categories?.length ? 'has_categories' : null,\n    ];\n    const filledFields = fields.filter(field => field && (typeof field === 'string' ? field.trim().length > 0 : true)).length;\n    return Math.round((filledFields / fields.length) * 100);\n  }\n\n  private async buildAuthUser(user: SimpleUser): Promise<AuthUser> {\n    const provider = user.providerId ? this.serviceProviders.get(user.providerId) : undefined;\n    \n    const authUser: AuthUser = {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      userType: user.userType,\n      isActive: user.isActive,\n      categories: user.categories || provider?.categories as string[] || [],\n      subcategories: user.subcategories || [],\n      planType: provider?.planType as \"A\" | \"B\" || undefined,\n      providerPlan: provider?.planType as \"A\" | \"B\" || undefined,\n      planStatus: provider?.planActive ? \"active\" : (user.userType === \"provider\" ? \"inactive\" : undefined),\n      isVerified: provider?.verified || false,\n      completionPercentage: this.calculateCompletionPercentage(user, provider),\n      documentsVerified: false,\n      profileImageUrl: user.profileImageUrl || provider?.imageUrl,\n      portfolioImages: user.portfolioImages || provider?.portfolioImages || [],\n      address: user.address,\n      city: user.city,\n      state: user.state,\n      zipCode: user.zipCode,\n      phoneNumber: user.phoneNumber,\n      businessHours: user.businessHours,\n      bio: user.bio,\n      description: user.bio,\n      documentType: user.documentType,\n      documentNumber: user.documentNumber,\n    };\n\n    if (user.userType === \"provider\" && user.providerId) {\n      if (provider) {\n        authUser.provider = {\n          id: provider.id,\n          categories: provider.categories,\n          planType: provider.planType,\n          planActive: provider.planActive,\n          verified: provider.verified,\n        };\n      }\n    }\n\n    return authUser;\n  }\n\n  private async seedTestUsers() {\n    // Create test users for demonstration\n    const testUsers = [\n      {\n        email: \"admin@hive.com\",\n        password: \"123456\",\n        name: \"Admin Teste\",\n        userType: \"viewer\" as const,\n      },\n      {\n        email: \"viewer@test.com\", \n        password: \"123456\",\n        name: \"João Silva\",\n        userType: \"viewer\" as const,\n      },\n      {\n        email: \"eletricista@test.com\",\n        password: \"123456\", \n        name: \"Carlos Elétrico\",\n        userType: \"provider\" as const,\n        categories: [\"eletricista\"],\n        planType: \"A\" as const,\n        planActive: true,\n      },\n      {\n        email: \"imobiliaria@test.com\",\n        password: \"123456\",\n        name: \"Premium Imóveis RJ\",\n        userType: \"provider\" as const,\n        categories: [\"imobiliaria\"],\n        planType: \"B\" as const,\n        planActive: true,\n      }\n    ];\n\n    for (const userData of testUsers) {\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      const userId = randomUUID();\n      \n      const user: SimpleUser = {\n        id: userId,\n        email: userData.email,\n        password: hashedPassword,\n        name: userData.name,\n        userType: userData.userType,\n        isActive: true,\n      };\n\n      if (userData.userType === \"provider\") {\n        const providerId = randomUUID();\n        const provider: ServiceProvider = {\n          id: providerId,\n          userId: userId,\n          name: userData.name,\n          speciality: userData.categories[0] === \"imobiliaria\" ? \"Imóveis de luxo\" : \"Instalações elétricas\",\n          description: userData.categories[0] === \"imobiliaria\" \n            ? \"Imobiliária especializada em imóveis de alto padrão\"\n            : \"Eletricista experiente com mais de 10 anos no mercado\",\n          documentType: userData.planType === \"A\" ? \"CPF\" : \"CNPJ\",\n          documentNumber: userData.planType === \"A\" ? \"12345678901\" : \"12345678000123\",\n          location: \"Rio de Janeiro, RJ\",\n          rating: \"4.8\",\n          reviewCount: 15,\n          imageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop\",\n          portfolioImages: [],\n          categories: userData.categories,\n          phone: \"(21) 99999-9999\",\n          email: userData.email,\n          planType: userData.planType,\n          planActive: userData.planActive,\n          verified: true,\n        };\n\n        user.providerId = providerId;\n        this.serviceProviders.set(providerId, provider);\n      }\n\n      this.users.set(userId, user);\n    }\n\n    console.log(\"✅ Usuários de teste criados:\");\n    console.log(\"📧 admin@hive.com (senha: 123456) - Visualizador Admin\");\n    console.log(\"📧 viewer@test.com (senha: 123456) - Visualizador\");\n    console.log(\"📧 eletricista@test.com (senha: 123456) - Prestador Eletricista (Plano A)\");\n    console.log(\"📧 imobiliaria@test.com (senha: 123456) - Prestador Imobiliária (Plano B)\");\n  }\n\n  async markProviderAsCompletelySetup(userId: string): Promise<AuthUser | null> {\n    const user = this.users.get(userId);\n    if (!user) {\n      return null;\n    }\n\n    // Marcar como completamente configurado\n    // Não há campos completionPercentage e isSetupComplete no SimpleUser\n    this.users.set(userId, user);\n\n    return this.buildAuthUser(user);\n  }\n\n  // Subscription Management\n  private subscriptions: Map<string, any> = new Map();\n  private paymentHistory: Map<string, any> = new Map();\n\n  async createSubscription(userId: string, planType: string, stripeSubscriptionId?: string): Promise<any> {\n    const id = randomUUID();\n    const now = new Date();\n    const endDate = new Date(now);\n    endDate.setDate(endDate.getDate() + 30); // 30 dias de duração\n\n    const cancellationDeadline = new Date(now);\n    cancellationDeadline.setDate(cancellationDeadline.getDate() + 7); // 7 dias para cancelar\n\n    const planNames = { 'A': 'BE HIVE', 'B': 'HIVE GOLD' };\n    const planPrices = { 'A': '29.00', 'B': '59.00' };\n\n    const subscription = {\n      id,\n      userId,\n      planType,\n      planName: planNames[planType as keyof typeof planNames] || 'BE HIVE',\n      stripeSubscriptionId,\n      status: 'active',\n      startDate: now,\n      endDate,\n      cancellationDeadline,\n      price: planPrices[planType as keyof typeof planPrices] || '29.00',\n      autoRenew: true,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    this.subscriptions.set(id, subscription);\n    \n    // Ativar plano do prestador se for provider\n    const user = this.users.get(userId);\n    if (user && user.userType === 'provider' && user.providerId) {\n      const provider = this.serviceProviders.get(user.providerId);\n      if (provider) {\n        provider.planActive = true;\n        provider.planType = planType;\n        this.serviceProviders.set(user.providerId, provider);\n      }\n    }\n\n    return subscription;\n  }\n\n  async getActiveSubscription(userId: string): Promise<any> {\n    return Array.from(this.subscriptions.values())\n      .find(sub => sub.userId === userId && sub.status === 'active');\n  }\n\n  async updateSubscriptionStatus(subscriptionId: string, status: string): Promise<any> {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (subscription) {\n      subscription.status = status;\n      subscription.updatedAt = new Date();\n      \n      // Se cancelado, desativar plano do provider\n      if (status === 'cancelled') {\n        subscription.cancelledAt = new Date();\n        const user = this.users.get(subscription.userId);\n        if (user && user.userType === 'provider' && user.providerId) {\n          const provider = this.serviceProviders.get(user.providerId);\n          if (provider) {\n            provider.planActive = false;\n            this.serviceProviders.set(user.providerId, provider);\n          }\n        }\n      }\n      \n      this.subscriptions.set(subscriptionId, subscription);\n      return subscription;\n    }\n    return null;\n  }\n\n  async cancelSubscription(subscriptionId: string): Promise<boolean> {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (!subscription) return false;\n\n    const now = new Date();\n    const canCancel = now <= new Date(subscription.cancellationDeadline);\n    \n    if (canCancel) {\n      subscription.status = 'cancellation_pending';\n      subscription.cancelledAt = now;\n      subscription.updatedAt = now;\n      this.subscriptions.set(subscriptionId, subscription);\n      return true;\n    }\n    \n    return false;\n  }\n\n  async checkSubscriptionValidity(userId: string): Promise<{ valid: boolean; subscription?: any; canCancel?: boolean }> {\n    const subscription = await this.getActiveSubscription(userId);\n    if (!subscription) {\n      return { valid: false };\n    }\n\n    const now = new Date();\n    const endDate = new Date(subscription.endDate);\n    const cancellationDeadline = new Date(subscription.cancellationDeadline);\n    \n    const valid = now <= endDate && subscription.status === 'active';\n    const canCancel = now <= cancellationDeadline && subscription.status === 'active';\n    \n    return { valid, subscription, canCancel };\n  }\n\n  async checkCancellationEligibility(subscriptionId: string): Promise<{ eligible: boolean; reason?: string }> {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (!subscription) {\n      return { eligible: false, reason: 'Assinatura não encontrada' };\n    }\n\n    if (subscription.status !== 'active') {\n      return { eligible: false, reason: 'Assinatura não está ativa' };\n    }\n\n    const now = new Date();\n    const cancellationDeadline = new Date(subscription.cancellationDeadline);\n    \n    if (now > cancellationDeadline) {\n      return { eligible: false, reason: 'Período de cancelamento de 7 dias já expirou' };\n    }\n\n    return { eligible: true };\n  }\n\n  async createPaymentRecord(paymentData: any): Promise<any> {\n    const id = randomUUID();\n    const payment = {\n      id,\n      subscriptionId: paymentData.subscriptionId,\n      userId: paymentData.userId,\n      amount: paymentData.amount,\n      currency: paymentData.currency || 'BRL',\n      stripePaymentIntentId: paymentData.stripePaymentIntentId,\n      status: paymentData.status || 'succeeded',\n      paymentMethod: paymentData.paymentMethod || 'card',\n      paidAt: paymentData.paidAt || new Date(),\n      createdAt: new Date()\n    };\n\n    this.paymentHistory.set(id, payment);\n    return payment;\n  }\n\n  async getSubscriptionHistory(userId: string): Promise<any[]> {\n    return Array.from(this.subscriptions.values())\n      .filter(sub => sub.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n}\n\n// Usar MemStorage temporariamente para teste\nexport const storage = new MemStorage();\n","size_bytes":80026},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, jsonb, timestamp, index, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n\n\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  priceType: varchar(\"price_type\", { length: 20 }).notNull(), // 'sale', 'rent', 'event'\n  propertyType: varchar(\"property_type\", { length: 50 }).notNull(), // 'apartment', 'house', 'commercial', 'event_hall'\n  location: text(\"location\").notNull(),\n  bedrooms: integer(\"bedrooms\"),\n  bathrooms: integer(\"bathrooms\"),\n  parkingSpaces: integer(\"parking_spaces\"),\n  area: integer(\"area\"), // in m²\n  imageUrl: text(\"image_url\").notNull(),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  amenities: jsonb(\"amenities\").$type<string[]>().default([]),\n  agencyName: text(\"agency_name\").notNull(),\n  agencyId: varchar(\"agency_id\").references(() => serviceProviders.id), // Reference to service provider (real estate agency)\n  agencyLogo: text(\"agency_logo\"),\n  status: varchar(\"status\", { length: 20 }).default(\"available\"), // 'available', 'sold', 'rented'\n  featured: boolean(\"featured\").default(false),\n  views: integer(\"views\").default(0),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\nexport const serviceProviders = pgTable(\"service_providers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  speciality: text(\"speciality\").notNull(),\n  description: text(\"description\"),\n  documentType: varchar(\"document_type\", { length: 10 }).notNull(), // 'CPF', 'CNPJ'\n  documentNumber: text(\"document_number\").notNull(),\n  location: text(\"location\").notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0.0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  imageUrl: text(\"image_url\").notNull(),\n  portfolioImages: jsonb(\"portfolio_images\").$type<string[]>().default([]),\n  categories: jsonb(\"categories\").$type<string[]>().notNull(),\n  planType: varchar(\"plan_type\", { length: 10 }).default(\"A\"), // 'A' or 'B'\n  planActive: boolean(\"plan_active\").default(false),\n  verified: boolean(\"verified\").default(false),\n});\n\nexport const serviceCategories = pgTable(\"service_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(), // Font Awesome class\n  slug: text(\"slug\").notNull().unique(),\n  providerCount: integer(\"provider_count\").default(0),\n  subcategories: text(\"subcategories\").array().default([]),\n  planType: varchar(\"plan_type\", { length: 10 }).notNull().default(\"CPF\"), // CPF ou CNPJ\n});\n\nexport const plans = pgTable(\"plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: varchar(\"type\", { length: 10 }).notNull(), // 'A' or 'B'\n  price: decimal(\"price\", { precision: 8, scale: 2 }).notNull(),\n  features: jsonb(\"features\").$type<string[]>().notNull(),\n  targetAudience: text(\"target_audience\").notNull(), // 'CPF' or 'CNPJ'\n  popular: boolean(\"popular\").default(false),\n});\n\n// Insert schemas\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  views: true,\n});\n\nexport const insertServiceProviderSchema = createInsertSchema(serviceProviders).omit({\n  id: true,\n  rating: true,\n  reviewCount: true,\n});\n\nexport const insertServiceCategorySchema = createInsertSchema(serviceCategories).omit({\n  id: true,\n  providerCount: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n});\n\n// Types\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\n\nexport type ServiceProvider = typeof serviceProviders.$inferSelect;\nexport type InsertServiceProvider = z.infer<typeof insertServiceProviderSchema>;\n\nexport type ServiceCategory = typeof serviceCategories.$inferSelect;\nexport type InsertServiceCategory = z.infer<typeof insertServiceCategorySchema>;\n\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\n\n// User profiles and authentication tables\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  password: text(\"password\"),\n  name: text(\"name\"),\n  userType: varchar(\"user_type\", { length: 20 }).default(\"viewer\"), // 'viewer', 'provider'\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  documentType: varchar(\"document_type\", { length: 4 }).notNull(), // 'CPF' or 'CNPJ'\n  documentNumber: varchar(\"document_number\").unique().notNull(),\n  \n  // Dados pessoais/empresariais básicos\n  displayName: text(\"display_name\").notNull(),\n  bio: text(\"bio\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  zipCode: varchar(\"zip_code\"),\n  \n  // Dados específicos para CNPJ\n  companyName: text(\"company_name\"), // Para CNPJ\n  tradeName: text(\"trade_name\"), // Para CNPJ\n  foundedYear: integer(\"founded_year\"), // Para CNPJ\n  employeeCount: integer(\"employee_count\"), // Para CNPJ\n  companyDescription: text(\"company_description\"), // Para CNPJ\n  website: varchar(\"website\"), // Para CNPJ\n  \n  // Dados profissionais\n  profession: varchar(\"profession\"),\n  specialties: jsonb(\"specialties\").$type<string[]>().default([]),\n  services: jsonb(\"services\").$type<string[]>().default([]),\n  serviceAreas: jsonb(\"service_areas\").$type<string[]>().default([]),\n  \n  // Portfolio e mídia\n  profileImage: text(\"profile_image\"),\n  coverImage: text(\"cover_image\"),\n  portfolioImages: jsonb(\"portfolio_images\").$type<string[]>().default([]),\n  portfolioVideos: jsonb(\"portfolio_videos\").$type<string[]>().default([]),\n  \n  // Redes sociais\n  socialLinks: jsonb(\"social_links\").$type<{\n    instagram?: string;\n    facebook?: string;\n    linkedin?: string;\n    whatsapp?: string;\n    website?: string;\n  }>().default({}),\n  \n  // Avaliações e estatísticas\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0.0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  completedJobs: integer(\"completed_jobs\").default(0),\n  responseTime: integer(\"response_time\").default(0), // em minutos\n  \n  // Status e verificações\n  verified: boolean(\"verified\").default(false),\n  available: boolean(\"available\").default(true),\n  planType: varchar(\"plan_type\", { length: 1 }).default(\"A\"), // 'A' ou 'B'\n  \n  // Dados técnicos\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  lastActive: timestamp(\"last_active\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  profileId: varchar(\"profile_id\").notNull(),\n  reviewerId: varchar(\"reviewer_id\").notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  serviceType: varchar(\"service_type\"),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull(),\n  senderId: varchar(\"sender_id\").notNull(),\n  receiverId: varchar(\"receiver_id\").notNull(),\n  message: text(\"message\").notNull(),\n  messageType: varchar(\"message_type\", { length: 20 }).default(\"text\"), // 'text', 'image', 'file'\n  attachments: jsonb(\"attachments\").$type<string[]>().default([]),\n  read: boolean(\"read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participantIds: jsonb(\"participant_ids\").$type<string[]>().notNull(),\n  lastMessage: text(\"last_message\"),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subscription tables\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planType: varchar(\"plan_type\", { length: 1 }).notNull(), // 'A' ou 'B'\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // 'active', 'cancelled', 'expired'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  cancelledAt: timestamp(\"cancelled_at\"),\n  canCancel: boolean(\"can_cancel\").default(true),\n});\n\nexport const paymentHistory = pgTable(\"payment_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  subscriptionId: varchar(\"subscription_id\").references(() => subscriptions.id),\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default(\"BRL\"),\n  status: varchar(\"status\", { length: 20 }).notNull(),\n  planType: varchar(\"plan_type\", { length: 1 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const userProfilesRelations = relations(userProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [userProfiles.userId],\n    references: [users.id],\n  }),\n  reviews: many(reviews),\n}));\n\n\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  profile: one(userProfiles, {\n    fields: [reviews.profileId],\n    references: [userProfiles.id],\n  }),\n  reviewer: one(userProfiles, {\n    fields: [reviews.reviewerId],\n    references: [userProfiles.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  sender: one(userProfiles, {\n    fields: [chatMessages.senderId],\n    references: [userProfiles.id],\n  }),\n  receiver: one(userProfiles, {\n    fields: [chatMessages.receiverId],\n    references: [userProfiles.id],\n  }),\n  conversation: one(conversations, {\n    fields: [chatMessages.conversationId],\n    references: [conversations.id],\n  }),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ many }) => ({\n  messages: many(chatMessages),\n}));\n\n// Tabela de notificações\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: varchar(\"type\").notNull(), // message, booking, review\n  title: varchar(\"title\").notNull(),\n  content: varchar(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  relatedId: varchar(\"related_id\"), // conversation_id, booking_id, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const subscriptionsRelations = relations(subscriptions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [subscriptions.userId],\n    references: [users.id],\n  }),\n  paymentHistory: many(paymentHistory),\n}));\n\nexport const paymentHistoryRelations = relations(paymentHistory, ({ one }) => ({\n  subscription: one(subscriptions, {\n    fields: [paymentHistory.subscriptionId],\n    references: [subscriptions.id],\n  }),\n  user: one(users, {\n    fields: [paymentHistory.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentHistorySchema = createInsertSchema(paymentHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\nexport type PaymentHistory = typeof paymentHistory.$inferSelect;\nexport type InsertPaymentHistory = z.infer<typeof insertPaymentHistorySchema>;\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  rating: true,\n  reviewCount: true,\n  completedJobs: true,\n  createdAt: true,\n  updatedAt: true,\n  lastActive: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastMessageAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n","size_bytes":14502},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ChatProvider } from \"@/context/ChatContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"./pages/home\";\nimport Properties from \"./pages/properties\";\nimport Services from \"./pages/services\";\nimport Plans from \"./pages/plans\";\nimport ProfilePage from \"./pages/profile\";\nimport ChatPage from \"./pages/chat\";\nimport PropertyDetail from \"./pages/property-detail\";\nimport AuthPage from \"./pages/auth\";\nimport Dashboard from \"./pages/dashboard\";\nimport UpgradeToProvider from \"./pages/upgrade-to-provider\";\nimport AuthTest from \"./pages/auth-test\";\nimport LoginGuide from \"./pages/login-guide\";\nimport Checkout from \"./pages/checkout\";\nimport SelectCategories from \"./pages/select-categories\";\nimport SubscriptionDashboard from \"./pages/subscription-dashboard\";\nimport Navigation from \"./components/navigation\";\nimport Footer from \"./components/footer\";\nimport ChatManager from \"./components/chat/ChatManager\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/properties\" component={Properties} />\n      <Route path=\"/property/:id\" component={PropertyDetail} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/services/:category\" component={Services} />\n      <Route path=\"/profile/:profileId\" component={ProfilePage} />\n      <Route path=\"/profile\" component={ProfilePage} />\n      <Route path=\"/plans\" component={Plans} />\n      <Route path=\"/chat\" component={ChatPage} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/upgrade-to-provider\" component={UpgradeToProvider} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/select-categories\" component={SelectCategories} />\n      <Route path=\"/subscription\" component={SubscriptionDashboard} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/login\" component={AuthPage} />\n      <Route path=\"/register\" component={AuthPage} />\n      <Route path=\"/register-provider\" component={AuthPage} />\n      <Route path=\"/auth-test\" component={AuthTest} />\n      <Route path=\"/login-guide\" component={LoginGuide} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ChatProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-white font-inter\">\n            <Navigation />\n            <main>\n              <Router />\n            </main>\n            <Footer />\n            <ChatManager />\n            <Toaster />\n          </div>\n        </TooltipProvider>\n      </ChatProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2924},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Hive Custom Colors */\n  --hive-gold: hsl(42, 84%, 61%);\n  --hive-gold-dark: hsl(42, 77%, 55%);\n  --hive-black: hsl(0, 0%, 10%);\n  --hive-gray: hsl(240, 9%, 97%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n  /* Hive Custom Colors for Dark Mode */\n  --hive-gold: hsl(42, 84%, 61%);\n  --hive-gold-dark: hsl(42, 77%, 55%);\n  --hive-black: hsl(0, 0%, 90%);\n  --hive-gray: hsl(240, 9%, 8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .hive-gold {\n    color: var(--hive-gold);\n  }\n\n  .bg-hive-gold {\n    background-color: var(--hive-gold);\n  }\n\n  .hover\\:bg-hive-gold-dark:hover {\n    background-color: var(--hive-gold-dark);\n  }\n\n  .text-hive-black {\n    color: var(--hive-black);\n  }\n\n  .bg-hive-black {\n    background-color: var(--hive-black);\n  }\n\n  .bg-hive-gray {\n    background-color: var(--hive-gray);\n  }\n\n  .border-hive-gold {\n    border-color: var(--hive-gold);\n  }\n\n  .ring-hive-gold {\n    --tw-ring-color: var(--hive-gold);\n  }\n\n  .focus\\:ring-hive-gold:focus {\n    --tw-ring-color: var(--hive-gold);\n  }\n}\n","size_bytes":6307},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-widget.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport logoPath from \"@assets/logo hive_1754700716189.png\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: 'user' | 'bot';\n  timestamp: Date;\n}\n\nexport default function ChatWidget() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: 'Olá! 👋 Como posso ajudá-lo hoje? Estou aqui para tirar dúvidas sobre imóveis e serviços.',\n      sender: 'bot',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (currentMessage.trim()) {\n      const userMessage: Message = {\n        id: Date.now().toString(),\n        text: currentMessage,\n        sender: 'user',\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, userMessage]);\n      setCurrentMessage('');\n      setIsTyping(true);\n\n      // Simular resposta do bot\n      setTimeout(() => {\n        const botResponse = generateBotResponse(currentMessage);\n        const botMessage: Message = {\n          id: (Date.now() + 1).toString(),\n          text: botResponse,\n          sender: 'bot',\n          timestamp: new Date()\n        };\n        \n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n      }, 1500);\n    }\n  };\n\n  const generateBotResponse = (userMessage: string): string => {\n    const message = userMessage.toLowerCase();\n    \n    if (message.includes('preço') || message.includes('valor') || message.includes('custo')) {\n      return 'Os preços variam conforme localização e características do imóvel. Você pode filtrar por faixa de preço na página de propriedades. Precisa de ajuda com algum imóvel específico?';\n    } else if (message.includes('localização') || message.includes('bairro') || message.includes('região')) {\n      return 'Temos imóveis em várias regiões do Rio de Janeiro: Copacabana, Ipanema, Barra da Tijuca e Centro. Use o mapa interativo para ver as comodidades próximas a cada propriedade!';\n    } else if (message.includes('serviço') || message.includes('profissional') || message.includes('prestador')) {\n      return 'Oferecemos diversos serviços: encanadores, eletricistas, pintores, limpeza e muito mais. Todos os profissionais são avaliados e verificados. Qual tipo de serviço você precisa?';\n    } else if (message.includes('plano') || message.includes('assinatura') || message.includes('cadastro')) {\n      return 'Temos 2 planos: Plano A (R$ 49/mês) para autônomos e Plano B (R$ 149/mês) para empresas. Quer saber mais detalhes sobre os benefícios?';\n    } else if (message.includes('mapa') || message.includes('próximo') || message.includes('perto')) {\n      return 'Use nosso mapa interativo na página de propriedades! Você pode ver hospitais, escolas, supermercados e outros locais importantes próximos a cada imóvel.';\n    } else if (message.includes('obrigad') || message.includes('valeu') || message.includes('ok')) {\n      return 'De nada! Estou sempre aqui para ajudar. Se tiver mais dúvidas sobre imóveis ou serviços, é só perguntar! 😊';\n    } else {\n      return 'Entendi! Para melhor ajudá-lo, você pode me perguntar sobre preços, localizações, serviços disponíveis, planos de assinatura ou usar o mapa interativo. Como posso ser mais específico?';\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Chat Button */}\n      {!isOpen && (\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"w-16 h-16 rounded-full bg-hive-gold hover:bg-hive-gold-dark text-white shadow-lg transition-all duration-300 transform hover:scale-110\"\n        >\n          <i className=\"fas fa-comments text-xl\"></i>\n        </Button>\n      )}\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div className=\"w-80 h-96 bg-white rounded-lg shadow-2xl border flex flex-col\">\n          {/* Header */}\n          <div className=\"bg-hive-gold text-white p-4 rounded-t-lg flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center p-1\">\n                <img \n                  src={logoPath}\n                  alt=\"Hive Logo\" \n                  className=\"w-full h-full object-contain\"\n                />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-sm\">Assistente Hive</h3>\n                <p className=\"text-xs opacity-80\">Online agora</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => setIsOpen(false)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white hover:bg-opacity-20 p-1\"\n            >\n              <i className=\"fas fa-times\"></i>\n            </Button>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 p-4 overflow-y-auto space-y-3\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-xs px-3 py-2 rounded-lg ${\n                    message.sender === 'user'\n                      ? 'bg-hive-gold text-white'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.text}</p>\n                  <p className={`text-xs mt-1 ${\n                    message.sender === 'user' ? 'text-white opacity-70' : 'text-gray-500'\n                  }`}>\n                    {formatTime(message.timestamp)}\n                  </p>\n                </div>\n              </div>\n            ))}\n            \n            {isTyping && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gray-100 text-gray-800 px-3 py-2 rounded-lg\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Input */}\n          <div className=\"p-4 border-t\">\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                value={currentMessage}\n                onChange={(e) => setCurrentMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Digite sua mensagem...\"\n                className=\"flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold focus:border-transparent text-sm\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!currentMessage.trim()}\n                className=\"bg-hive-gold hover:bg-hive-gold-dark text-white px-3\"\n              >\n                <i className=\"fas fa-paper-plane\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8115},"client/src/components/footer.tsx":{"content":"import logoPath from \"@assets/logo hive_1754700716189.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-hive-black text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <img \n                src={logoPath}\n                alt=\"Hive Company Logo\" \n                className=\"h-10 w-auto\"\n              />\n            </div>\n            <p className=\"text-gray-300 mb-4\">\n              Conectando imóveis a quem realmente precisa. A plataforma completa para encontrar imóveis e serviços especializados.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">\n                <i className=\"fab fa-facebook text-xl\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">\n                <i className=\"fab fa-instagram text-xl\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">\n                <i className=\"fab fa-twitter text-xl\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">\n                <i className=\"fab fa-linkedin text-xl\"></i>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Imóveis</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Casas</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Apartamentos</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Comerciais</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Salões de Festa</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Serviços</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Encanador</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Eletricista</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Pintor</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Limpeza</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Suporte</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Central de Ajuda</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Contato</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Termos de Uso</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-hive-gold transition-colors duration-300\">Privacidade</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-700 pt-8 text-center\">\n          <p className=\"text-gray-300\">© Hive 2025 - Todos os direitos reservados</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3834},"client/src/components/hero-section.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport logoPath from \"@assets/logo hive_1754700716189.png\";\nimport hiveBackground from \"@assets/hero-hive-background.svg\";\n\nexport default function HeroSection() {\n  const [location, setLocation] = useState(\"\");\n  const [propertyType, setPropertyType] = useState(\"\");\n  const [priceRange, setPriceRange] = useState(\"\");\n\n  const handleSearch = () => {\n    console.log(\"Busca:\", { location, propertyType, priceRange });\n    alert(\"Funcionalidade de busca será implementada em breve!\");\n  };\n\n  return (\n    <section className=\"relative py-20 lg:py-32\" style={{\n        backgroundImage: `url(${hiveBackground})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}>\n      <div className=\"absolute inset-0 bg-gradient-to-br from-hive-gold/10 to-transparent\"></div>\n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <div className=\"flex flex-col items-center mb-8\">\n          <img \n            src={logoPath}\n            alt=\"Hive Company Logo\" \n            className=\"h-16 w-auto mb-4 opacity-90\"\n          />\n          <h1 className=\"text-4xl md:text-6xl font-bold text-hive-black mb-6 leading-tight\">\n            Conectando imóveis a<br />quem realmente precisa\n          </h1>\n          <p className=\"text-xl text-gray-700 max-w-2xl mx-auto\">\n            A plataforma completa para encontrar imóveis e serviços especializados em um só lugar\n          </p>\n        </div>\n        \n        <div className=\"bg-white p-6 rounded-2xl shadow-xl max-w-4xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <i className=\"fas fa-map-marker-alt absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"Onde você está?\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold focus:border-transparent\"\n              />\n            </div>\n            \n            <div className=\"relative\">\n              <i className=\"fas fa-home absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\"></i>\n              <Select value={propertyType} onValueChange={setPropertyType}>\n                <SelectTrigger className=\"w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold focus:border-transparent\">\n                  <SelectValue placeholder=\"Tipo de imóvel\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"house\">Casa</SelectItem>\n                  <SelectItem value=\"apartment\">Apartamento</SelectItem>\n                  <SelectItem value=\"commercial\">Sala comercial</SelectItem>\n                  <SelectItem value=\"event_hall\">Salão de festas</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"relative\">\n              <i className=\"fas fa-dollar-sign absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\"></i>\n              <Select value={priceRange} onValueChange={setPriceRange}>\n                <SelectTrigger className=\"w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold focus:border-transparent\">\n                  <SelectValue placeholder=\"Faixa de preço\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"0-500000\">Até R$ 500.000</SelectItem>\n                  <SelectItem value=\"500000-1000000\">R$ 500.000 - R$ 1.000.000</SelectItem>\n                  <SelectItem value=\"1000000+\">R$ 1.000.000+</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              onClick={handleSearch}\n              className=\"bg-hive-gold hover:bg-hive-gold-dark text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300\"\n            >\n              <i className=\"fas fa-search mr-2\"></i>\n              Buscar\n            </Button>\n          </div>\n        </div>\n        \n        {/* Development/Test Helper */}\n        <div className=\"pt-8\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"border-hive-gold text-hive-gold hover:bg-hive-gold hover:text-black\"\n            asChild\n          >\n            <Link href=\"/login-guide\">\n              🧪 Usuários de Teste - Clique aqui para fazer login\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5032},"client/src/components/map-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { type Property } from \"@shared/schema\";\n\n// Declarar tipos Google Maps\ndeclare global {\n  interface Window {\n    google: any;\n    initMap: () => void;\n    GOOGLE_MAPS_API_KEY: string;\n  }\n}\n\ninterface MapSearchProps {\n  properties: Property[];\n  onPropertySelect: (property: Property) => void;\n  className?: string;\n  onLocationSearch?: (location: string, coordinates: [number, number]) => void;\n}\n\ninterface Location {\n  id: string;\n  name: string;\n  type: string;\n  distance: string;\n  coordinates: [number, number];\n}\n\nexport default function MapSearch({ properties, onPropertySelect, className = \"\", onLocationSearch }: MapSearchProps) {\n  const [selectedProperty, setSelectedProperty] = useState<Property | null>(null);\n  const [mapCenter, setMapCenter] = useState<[number, number]>([-22.9068, -43.1729]); // Rio de Janeiro\n  const [nearbyPlaces, setNearbyPlaces] = useState<Location[]>([]);\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [clickedLocation, setClickedLocation] = useState<[number, number] | null>(null);\n  const [nearbyProperties, setNearbyProperties] = useState<Property[]>([]);\n  const mapRef = useRef<HTMLDivElement>(null);\n  const googleMapRef = useRef<any>(null);\n\n  // Carregar Google Maps API\n  useEffect(() => {\n    const loadGoogleMaps = async () => {\n      // Verificar se já está carregado\n      if (window.google && window.google.maps) {\n        console.log('Google Maps já carregado');\n        setIsGoogleMapsLoaded(true);\n        return;\n      }\n\n      // Verificar se já existe um script carregando\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript) {\n        console.log('Script do Google Maps já existe, aguardando carregamento...');\n        // Aguardar carregamento do script existente\n        const checkInterval = setInterval(() => {\n          if (window.google && window.google.maps) {\n            console.log('Google Maps carregado via script existente');\n            setIsGoogleMapsLoaded(true);\n            clearInterval(checkInterval);\n          }\n        }, 100);\n        \n        // Timeout após 10 segundos\n        setTimeout(() => {\n          clearInterval(checkInterval);\n          if (!window.google || !window.google.maps) {\n            console.log('Timeout no carregamento do Google Maps, usando fallback');\n            setIsGoogleMapsLoaded(false);\n          }\n        }, 10000);\n        return;\n      }\n\n      try {\n        // Remover qualquer callback anterior\n        delete window.initMap;\n        \n        // Criar callback único\n        const callbackName = `initGoogleMaps_${Date.now()}`;\n        window[callbackName] = () => {\n          console.log('Google Maps carregado com sucesso!');\n          setIsGoogleMapsLoaded(true);\n          delete window[callbackName];\n        };\n\n        // Obter a chave da API do servidor\n        let apiKey = '';\n        try {\n          const response = await fetch('/api/config/maps-key');\n          if (response.ok) {\n            apiKey = await response.text();\n            console.log('Chave da API obtida do servidor:', apiKey ? 'OK' : 'VAZIA');\n          } else {\n            throw new Error('API key not available from server');\n          }\n        } catch (error) {\n          console.log('Usando chave de fallback para desenvolvimento');\n          apiKey = 'AIzaSyCkUOdZ5y7hMm0yrcCQoCvLwzdM6M8s5qk';\n        }\n        \n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=${callbackName}`;\n        script.async = true;\n        script.defer = true;\n        \n        script.onerror = (error) => {\n          console.error('Erro ao carregar Google Maps API:', error);\n          setIsGoogleMapsLoaded(false);\n          delete window[callbackName];\n        };\n        \n        console.log('Carregando Google Maps API...');\n        document.head.appendChild(script);\n        \n        // Timeout de segurança\n        setTimeout(() => {\n          if (!window.google || !window.google.maps) {\n            console.error('Timeout ao carregar Google Maps API');\n            setIsGoogleMapsLoaded(false);\n            delete window[callbackName];\n          }\n        }, 15000);\n        \n      } catch (error) {\n        console.error('Erro ao inicializar Google Maps:', error);\n        setIsGoogleMapsLoaded(false);\n      }\n    };\n\n    loadGoogleMaps();\n  }, []);\n\n  // Buscar localizações usando Google Places API\n  const searchLocation = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    \n    if (window.google && window.google.maps) {\n      const service = new window.google.maps.places.AutocompleteService();\n      \n      try {\n        service.getPlacePredictions(\n          {\n            input: query,\n            componentRestrictions: { country: 'BR' },\n            types: ['geocode']\n          },\n          (predictions: any, status: any) => {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n              const results = predictions.map((prediction: any) => ({\n                name: prediction.description,\n                placeId: prediction.place_id,\n                coords: null // Será obtido no geocoding\n              }));\n              setSearchResults(results);\n            } else {\n              console.warn('Erro na busca de locais:', status);\n              setSearchResults([]);\n            }\n            setIsSearching(false);\n          }\n        );\n      } catch (error) {\n        console.error('Erro ao buscar locais:', error);\n        setIsSearching(false);\n      }\n    } else {\n      // Fallback se Google Maps não estiver disponível\n      const mockResults = [\n        { name: `${query} - Centro, Rio de Janeiro`, coords: [-22.9035, -43.2096] },\n        { name: `${query} - Copacabana, Rio de Janeiro`, coords: [-22.9711, -43.1822] },\n        { name: `${query} - Ipanema, Rio de Janeiro`, coords: [-22.9838, -43.2056] },\n        { name: `${query} - Barra da Tijuca, Rio de Janeiro`, coords: [-23.0175, -43.3212] }\n      ];\n      \n      setTimeout(() => {\n        setSearchResults(mockResults);\n        setIsSearching(false);\n      }, 500);\n    }\n  };\n\n  // Buscar propriedades próximas a um ponto clicado\n  const findNearbyProperties = (coords: [number, number]) => {\n    const nearby = properties.filter(property => {\n      const propCoords = getPropertyCoords(property);\n      const distance = Math.sqrt(\n        Math.pow(propCoords[0] - coords[0], 2) + Math.pow(propCoords[1] - coords[1], 2)\n      );\n      return distance < 0.05; // Raio aproximado\n    });\n    setNearbyProperties(nearby);\n  };\n\n  // Handle map click\n  const handleMapClick = (event: any) => {\n    if (isGoogleMapsLoaded && event.latLng) {\n      // Para Google Maps real\n      const coords: [number, number] = [event.latLng.lat(), event.latLng.lng()];\n      setClickedLocation(coords);\n      findNearbyProperties(coords);\n      setSelectedProperty(null);\n    } else {\n      // Para mapa customizado (fallback)\n      const rect = event.currentTarget.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      const coords: [number, number] = [\n        mapCenter[0] + (y - rect.height/2) / rect.height * 0.05,\n        mapCenter[1] + (x - rect.width/2) / rect.width * 0.05\n      ];\n      \n      setClickedLocation(coords);\n      findNearbyProperties(coords);\n      setSelectedProperty(null);\n    }\n  };\n\n  // Handle search input\n  const handleSearchChange = (value: string) => {\n    setSearchQuery(value);\n    searchLocation(value);\n  };\n\n  // Handle search result selection\n  const handleSearchSelect = async (result: any) => {\n    setSearchQuery(result.name);\n    setSearchResults([]);\n    \n    if (window.google && window.google.maps && result.placeId) {\n      const geocoder = new window.google.maps.Geocoder();\n      \n      geocoder.geocode(\n        { placeId: result.placeId },\n        (results: any, status: any) => {\n          if (status === 'OK' && results && results[0]) {\n            const location = results[0].geometry.location;\n            const coords: [number, number] = [location.lat(), location.lng()];\n            \n            setMapCenter(coords);\n            setClickedLocation(coords);\n            findNearbyProperties(coords);\n            onLocationSearch?.(result.name, coords);\n            \n            // Atualizar mapa Google se disponível\n            if (googleMapRef.current) {\n              googleMapRef.current.setCenter({ lat: coords[0], lng: coords[1] });\n              googleMapRef.current.setZoom(15);\n            }\n          }\n        }\n      );\n    } else if (result.coords) {\n      // Fallback para coordenadas já conhecidas\n      setMapCenter(result.coords);\n      setClickedLocation(result.coords);\n      findNearbyProperties(result.coords);\n      onLocationSearch?.(result.name, result.coords);\n    }\n  };\n\n  const getPropertyCoords = (property: Property): [number, number] => {\n    // Coordenadas baseadas na localização\n    if (property.location.includes(\"Copacabana\")) return [-22.9711, -43.1822];\n    if (property.location.includes(\"Ipanema\")) return [-22.9838, -43.2056];\n    if (property.location.includes(\"Barra\")) return [-23.0175, -43.3212];\n    if (property.location.includes(\"Centro\")) return [-22.9035, -43.2096];\n    return [-22.9068, -43.1729];\n  };\n\n  // Simulando locais próximos baseado na propriedade selecionada\n  const generateNearbyPlaces = (property: Property): Location[] => {\n    const places = [\n      { type: \"hospital\", name: \"Hospital São Lucas\", distance: \"800m\" },\n      { type: \"school\", name: \"Colégio Pedro II\", distance: \"1.2km\" },\n      { type: \"supermarket\", name: \"Extra Supermercado\", distance: \"500m\" },\n      { type: \"pharmacy\", name: \"Farmácia Pacheco\", distance: \"300m\" },\n      { type: \"bank\", name: \"Banco do Brasil\", distance: \"600m\" },\n      { type: \"restaurant\", name: \"Restaurante Dois Irmãos\", distance: \"400m\" },\n      { type: \"gym\", name: \"Academia Smart Fit\", distance: \"900m\" },\n      { type: \"park\", name: \"Parque Lage\", distance: \"1.5km\" }\n    ];\n\n    return places.map((place, index) => ({\n      id: `${property.id}-${index}`,\n      ...place,\n      coordinates: [\n        mapCenter[0] + (Math.random() - 0.5) * 0.01,\n        mapCenter[1] + (Math.random() - 0.5) * 0.01\n      ] as [number, number]\n    }));\n  };\n\n  // Inicializar mapa Google quando disponível\n  useEffect(() => {\n    if (isGoogleMapsLoaded && mapRef.current && !googleMapRef.current) {\n      googleMapRef.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: mapCenter[0], lng: mapCenter[1] },\n        zoom: 13,\n        styles: [\n          {\n            featureType: \"poi\",\n            elementType: \"labels.icon\",\n            stylers: [{ visibility: \"off\" }]\n          }\n        ]\n      });\n\n      // Adicionar listener para cliques no mapa\n      googleMapRef.current.addListener('click', handleMapClick);\n\n      // Adicionar marcadores das propriedades\n      properties.forEach((property) => {\n        const coords = getPropertyCoords(property);\n        const marker = new window.google.maps.Marker({\n          position: { lat: coords[0], lng: coords[1] },\n          map: googleMapRef.current,\n          title: property.title,\n          icon: {\n            url: 'data:image/svg+xml;base64,' + btoa(`\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"32\" height=\"32\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"#D4AF37\" stroke=\"#fff\" stroke-width=\"2\"/>\n                <path d=\"M12 6l2 6h6l-5 4 2 6-5-4-5 4 2-6-5-4h6z\" fill=\"#fff\"/>\n              </svg>\n            `),\n            scaledSize: new window.google.maps.Size(32, 32)\n          }\n        });\n\n        // Adicionar listener para clique no marcador\n        marker.addListener('click', () => handlePropertyClick(property));\n      });\n    }\n  }, [isGoogleMapsLoaded, properties, mapCenter]);\n\n  const handlePropertyClick = (property: Property) => {\n    setSelectedProperty(property);\n    onPropertySelect(property);\n    \n    const coords = getPropertyCoords(property);\n    setMapCenter(coords);\n    setNearbyPlaces(generateNearbyPlaces(property));\n    \n    // Atualizar mapa Google se disponível\n    if (googleMapRef.current) {\n      googleMapRef.current.setCenter({ lat: coords[0], lng: coords[1] });\n      googleMapRef.current.setZoom(16);\n    }\n  };\n\n  const getPlaceIcon = (type: string) => {\n    const icons: { [key: string]: string } = {\n      hospital: \"fas fa-hospital\",\n      school: \"fas fa-school\",\n      supermarket: \"fas fa-shopping-cart\",\n      pharmacy: \"fas fa-pills\",\n      bank: \"fas fa-university\",\n      restaurant: \"fas fa-utensils\",\n      gym: \"fas fa-dumbbell\",\n      park: \"fas fa-tree\"\n    };\n    return icons[type] || \"fas fa-map-marker-alt\";\n  };\n\n  const getPlaceColor = (type: string) => {\n    const colors: { [key: string]: string } = {\n      hospital: \"bg-red-100 text-red-800\",\n      school: \"bg-blue-100 text-blue-800\", \n      supermarket: \"bg-green-100 text-green-800\",\n      pharmacy: \"bg-purple-100 text-purple-800\",\n      bank: \"bg-yellow-100 text-yellow-800\",\n      restaurant: \"bg-orange-100 text-orange-800\",\n      gym: \"bg-gray-100 text-gray-800\",\n      park: \"bg-emerald-100 text-emerald-800\"\n    };\n    return colors[type] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className={`bg-white rounded-xl shadow-lg overflow-hidden ${className}`}>\n      {/* Campo de Busca */}\n      <div className=\"p-4 border-b bg-gray-50\">\n        <div className=\"relative\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative flex-1\">\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => handleSearchChange(e.target.value)}\n                placeholder=\"Buscar localização (ex: Copacabana, Centro, Ipanema...)\"\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold focus:border-transparent\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n              {isSearching && (\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                  <div className=\"w-4 h-4 border-2 border-hive-gold border-t-transparent rounded-full animate-spin\"></div>\n                </div>\n              )}\n            </div>\n            <Button\n              onClick={() => handleSearchChange(searchQuery)}\n              className=\"bg-hive-gold hover:bg-hive-gold-dark text-white\"\n              disabled={isSearching}\n            >\n              <i className=\"fas fa-search\"></i>\n            </Button>\n          </div>\n          \n          {/* Resultados da busca */}\n          {searchResults.length > 0 && (\n            <div className=\"absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg mt-1 shadow-lg z-50 max-h-60 overflow-y-auto\">\n              {searchResults.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0\"\n                  onClick={() => handleSearchSelect(result)}\n                >\n                  <i className=\"fas fa-map-marker-alt text-hive-gold mr-3\"></i>\n                  <span className=\"text-sm text-gray-700\">{result.name}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex flex-col lg:flex-row\">\n        {/* Mapa */}\n        <div className=\"flex-1 relative\">\n          <div className=\"h-96 relative overflow-hidden\">\n            {isGoogleMapsLoaded ? (\n              <div ref={mapRef} className=\"w-full h-full\" />\n            ) : (\n              <div \n                className=\"bg-gradient-to-br from-blue-50 to-green-50 h-full flex items-center justify-center relative overflow-hidden cursor-pointer\"\n                onClick={handleMapClick}\n              >\n            {/* Simulação de mapa com grid */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 to-green-50\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: `\n                  linear-gradient(to right, rgba(0,0,0,0.1) 1px, transparent 1px),\n                  linear-gradient(to bottom, rgba(0,0,0,0.1) 1px, transparent 1px)\n                `,\n                backgroundSize: '20px 20px'\n              }}></div>\n            </div>\n            \n            {/* Marcadores das propriedades */}\n            {properties.slice(0, 4).map((property, index) => (\n              <div\n                key={property.id}\n                className={`absolute cursor-pointer transform transition-all duration-300 hover:scale-110 z-10 ${\n                  selectedProperty?.id === property.id ? 'scale-125' : ''\n                }`}\n                style={{\n                  left: `${20 + index * 20}%`,\n                  top: `${30 + index * 15}%`\n                }}\n                onClick={() => handlePropertyClick(property)}\n              >\n                <div className={`bg-hive-gold text-white p-2 rounded-full shadow-lg border-2 border-white ${\n                  selectedProperty?.id === property.id ? 'ring-2 ring-hive-gold' : ''\n                }`}>\n                  <i className=\"fas fa-home text-lg\"></i>\n                </div>\n                <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2 bg-white p-1 rounded shadow-md text-xs whitespace-nowrap\">\n                  R$ {new Intl.NumberFormat('pt-BR').format(parseFloat(property.price))}\n                </div>\n              </div>\n            ))}\n\n            {/* Marcadores dos locais próximos */}\n            {nearbyPlaces.map((place, index) => (\n              <div\n                key={place.id}\n                className=\"absolute transform transition-all duration-500 animate-pulse z-5\"\n                style={{\n                  left: `${30 + index * 10}%`,\n                  top: `${40 + index * 8}%`\n                }}\n              >\n                <div className=\"bg-white text-gray-600 p-1 rounded-full shadow-md border\">\n                  <i className={`${getPlaceIcon(place.type)} text-sm`}></i>\n                </div>\n              </div>\n            ))}\n\n            {/* Marcador do local clicado/buscado */}\n            {clickedLocation && (\n              <div\n                className=\"absolute transform -translate-x-1/2 -translate-y-1/2 z-20\"\n                style={{\n                  left: '50%',\n                  top: '50%'\n                }}\n              >\n                <div className=\"bg-red-500 text-white p-2 rounded-full shadow-lg animate-bounce\">\n                  <i className=\"fas fa-map-pin text-lg\"></i>\n                </div>\n                <div className=\"absolute top-12 left-1/2 transform -translate-x-1/2 bg-white p-2 rounded shadow-md text-xs whitespace-nowrap\">\n                  Local selecionado\n                </div>\n              </div>\n            )}\n\n            <div className=\"absolute bottom-4 left-4 bg-white p-2 rounded shadow-md text-xs\">\n              <i className=\"fas fa-map-marker-alt text-hive-gold mr-1\"></i>\n              {searchQuery || \"Rio de Janeiro, RJ\"}\n            </div>\n            \n              {/* Indicações de interação */}\n              <div className=\"absolute top-4 right-4 bg-white p-2 rounded shadow-md text-xs max-w-xs\">\n                <div className=\"flex items-center mb-1\">\n                  <i className=\"fas fa-info-circle text-blue-500 mr-1\"></i>\n                  <span>Clique no mapa para encontrar propriedades próximas</span>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Use a busca acima para navegar para qualquer local\n                </div>\n              </div>\n            </div>\n            )}\n          </div>\n        </div>\n\n        {/* Painel lateral com informações */}\n        <div className=\"w-full lg:w-80 bg-gray-50 p-4\">\n          <h3 className=\"font-bold text-lg mb-4\">\n            {selectedProperty ? 'Locais Próximos' : clickedLocation ? 'Área Selecionada' : 'Buscar ou Clicar no Mapa'}\n          </h3>\n          \n          {selectedProperty ? (\n            <>\n              <div className=\"bg-white p-3 rounded-lg mb-4 shadow-sm\">\n                <h4 className=\"font-semibold text-sm text-hive-black mb-1\">\n                  {selectedProperty.title}\n                </h4>\n                <p className=\"text-xs text-gray-600\">\n                  <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                  {selectedProperty.location}\n                </p>\n              </div>\n\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {nearbyPlaces.map((place) => (\n                  <div key={place.id} className=\"flex items-center justify-between bg-white p-3 rounded-lg shadow-sm\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                        <i className={`${getPlaceIcon(place.type)} text-gray-600 text-sm`}></i>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-sm\">{place.name}</p>\n                        <Badge className={`text-xs ${getPlaceColor(place.type)}`}>\n                          {place.type}\n                        </Badge>\n                      </div>\n                    </div>\n                    <span className=\"text-xs text-gray-500 font-medium\">\n                      {place.distance}\n                    </span>\n                  </div>\n                ))}\n              </div>\n\n              <Button \n                className=\"w-full mt-4 bg-hive-gold hover:bg-hive-gold-dark text-white\"\n                onClick={() => alert(\"Função de navegação será implementada!\")}\n              >\n                <i className=\"fas fa-route mr-2\"></i>\n                Ver Rotas\n              </Button>\n            </>\n          ) : clickedLocation && nearbyProperties.length > 0 ? (\n            <>\n              <div className=\"bg-white p-3 rounded-lg mb-4 shadow-sm\">\n                <h4 className=\"font-semibold text-sm text-hive-black mb-1\">\n                  Propriedades Próximas\n                </h4>\n                <p className=\"text-xs text-gray-600\">\n                  {nearbyProperties.length} propriedades encontradas na região\n                </p>\n              </div>\n\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {nearbyProperties.map((property) => (\n                  <div \n                    key={property.id} \n                    className=\"bg-white p-3 rounded-lg shadow-sm cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => handlePropertyClick(property)}\n                  >\n                    <h5 className=\"font-medium text-sm text-hive-black mb-1\">{property.title}</h5>\n                    <p className=\"text-xs text-gray-600 mb-2\">\n                      <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                      {property.location}\n                    </p>\n                    <p className=\"font-bold text-hive-gold text-sm\">\n                      R$ {new Intl.NumberFormat('pt-BR').format(parseFloat(property.price))}\n                    </p>\n                  </div>\n                ))}\n              </div>\n\n              <Button \n                className=\"w-full mt-4 bg-hive-gold hover:bg-hive-gold-dark text-white\"\n                onClick={() => {\n                  const places = generateNearbyPlaces(nearbyProperties[0]);\n                  setNearbyPlaces(places);\n                }}\n              >\n                <i className=\"fas fa-map-marked-alt mr-2\"></i>\n                Ver Locais de Interesse\n              </Button>\n            </>\n          ) : clickedLocation ? (\n            <div className=\"text-center text-gray-500\">\n              <i className=\"fas fa-home text-4xl mb-4 text-gray-400\"></i>\n              <p className=\"mb-2\">Nenhuma propriedade encontrada nesta área.</p>\n              <p className=\"text-xs\">Tente buscar ou clicar em outra região do mapa.</p>\n              <Button \n                className=\"mt-4 bg-hive-gold hover:bg-hive-gold-dark text-white text-xs\"\n                onClick={() => {\n                  // Simular locais de interesse na área clicada\n                  const mockProperty: Property = {\n                    id: 'temp',\n                    title: 'Área Selecionada',\n                    description: 'Local selecionado no mapa',\n                    price: '0',\n                    priceType: 'sale',\n                    propertyType: 'house',\n                    location: searchQuery || 'Local no mapa',\n                    bedrooms: null,\n                    bathrooms: null,\n                    parkingSpaces: null,\n                    area: null,\n                    businessType: 'residential',\n                    agency: { name: '', phone: '', email: '' },\n                    amenities: [],\n                    images: [],\n                    isFeatured: false,\n                    views: 0\n                  };\n                  const places = generateNearbyPlaces(mockProperty);\n                  setNearbyPlaces(places);\n                }}\n              >\n                <i className=\"fas fa-search mr-1\"></i>\n                Ver Locais de Interesse Próximos\n              </Button>\n            </div>\n          ) : (\n            <div className=\"text-center text-gray-500\">\n              <i className=\"fas fa-search-location text-4xl mb-4\"></i>\n              <div className=\"space-y-2\">\n                <p className=\"font-medium\">Como usar:</p>\n                <div className=\"text-left text-sm space-y-1\">\n                  <p><i className=\"fas fa-search text-hive-gold mr-2\"></i>Digite um local na busca acima</p>\n                  <p><i className=\"fas fa-mouse-pointer text-hive-gold mr-2\"></i>Clique em qualquer ponto do mapa</p>\n                  <p><i className=\"fas fa-home text-hive-gold mr-2\"></i>Clique nos marcadores das propriedades</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":26914},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthStatus } from \"@/components/auth-status\";\nimport logoPath from \"@assets/logo hive_1754700716189.png\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const isActive = (path: string) => location === path;\n\n  const navLinks = [\n    { path: \"/\", label: \"Início\" },\n    { path: \"/properties\", label: \"Imóveis\" },\n    { path: \"/services\", label: \"Serviços\" },\n    { path: \"/chat\", label: \"Chat\" },\n    { path: \"/plans\", label: \"Planos\" },\n  ];\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 bg-[#181818] text-[#ffffff]\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n            <img \n              src={logoPath}\n              alt=\"Hive Company Logo\" \n              className=\"h-8 w-auto opacity-90 group-hover:opacity-100 transition-all duration-300\"\n            />\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.path}\n                href={link.path}\n                className={`transition-colors duration-300 hover:text-hive-gold ${\n                  isActive(link.path) ? \"text-hive-gold font-medium\" : \"text-gray-600\"\n                }`}\n              >\n                {link.label}\n              </Link>\n            ))}\n            <AuthStatus />\n          </div>\n          \n          <button\n            className=\"md:hidden text-hive-black\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            <i className=\"fas fa-bars text-xl\"></i>\n          </button>\n        </div>\n      </div>\n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-white border-t border-gray-100\">\n          <div className=\"px-4 py-4 space-y-4\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.path}\n                href={link.path}\n                className={`block transition-colors duration-300 hover:text-hive-gold ${\n                  isActive(link.path) ? \"text-hive-gold font-medium\" : \"text-gray-600\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                {link.label}\n              </Link>\n            ))}\n            <div className=\"pt-2 border-t\">\n              <AuthStatus />\n            </div>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":2760},"client/src/components/property-card.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { type Property } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface PropertyCardProps {\n  property: Property;\n}\n\nexport default function PropertyCard({ property }: PropertyCardProps) {\n  const formatPrice = (price: string, priceType: string) => {\n    const numPrice = parseFloat(price);\n    const formatted = new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numPrice);\n\n    if (priceType === 'rent') return `${formatted}/mês`;\n    if (priceType === 'event') return `${formatted}/dia`;\n    return formatted;\n  };\n\n  const getStatusColor = (priceType: string) => {\n    switch (priceType) {\n      case 'sale': return 'bg-green-100 text-green-800';\n      case 'rent': return 'bg-blue-100 text-blue-800';\n      case 'event': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-orange-100 text-orange-800';\n    }\n  };\n\n  const getStatusLabel = (priceType: string) => {\n    switch (priceType) {\n      case 'sale': return 'VENDA';\n      case 'rent': return 'ALUGUEL';\n      case 'event': return 'EVENTO';\n      default: return 'COMERCIAL';\n    }\n  };\n\n  return (\n    <Link href={`/property/${property.id}`}>\n      <div className=\"bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden group cursor-pointer transform hover:scale-105\">\n      <img \n        src={property.imageUrl} \n        alt={property.title}\n        className=\"w-full h-48 object-cover\"\n      />\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <Badge className={`text-xs font-semibold px-2 py-1 rounded-full ${getStatusColor(property.priceType)}`}>\n            {getStatusLabel(property.priceType)}\n          </Badge>\n          <span className=\"text-hive-gold font-bold text-lg\">\n            {formatPrice(property.price, property.priceType)}\n          </span>\n        </div>\n        \n        <h3 className=\"font-semibold text-hive-black mb-2 line-clamp-1\">\n          {property.title}\n        </h3>\n        \n        <p className=\"text-gray-600 text-sm mb-3\">\n          <i className=\"fas fa-map-marker-alt mr-1\"></i>\n          {property.location}\n        </p>\n        \n        <div className=\"flex justify-between items-center text-sm text-gray-600 mb-3\">\n          {property.bedrooms && (\n            <span>\n              <i className=\"fas fa-bed mr-1\"></i>\n              {property.bedrooms} quarto{property.bedrooms > 1 ? 's' : ''}\n            </span>\n          )}\n          {property.bathrooms && (\n            <span>\n              <i className=\"fas fa-bath mr-1\"></i>\n              {property.bathrooms} banheiro{property.bathrooms > 1 ? 's' : ''}\n            </span>\n          )}\n          {property.parkingSpaces && (\n            <span>\n              <i className=\"fas fa-car mr-1\"></i>\n              {property.parkingSpaces} vaga{property.parkingSpaces > 1 ? 's' : ''}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"border-t pt-3\">\n          <p className=\"text-xs text-gray-500\">{property.agencyName}</p>\n        </div>\n      </div>\n    </div>\n    </Link>\n  );\n}\n","size_bytes":3241},"client/src/components/property-map-view-simple.tsx":{"content":"import React, { useState } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport PropertyCard from './property-card';\nimport { SimpleMap } from './simple-map';\nimport { type Property } from '@shared/schema';\n\ninterface PropertyMapViewProps {\n  properties: Property[];\n  isLoading?: boolean;\n}\n\nexport default function PropertyMapView({ properties, isLoading }: PropertyMapViewProps) {\n  const [selectedLocation, setSelectedLocation] = useState('');\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Skeleton key={i} className=\"h-96\" />\n            ))}\n          </div>\n        </div>\n        <div className=\"lg:col-span-1\">\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  const filteredProperties = selectedLocation \n    ? properties.filter(property => \n        property.location.toLowerCase().includes(selectedLocation.toLowerCase())\n      )\n    : properties;\n\n  return (\n    <div>\n      {/* Mobile: Stack vertically */}\n      <div className=\"lg:hidden space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-map-marked-alt text-hive-gold mr-2\"></i>\n              Busca por Localização\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <SimpleMap \n              onLocationSelect={(location) => {\n                setSelectedLocation(location);\n              }}\n            />\n          </CardContent>\n        </Card>\n\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold text-hive-black\">\n              Propriedades Encontradas\n              {selectedLocation && (\n                <span className=\"text-sm text-gray-500 font-normal ml-2\">\n                  em {selectedLocation}\n                </span>\n              )}\n            </h2>\n            <span className=\"text-sm text-gray-500\">\n              {filteredProperties.length} {filteredProperties.length === 1 ? 'propriedade' : 'propriedades'}\n            </span>\n          </div>\n          <div className=\"space-y-4\">\n            {filteredProperties.map((property: Property) => (\n              <PropertyCard key={property.id} property={property} />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Desktop: Side by side */}\n      <div className=\"hidden lg:grid lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-semibold text-hive-black\">\n              Propriedades Encontradas\n              {selectedLocation && (\n                <span className=\"text-sm text-gray-500 font-normal ml-2\">\n                  em {selectedLocation}\n                </span>\n              )}\n            </h2>\n            <span className=\"text-sm text-gray-500\">\n              {filteredProperties.length} {filteredProperties.length === 1 ? 'propriedade' : 'propriedades'}\n            </span>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {filteredProperties.map((property: Property) => (\n              <PropertyCard key={property.id} property={property} />\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"lg:col-span-1\">\n          <div className=\"sticky top-20\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-map-marked-alt text-hive-gold mr-2\"></i>\n                  Busca por Localização\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <SimpleMap \n                  onLocationSelect={(location) => {\n                    setSelectedLocation(location);\n                  }}\n                />\n              </CardContent>\n            </Card>\n\n            {selectedLocation && (\n              <Card className=\"mt-4\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Filtro ativo:</p>\n                      <p className=\"font-medium text-hive-black\">{selectedLocation}</p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedLocation('')}\n                      className=\"text-gray-500 hover:text-gray-700\"\n                    >\n                      <i className=\"fas fa-times mr-1\"></i>\n                      Limpar\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card className=\"mt-4\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-chart-pie text-3xl text-hive-gold mb-3\"></i>\n                  <h3 className=\"font-semibold text-hive-black mb-2\">Estatísticas da Busca</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Total de propriedades:</span>\n                      <span className=\"font-medium\">{properties.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Propriedades exibidas:</span>\n                      <span className=\"font-medium\">{filteredProperties.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Residenciais:</span>\n                      <span className=\"font-medium\">\n                        {filteredProperties.filter(p => p.businessType === 'residential').length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Comerciais:</span>\n                      <span className=\"font-medium\">\n                        {filteredProperties.filter(p => p.businessType === 'commercial').length}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6766},"client/src/components/property-map-view.tsx":{"content":"import { useState } from \"react\";\nimport { type Property } from \"@shared/schema\";\nimport PropertyCard from \"./property-card\";\nimport MapSearch from \"./map-search\";\n\ninterface PropertyMapViewProps {\n  properties: Property[];\n  isLoading: boolean;\n}\n\nexport default function PropertyMapView({ properties, isLoading }: PropertyMapViewProps) {\n  const [selectedProperty, setSelectedProperty] = useState<Property | null>(null);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"bg-white rounded-xl overflow-hidden\">\n          <div className=\"animate-pulse bg-gray-200 h-96\"></div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"bg-white rounded-xl overflow-hidden\">\n              <div className=\"animate-pulse bg-gray-200 h-48\"></div>\n              <div className=\"p-4 space-y-2\">\n                <div className=\"animate-pulse bg-gray-200 h-4\"></div>\n                <div className=\"animate-pulse bg-gray-200 h-4 w-3/4\"></div>\n                <div className=\"animate-pulse bg-gray-200 h-4 w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Visualização Desktop: Mapa e Grade lado a lado */}\n      <div className=\"hidden lg:block\">\n        <div className=\"grid grid-cols-12 gap-6\">\n          {/* Mapa */}\n          <div className=\"col-span-7\">\n            <MapSearch \n              properties={properties} \n              onPropertySelect={setSelectedProperty}\n              className=\"h-full\"\n            />\n          </div>\n          \n          {/* Lista de Propriedades */}\n          <div className=\"col-span-5\">\n            <div className=\"bg-white rounded-xl shadow-lg p-4\">\n              <h3 className=\"font-bold text-lg mb-4 text-hive-black\">\n                {properties.length} Propriedades Encontradas\n              </h3>\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {properties.map((property) => (\n                  <div\n                    key={property.id}\n                    className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 hover:shadow-md ${\n                      selectedProperty?.id === property.id \n                        ? 'border-hive-gold bg-hive-gold bg-opacity-5' \n                        : 'border-gray-200'\n                    }`}\n                    onClick={() => setSelectedProperty(property)}\n                  >\n                    <div className=\"flex space-x-3\">\n                      <img \n                        src={property.imageUrl} \n                        alt={property.title}\n                        className=\"w-20 h-16 object-cover rounded-lg\"\n                      />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-sm text-hive-black mb-1\">\n                          {property.title}\n                        </h4>\n                        <p className=\"text-xs text-gray-600 mb-2\">\n                          <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                          {property.location}\n                        </p>\n                        <p className=\"font-bold text-hive-gold\">\n                          R$ {new Intl.NumberFormat('pt-BR').format(parseFloat(property.price))}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Visualização Mobile/Tablet: Mapa acima, lista abaixo */}\n      <div className=\"lg:hidden space-y-4\">\n        <MapSearch \n          properties={properties} \n          onPropertySelect={setSelectedProperty}\n        />\n        \n        <div className=\"bg-white rounded-xl shadow-lg p-4\">\n          <h3 className=\"font-bold text-lg mb-4 text-hive-black\">\n            Propriedades ({properties.length})\n          </h3>\n          <div className=\"space-y-4\">\n            {properties.map((property) => (\n              <div\n                key={property.id}\n                className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${\n                  selectedProperty?.id === property.id \n                    ? 'border-hive-gold bg-hive-gold bg-opacity-5' \n                    : 'border-gray-200'\n                }`}\n                onClick={() => setSelectedProperty(property)}\n              >\n                <div className=\"flex space-x-4\">\n                  <img \n                    src={property.imageUrl} \n                    alt={property.title}\n                    className=\"w-24 h-20 object-cover rounded-lg\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-hive-black mb-2\">\n                      {property.title}\n                    </h4>\n                    <p className=\"text-sm text-gray-600 mb-2\">\n                      <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                      {property.location}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 mb-2\">\n                      <span className=\"bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs\">\n                        <i className=\"fas fa-bed mr-1\"></i>\n                        {property.bedrooms} quartos\n                      </span>\n                      <span className=\"bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs\">\n                        <i className=\"fas fa-bath mr-1\"></i>\n                        {property.bathrooms} banheiros\n                      </span>\n                      <span className=\"bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs\">\n                        <i className=\"fas fa-ruler mr-1\"></i>\n                        {property.area}m²\n                      </span>\n                    </div>\n                    <p className=\"font-bold text-lg text-hive-gold\">\n                      R$ {new Intl.NumberFormat('pt-BR').format(parseFloat(property.price))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6329},"client/src/components/service-category.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { type ServiceCategory } from \"@shared/schema\";\n\ninterface ServiceCategoryProps {\n  category: ServiceCategory;\n}\n\nexport default function ServiceCategory({ category }: ServiceCategoryProps) {\n  const [, navigate] = useLocation();\n\n  const handleClick = () => {\n    navigate(`/services?category=${category.slug}`);\n  };\n\n  return (\n    <div \n      className=\"bg-hive-gray hover:bg-hive-gold group cursor-pointer rounded-xl p-6 text-center transition-all duration-300 transform hover:scale-105\"\n      onClick={handleClick}\n    >\n      <div className=\"bg-white group-hover:bg-white/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 transition-colors duration-300\">\n        <i className={`${category.icon} text-hive-gold group-hover:text-white text-2xl`}></i>\n      </div>\n      <h3 className=\"font-semibold text-hive-black group-hover:text-white transition-colors duration-300\">\n        {category.name}\n      </h3>\n      <p className=\"text-xs text-gray-600 group-hover:text-white/80 mt-1 transition-colors duration-300\">\n        {category.providerCount} profissionais\n      </p>\n    </div>\n  );\n}\n","size_bytes":1161},"client/src/components/service-provider-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { type ServiceProvider } from \"@shared/schema\";\n\ninterface ServiceProviderCardProps {\n  provider: ServiceProvider;\n}\n\nexport default function ServiceProviderCard({ provider }: ServiceProviderCardProps) {\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const fullStars = Math.floor(numRating);\n    const hasHalfStar = numRating % 1 !== 0;\n    \n    return (\n      <div className=\"flex items-center text-hive-gold mb-1\">\n        {Array.from({ length: 5 }, (_, i) => (\n          <i\n            key={i}\n            className={`text-sm ${\n              i < fullStars\n                ? \"fas fa-star\"\n                : i === fullStars && hasHalfStar\n                ? \"fas fa-star-half-alt\"\n                : \"far fa-star\"\n            }`}\n          ></i>\n        ))}\n        <span className=\"ml-1 text-gray-600 text-sm\">{rating}</span>\n      </div>\n    );\n  };\n\n  const handleContract = () => {\n    console.log(\"Contratar prestador:\", provider.id);\n    alert(\"Redirecionando para o contato com o prestador...\");\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden\">\n      <img \n        src={provider.imageUrl} \n        alt={provider.name}\n        className=\"w-full h-48 object-cover\"\n      />\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"font-bold text-lg text-hive-black\">{provider.name}</h3>\n            <p className=\"text-gray-600\">{provider.speciality}</p>\n            <p className=\"text-sm text-gray-500\">\n              {provider.documentType}: {provider.documentType === \"CPF\" ? \"***.***.***-**\" : \"**.***.***/****-**\"}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            {renderStars(provider.rating || \"0.0\")}\n            <p className=\"text-xs text-gray-500\">{provider.reviewCount} avaliações</p>\n          </div>\n        </div>\n        \n        <p className=\"text-gray-600 mb-4\">\n          <i className=\"fas fa-map-marker-alt mr-1\"></i>\n          {provider.location}\n        </p>\n        \n        {provider.portfolioImages && provider.portfolioImages.length > 0 && (\n          <div className=\"mb-4\">\n            <p className=\"text-sm font-semibold text-gray-700 mb-2\">Trabalhos recentes:</p>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {provider.portfolioImages.slice(0, 3).map((image, index) => (\n                <img\n                  key={index}\n                  src={image}\n                  alt={`Trabalho ${index + 1} de ${provider.name}`}\n                  className=\"w-full h-16 object-cover rounded\"\n                />\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <Button \n          onClick={handleContract}\n          className=\"w-full bg-hive-gold hover:bg-hive-gold-dark text-white font-semibold py-3 rounded-lg transition-colors duration-300\"\n        >\n          Contratar\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3098},"client/src/components/simple-map.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface SimpleMapProps {\n  onLocationSelect?: (location: string) => void;\n}\n\nexport function SimpleMap({ onLocationSelect }: SimpleMapProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      setSelectedLocation(searchQuery);\n      onLocationSelect?.(searchQuery);\n    }\n  };\n\n  const popularCities = [\n    'São Paulo, SP',\n    'Rio de Janeiro, RJ', \n    'Belo Horizonte, MG',\n    'Brasília, DF',\n    'Salvador, BA',\n    'Fortaleza, CE',\n    'Recife, PE',\n    'Porto Alegre, RS'\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex gap-2 mb-4\">\n            <Input\n              placeholder=\"Digite uma cidade ou endereço...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              className=\"flex-1\"\n            />\n            <Button \n              onClick={handleSearch}\n              className=\"bg-hive-gold hover:bg-hive-gold-dark text-white px-6\"\n            >\n              <i className=\"fas fa-search mr-2\"></i>\n              Buscar\n            </Button>\n          </div>\n\n          {selectedLocation && (\n            <div className=\"mb-4 p-3 bg-green-50 border-l-4 border-green-400 rounded\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-map-marker-alt text-green-600 mr-2\"></i>\n                <span className=\"text-green-800\">Localização selecionada: <strong>{selectedLocation}</strong></span>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <h3 className=\"font-medium text-gray-700 mb-2\">\n              <i className=\"fas fa-star text-hive-gold mr-2\"></i>\n              Cidades Populares\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n              {popularCities.map((city) => (\n                <button\n                  key={city}\n                  onClick={() => {\n                    setSearchQuery(city);\n                    setSelectedLocation(city);\n                    onLocationSelect?.(city);\n                  }}\n                  className=\"text-left p-2 text-sm text-hive-gold hover:bg-hive-gold hover:text-white rounded transition-colors\"\n                >\n                  {city}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n            <div className=\"flex items-start\">\n              <i className=\"fas fa-info-circle text-blue-500 mr-2 mt-1\"></i>\n              <div className=\"text-sm text-blue-700\">\n                <p className=\"font-medium mb-1\">Como usar:</p>\n                <ul className=\"space-y-1 text-xs\">\n                  <li>• Digite o nome de uma cidade ou endereço completo</li>\n                  <li>• Clique em uma das cidades populares</li>\n                  <li>• Use a busca para encontrar propriedades na região</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3455},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const sessionId = localStorage.getItem(\"hive_session\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (sessionId) {\n    headers[\"Authorization\"] = `Bearer ${sessionId}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const sessionId = localStorage.getItem(\"hive_session\");\n    const headers: Record<string, string> = {};\n    \n    if (sessionId) {\n      headers[\"Authorization\"] = `Bearer ${sessionId}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1799},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport logoPath from \"@assets/logo hive_1754700716189.png\";\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useChatContext } from '@/context/ChatContext';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Search, \n  Send, \n  Phone, \n  Video, \n  Info, \n  MoreHorizontal,\n  ArrowLeft,\n  MessageCircle,\n  Users,\n  Bot,\n  Clock,\n  Check,\n  CheckCheck\n} from 'lucide-react';\n\ninterface Conversation {\n  id: string;\n  participantId: string;\n  participantName: string;\n  participantImage?: string;\n  participantType: 'provider' | 'assistant';\n  lastMessage: string | null;\n  lastMessageAt: string;\n  unreadCount: number;\n  isOnline: boolean;\n}\n\ninterface ChatMessage {\n  id: string;\n  conversationId: string;\n  sender: 'user' | 'provider' | 'assistant';\n  message: string;\n  timestamp: string;\n  isRead: boolean;\n}\n\nexport default function ChatPage() {\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const { setIsChatPageOpen } = useChatContext();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  // Desabilitar popups quando a página de chat estiver aberta\n  useEffect(() => {\n    setIsChatPageOpen(true);\n    return () => setIsChatPageOpen(false);\n  }, [setIsChatPageOpen]);\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <MessageCircle className=\"h-12 w-12 text-amber-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900\">Acesso Restrito</h2>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-gray-600\">\n              Você precisa fazer login para acessar o chat e conversar com prestadores.\n            </p>\n            <div className=\"space-y-2\">\n              <Link href=\"/auth\">\n                <Button className=\"w-full\">Fazer Login</Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button variant=\"outline\" className=\"w-full\">Criar Conta</Button>\n              </Link>\n            </div>\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\">Voltar ao Início</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Buscar todas as conversas\n  const { data: conversations = [] } = useQuery<Conversation[]>({\n    queryKey: ['/api', 'chat', 'conversations'],\n    refetchInterval: 5000,\n    enabled: isAuthenticated, // Apenas buscar se autenticado\n  });\n\n  // Buscar mensagens da conversa selecionada\n  const { data: messages = [] } = useQuery<ChatMessage[]>({\n    queryKey: ['/api', 'chat', 'conversations', selectedConversation, 'messages'],\n    enabled: !!selectedConversation && isAuthenticated,\n    refetchInterval: 3000,\n  });\n\n  // Buscar perfis de prestadores para exibir informações\n  const { data: providers = [] } = useQuery<any[]>({\n    queryKey: ['/api', 'profiles'],\n    enabled: isAuthenticated, // Apenas buscar se autenticado\n  });\n\n  // Enviar mensagem\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ conversationId, message }: { conversationId: string; message: string }) => {\n      return await apiRequest('POST', `/api/chat/conversations/${conversationId}/messages`, { message });\n    },\n    onSuccess: () => {\n      setNewMessage('');\n      // Apenas invalidar as mensagens da conversa específica para evitar duplicações\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations', selectedConversation, 'messages'] \n      });\n      // Invalidar a lista de conversas para atualizar última mensagem\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations'] \n      });\n    }\n  });\n\n  // Remover scroll automático para evitar rolagem da página toda\n  // O usuário pode rolar manualmente se necessário\n\n  // Filtrar conversas por busca\n  const filteredConversations = conversations.filter(conv =>\n    conv.participantName?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() && selectedConversation) {\n      sendMessageMutation.mutate({\n        conversationId: selectedConversation,\n        message: newMessage.trim()\n      });\n    }\n  };\n\n  const selectedConvData = conversations.find(c => c.id === selectedConversation);\n  const selectedProvider = providers.find((p: any) => p.id === selectedConvData?.participantId);\n\n  const formatTime = (timestamp: string) => {\n    if (!timestamp) return 'Agora';\n    \n    try {\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Agora';\n      \n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffMins = Math.floor(diffMs / (1000 * 60));\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffMins < 1) return 'Agora';\n      if (diffMins < 60) return `${diffMins}m`;\n      if (diffHours < 24) return `${diffHours}h`;\n      if (diffDays < 7) return `${diffDays}d`;\n      return date.toLocaleDateString('pt-BR');\n    } catch (error) {\n      return 'Agora';\n    }\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-50 dark:bg-gray-900 overflow-hidden\">\n      <div className=\"flex h-full max-h-screen\">\n        {/* Sidebar - Lista de Conversas */}\n        <div className={`${selectedConversation ? 'hidden lg:flex' : 'flex'} w-full lg:w-80 flex-col bg-white dark:bg-gray-800 border-r`}>\n          {/* Header da Sidebar */}\n          <div className=\"p-4 border-b\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Chat</h1>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"secondary\" className=\"bg-hive-gold text-white\">\n                  {conversations.length}\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Barra de Busca */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Buscar conversas...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Lista de Conversas */}\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-2\">\n              {filteredConversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  onClick={() => setSelectedConversation(conversation.id)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 mb-1 hover:bg-gray-100 dark:hover:bg-gray-700 ${\n                    selectedConversation === conversation.id \n                      ? 'bg-hive-gold/10 border-l-4 border-hive-gold' \n                      : ''\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <Avatar className=\"w-12 h-12\">\n                        {conversation.participantType === 'assistant' ? (\n                          <div className=\"w-full h-full bg-hive-gold flex items-center justify-center p-1\">\n                            <img \n                              src={logoPath}\n                              alt=\"Hive Logo\" \n                              className=\"w-full h-full object-contain\"\n                            />\n                          </div>\n                        ) : (\n                          <>\n                            <AvatarImage src={conversation.participantImage} />\n                            <AvatarFallback className=\"bg-hive-gold text-white\">\n                              {(conversation.participantName || 'U').charAt(0).toUpperCase()}\n                            </AvatarFallback>\n                          </>\n                        )}\n                      </Avatar>\n                      {conversation.isOnline && (\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"></div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-medium text-gray-900 dark:text-white truncate\">\n                          {conversation.participantName || 'Usuário'}\n                        </h3>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {formatTime(conversation.lastMessageAt)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300 truncate\">\n                          {conversation.lastMessage || 'Conversa iniciada'}\n                        </p>\n                        {conversation.unreadCount > 0 && (\n                          <Badge className=\"bg-hive-gold text-white text-xs min-w-[20px] h-5\">\n                            {conversation.unreadCount > 9 ? '9+' : conversation.unreadCount}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {filteredConversations.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <MessageCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    {searchTerm ? 'Nenhuma conversa encontrada' : 'Nenhuma conversa ainda'}\n                  </p>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Área de Chat Principal */}\n        <div className={`${selectedConversation ? 'flex' : 'hidden lg:flex'} flex-1 flex-col bg-white dark:bg-gray-800 h-full`}>\n          {selectedConversation && selectedConvData ? (\n            <>\n              {/* Header do Chat */}\n              <div className=\"px-4 py-2 border-b bg-white dark:bg-gray-800 flex items-center justify-between flex-shrink-0\">\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedConversation(null)}\n                    className=\"lg:hidden\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <div className=\"relative\">\n                    <Avatar className=\"w-10 h-10\">\n                      {selectedConvData.participantType === 'assistant' ? (\n                        <div className=\"w-full h-full bg-hive-gold flex items-center justify-center p-1\">\n                          <img \n                            src={logoPath}\n                            alt=\"Hive Logo\" \n                            className=\"w-full h-full object-contain\"\n                          />\n                        </div>\n                      ) : (\n                        <>\n                          <AvatarImage src={selectedConvData.participantImage} />\n                          <AvatarFallback className=\"bg-hive-gold text-white\">\n                            {(selectedConvData.participantName || 'U').charAt(0).toUpperCase()}\n                          </AvatarFallback>\n                        </>\n                      )}\n                    </Avatar>\n                    {selectedConvData.isOnline && (\n                      <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white\"></div>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <h2 className=\"font-semibold text-gray-900 dark:text-white\">\n                      {selectedConvData.participantName || 'Usuário'}\n                    </h2>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {selectedConvData.isOnline ? 'Online agora' : 'Visto por último há algum tempo'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  {selectedConvData.participantType === 'provider' && (\n                    <>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Phone className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Video className=\"w-4 h-4\" />\n                      </Button>\n                    </>\n                  )}\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Info className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <MoreHorizontal className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Área de Mensagens */}\n              <div className=\"flex-1 overflow-y-auto max-h-96\">\n                <div className=\"px-3 pt-1 pb-0 space-y-1\">\n                  {messages.map((message) => {\n                    const isUserMessage = (message.sender === 'user');\n                    const isAssistant = (message.sender === 'assistant');\n                    return (\n                        <div\n                          key={message.id}\n                          className={`flex ${isUserMessage ? 'justify-end' : 'justify-start'}`}\n                        >\n                          <div className={`max-w-[70%] ${isUserMessage ? 'order-2' : 'order-1'}`}>\n                            <div\n                              className={`p-2 rounded-2xl ${\n                                isUserMessage\n                                  ? 'bg-hive-gold text-white rounded-br-md'\n                                  : isAssistant\n                                  ? 'bg-blue-100 text-blue-900 rounded-bl-md'\n                                  : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white rounded-bl-md'\n                              }`}\n                            >\n                              <p className=\"text-sm\">{message.message}</p>\n                            </div>\n                            <div className={`flex items-center mt-1 space-x-1 ${\n                              isUserMessage ? 'justify-end' : 'justify-start'\n                            }`}>\n                              <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                {formatTime(message.timestamp)}\n                              </span>\n                              {isUserMessage && (\n                                <div className=\"text-gray-500\">\n                                  {message.isRead ? (\n                                    <CheckCheck className=\"w-3 h-3 text-blue-500\" />\n                                  ) : (\n                                    <Check className=\"w-3 h-3\" />\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  <div ref={messagesEndRef} />\n                </div>\n              </div>\n\n              {/* Área de Input - Fixa na parte inferior */}\n              <div className=\"border-t bg-white dark:bg-gray-800 px-4 py-3 flex-shrink-0\">\n                <form \n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    handleSendMessage();\n                  }}\n                  className=\"flex items-center space-x-3\"\n                >\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Digite uma mensagem...\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      className=\"w-full rounded-full border-gray-300 focus:border-hive-gold focus:ring-hive-gold h-10\"\n                      disabled={sendMessageMutation.isPending}\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                    className=\"rounded-full w-10 h-10 p-0 bg-hive-gold hover:bg-hive-gold-dark\"\n                    size=\"sm\"\n                  >\n                    {sendMessageMutation.isPending ? (\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                    ) : (\n                      <Send className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </form>\n              </div>\n            </>\n          ) : (\n            /* Estado Inicial - Nenhuma conversa selecionada */\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <MessageCircle className=\"w-8 h-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  Bem-vindo ao Chat Hive\n                </h3>\n                <p className=\"text-gray-500 dark:text-gray-400 max-w-sm\">\n                  Selecione uma conversa à esquerda para começar a conversar com prestadores de serviços ou nosso assistente.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19414},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport HeroSection from \"@/components/hero-section\";\nimport PropertyCard from \"@/components/property-card\";\nimport ServiceCategory from \"@/components/service-category\";\nimport { type Property, type ServiceCategory as ServiceCategoryType } from \"@shared/schema\";\n\nexport default function Home() {\n  const { data: featuredProperties, isLoading: loadingProperties } = useQuery({\n    queryKey: [\"/api/properties/featured\"],\n  });\n\n  const { data: serviceCategories, isLoading: loadingCategories } = useQuery({\n    queryKey: [\"/api/service-categories\"],\n  });\n\n  return (\n    <div>\n      <HeroSection />\n      \n      {/* Featured Properties Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-hive-black mb-4\">Imóveis em Destaque</h2>\n            <p className=\"text-gray-600 text-lg\">Seleção especial dos melhores imóveis disponíveis</p>\n          </div>\n          \n          {loadingProperties ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl overflow-hidden\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <div className=\"p-4 space-y-2\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {(featuredProperties as Property[] || []).map((property: Property) => (\n                <PropertyCard key={property.id} property={property} />\n              ))}\n            </div>\n          )}\n          \n          <div className=\"text-center mt-8\">\n            <Link href=\"/properties\">\n              <Button variant=\"outline\" className=\"bg-white border-2 border-hive-gold text-hive-gold hover:bg-hive-gold hover:text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300\">\n                Ver todos os imóveis\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Service Categories Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-hive-black mb-4\">Serviços Especializados</h2>\n            <p className=\"text-gray-600 text-lg\">Encontre os melhores profissionais para seu imóvel</p>\n          </div>\n          \n          {loadingCategories ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div key={i} className=\"bg-hive-gray rounded-xl p-6 text-center\">\n                  <Skeleton className=\"w-16 h-16 rounded-full mx-auto mb-4\" />\n                  <Skeleton className=\"h-4 w-full mb-1\" />\n                  <Skeleton className=\"h-3 w-3/4 mx-auto\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n              {(serviceCategories as ServiceCategoryType[] || []).map((category: ServiceCategoryType) => (\n                <ServiceCategory key={category.id} category={category} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3932},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/plans.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { type Plan } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function Plans() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const { data: plans, isLoading } = useQuery({\n    queryKey: [\"/api/plans\"],\n  });\n\n  const handleSubscribe = (planType: string) => {\n    console.log('Handle subscribe called with planType:', planType);\n    \n    // Se não estiver autenticado, redireciona para cadastro\n    if (!isAuthenticated) {\n      setLocation('/register');\n      return;\n    }\n    \n    // Se já for prestador, não permite contratar novamente\n    if (user?.userType === \"provider\") {\n      alert(\"Você já é um prestador Hive!\");\n      setLocation('/dashboard');\n      return;\n    }\n    \n    // Redireciona para checkout com parâmetro correto\n    const checkoutUrl = `/checkout?plan=${planType}`;\n    console.log('Redirecting to:', checkoutUrl);\n    setLocation(checkoutUrl);\n  };\n\n  const formatPrice = (price: string) => {\n    const numPrice = parseFloat(price);\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numPrice);\n  };\n\n  if (isLoading || authLoading) {\n    return (\n      <div className=\"py-16 bg-gray-50 min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <Skeleton className=\"h-12 w-96 mx-auto mb-4\" />\n            <Skeleton className=\"h-6 w-64 mx-auto\" />\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {Array.from({ length: 2 }).map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n                <div className=\"p-8 text-center\">\n                  <Skeleton className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n                  <Skeleton className=\"h-8 w-48 mx-auto mb-2\" />\n                  <Skeleton className=\"h-4 w-32 mx-auto mb-4\" />\n                  <Skeleton className=\"h-10 w-24 mx-auto mb-2\" />\n                  <Skeleton className=\"h-4 w-16 mx-auto\" />\n                </div>\n                <div className=\"p-8\">\n                  <div className=\"space-y-4 mb-8\">\n                    {Array.from({ length: 7 }).map((_, j) => (\n                      <Skeleton key={j} className=\"h-4 w-full\" />\n                    ))}\n                  </div>\n                  <Skeleton className=\"h-12 w-full rounded-lg\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 via-white to-yellow-50\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-gradient-to-r from-amber-600 to-yellow-500 py-20\">\n        <div className=\"absolute inset-0 bg-black opacity-10\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n            Torne-se um <span className=\"text-yellow-200\">Prestador Hive</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-white/90 mb-8 max-w-3xl mx-auto\">\n            Conecte-se com milhares de clientes e faça seu negócio crescer com a plataforma líder em serviços\n          </p>\n          {!isAuthenticated && (\n            <div className=\"max-w-lg mx-auto p-6 bg-white/20 backdrop-blur-sm border border-white/30 rounded-2xl\">\n              <p className=\"text-white text-lg font-medium\">\n                🚀 <strong>Novo por aqui?</strong> Crie sua conta e comece hoje mesmo!\n              </p>\n            </div>\n          )}\n          {user?.userType === \"provider\" && (\n            <div className=\"max-w-lg mx-auto p-6 bg-green-500/20 backdrop-blur-sm border border-green-400/30 rounded-2xl\">\n              <p className=\"text-white text-lg font-medium\">\n                ✨ <strong>Bem-vindo de volta!</strong> Gerencie seu plano no dashboard.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-16 relative z-10\">\n\n        {/* Plans Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto mb-16\">\n          {(plans as Plan[] || []).map((plan: Plan) => (\n            <div \n              key={plan.id} \n              className={`group relative bg-white rounded-3xl overflow-hidden transition-all duration-500 transform hover:scale-[1.02] hover:shadow-2xl ${\n                plan.popular \n                  ? 'shadow-2xl border-4 border-gradient-to-r from-amber-400 to-yellow-500' \n                  : 'shadow-xl border border-gray-200 hover:border-amber-300'\n              }`}\n            >\n              {plan.popular && (\n                <>\n                  {/* Popular Badge */}\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 z-20\">\n                    <div className=\"bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-8 py-3 rounded-full text-sm font-bold shadow-lg mt-[18px] mb-[18px] pt-[8px] pb-[8px]\">\n                      ⭐ MAIS ESCOLHIDO\n                    </div>\n                  </div>\n                  {/* Glow Effect */}\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-amber-400/20 to-yellow-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-3xl\"></div>\n                </>\n              )}\n              \n              {/* Header */}\n              <div className={`relative p-10 text-center ${\n                plan.popular \n                  ? 'bg-gradient-to-br from-amber-500 via-yellow-500 to-amber-600 text-white' \n                  : 'bg-gradient-to-br from-gray-50 to-white'\n              }`}>\n                <div className={`inline-flex p-6 rounded-2xl mb-6 ${\n                  plan.popular ? 'bg-white/20 backdrop-blur-sm' : 'bg-gradient-to-br from-amber-100 to-yellow-100'\n                }`}>\n                  <div className={`text-4xl ${plan.popular ? 'text-white' : 'text-amber-600'}`}>\n                    {plan.type === 'A' ? '👨‍💼' : '🏢'}\n                  </div>\n                </div>\n                \n                <h3 className={`text-3xl font-bold mb-3 ${plan.popular ? 'text-white' : 'text-gray-900'}`}>\n                  {plan.name}\n                </h3>\n                \n                <p className={`text-lg mb-6 ${plan.popular ? 'text-white/90' : 'text-gray-600'}`}>\n                  {plan.targetAudience === 'CPF' ? '🔥 Ideal para profissionais autônomos' : '🚀 Perfeito para empresas e imobiliárias'}\n                </p>\n                \n                <div className=\"flex items-center justify-center mb-4\">\n                  <span className={`text-5xl font-bold ${plan.popular ? 'text-white' : 'text-amber-600'}`}>\n                    {formatPrice(plan.price)}\n                  </span>\n                  <span className={`text-lg ml-2 ${plan.popular ? 'text-white/80' : 'text-gray-500'}`}>\n                    /mês\n                  </span>\n                </div>\n                \n                {plan.popular && (\n                  <div className=\"text-white/90 text-sm font-medium\">\n                    💳 Primeira semana grátis!\n                  </div>\n                )}\n              </div>\n              \n              {/* Features */}\n              <div className=\"p-10\">\n                <div className=\"space-y-5 mb-10\">\n                  {plan.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-start group/feature\">\n                      <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mr-4 group-hover/feature:bg-green-200 transition-colors\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full group-hover/feature:scale-125 transition-transform\"></div>\n                      </div>\n                      <span className=\"text-gray-700 font-medium group-hover/feature:text-gray-900 transition-colors\">\n                        {feature}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                \n                <Button \n                  onClick={() => handleSubscribe(plan.type)}\n                  className={`w-full h-14 text-lg font-bold rounded-2xl transition-all duration-300 transform hover:scale-105 ${\n                    plan.popular\n                      ? 'bg-gradient-to-r from-amber-500 to-yellow-500 hover:from-amber-600 hover:to-yellow-600 text-white shadow-lg'\n                      : 'bg-gradient-to-r from-gray-800 to-gray-900 hover:from-amber-500 hover:to-yellow-500 text-white shadow-lg'\n                  }`}\n                  disabled={user?.userType === \"provider\"}\n                >\n                  {!isAuthenticated ? '✨ Criar Conta e Começar' : \n                   user?.userType === \"provider\" ? '✅ Plano Ativo' : \n                   `🚀 Escolher ${plan.name}`}\n                </Button>\n                \n                <p className=\"text-xs text-gray-500 text-center mt-6 font-medium\">\n                  {plan.targetAudience === 'CPF' \n                    ? '📋 Documentação: CPF e dados pessoais' \n                    : '📋 Documentação: CNPJ e dados empresariais'}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"bg-white rounded-3xl p-12 shadow-xl border border-gray-100 mb-16\">\n          <h3 className=\"text-3xl font-bold text-gray-900 text-center mb-4\">\n            Por que escolher o Hive?\n          </h3>\n          <p className=\"text-gray-600 text-center mb-12 text-lg\">\n            Mais de 10.000 prestadores já confiam na nossa plataforma\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <span className=\"text-2xl\">📈</span>\n              </div>\n              <h4 className=\"font-bold text-xl mb-2 text-gray-900\">Mais Clientes</h4>\n              <p className=\"text-gray-600\">Conecte-se com milhares de pessoas que precisam dos seus serviços</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <span className=\"text-2xl\">💳</span>\n              </div>\n              <h4 className=\"font-bold text-xl mb-2 text-gray-900\">Pagamento Fácil</h4>\n              <p className=\"text-gray-600\">Receba pagamentos direto na sua conta, sem complicações</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <span className=\"text-2xl\">🛡️</span>\n              </div>\n              <h4 className=\"font-bold text-xl mb-2 text-gray-900\">100% Seguro</h4>\n              <p className=\"text-gray-600\">Plataforma segura e confiável, dados protegidos</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Testimonials Section */}\n        <div className=\"bg-white rounded-3xl p-12 shadow-xl border border-gray-100 mb-16\">\n          <h3 className=\"text-3xl font-bold text-gray-900 text-center mb-4\">\n            O que nossos prestadores dizem\n          </h3>\n          <p className=\"text-gray-600 text-center mb-12 text-lg\">\n            Histórias reais de sucesso na plataforma Hive\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-8 rounded-2xl border border-blue-100\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold\">\n                  M\n                </div>\n                <div className=\"ml-4\">\n                  <h4 className=\"font-bold text-gray-900\">Maria Silva</h4>\n                  <p className=\"text-gray-600 text-sm\">Faxineira - BE HIVE</p>\n                </div>\n              </div>\n              <p className=\"text-gray-700 italic\">\n                \"Triplicou minha clientela em 2 meses! Super recomendo o Hive para quem quer crescer profissionalmente.\"\n              </p>\n              <div className=\"flex text-yellow-500 mt-4\">\n                ⭐⭐⭐⭐⭐\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-8 rounded-2xl border border-green-100\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center text-white font-bold\">\n                  J\n                </div>\n                <div className=\"ml-4\">\n                  <h4 className=\"font-bold text-gray-900\">João Santos</h4>\n                  <p className=\"text-gray-600 text-sm\">Eletricista - BE HIVE</p>\n                </div>\n              </div>\n              <p className=\"text-gray-700 italic\">\n                \"Finalmente uma plataforma que valoriza o prestador. Pagamento rápido e clientes de qualidade!\"\n              </p>\n              <div className=\"flex text-yellow-500 mt-4\">\n                ⭐⭐⭐⭐⭐\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-purple-50 to-violet-50 p-8 rounded-2xl border border-purple-100\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center text-white font-bold\">\n                  I\n                </div>\n                <div className=\"ml-4\">\n                  <h4 className=\"font-bold text-gray-900\">Imobiliária Prime</h4>\n                  <p className=\"text-gray-600 text-sm\">Empresa - HIVE GOLD</p>\n                </div>\n              </div>\n              <p className=\"text-gray-700 italic\">\n                \"Os recursos empresariais do GOLD são incríveis. Relatórios detalhados e gestão completa!\"\n              </p>\n              <div className=\"flex text-yellow-500 mt-4\">\n                ⭐⭐⭐⭐⭐\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        {!isAuthenticated && (\n          <div className=\"bg-gradient-to-r from-amber-500 to-yellow-500 rounded-3xl p-12 shadow-2xl mb-16 text-center text-white\">\n            <h3 className=\"text-4xl font-bold mb-4\">\n              Pronto para começar?\n            </h3>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Junte-se a milhares de prestadores que já transformaram seus negócios\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                onClick={() => setLocation('/register')}\n                className=\"bg-white text-amber-600 hover:bg-gray-100 px-8 py-4 text-lg font-bold rounded-2xl shadow-lg transform hover:scale-105 transition-all\"\n              >\n                🚀 Criar Conta Grátis\n              </Button>\n              <Button\n                onClick={() => setLocation('/services')}\n                variant=\"outline\"\n                className=\"border-white text-white hover:bg-white hover:text-amber-600 px-8 py-4 text-lg font-bold rounded-2xl border-2\"\n              >\n                📋 Ver Como Funciona\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Payment Methods */}\n        <div className=\"bg-gradient-to-r from-gray-50 to-white rounded-3xl p-12 shadow-xl\">\n          <h3 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">\n            💳 Formas de Pagamento Seguras\n          </h3>\n          <div className=\"flex justify-center items-center flex-wrap gap-8\">\n            <div className=\"flex items-center space-x-3 bg-white p-4 rounded-2xl shadow-md hover:shadow-lg transition-shadow\">\n              <div className=\"w-12 h-8 bg-blue-600 rounded flex items-center justify-center text-white font-bold text-sm\">VISA</div>\n              <span className=\"font-medium text-gray-700\">Visa</span>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-white p-4 rounded-2xl shadow-md hover:shadow-lg transition-shadow\">\n              <div className=\"w-12 h-8 bg-red-600 rounded flex items-center justify-center text-white font-bold text-xs\">MC</div>\n              <span className=\"font-medium text-gray-700\">Mastercard</span>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-white p-4 rounded-2xl shadow-md hover:shadow-lg transition-shadow\">\n              <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-lg\">₿</div>\n              <span className=\"font-medium text-gray-700\">PIX</span>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-white p-4 rounded-2xl shadow-md hover:shadow-lg transition-shadow\">\n              <div className=\"w-8 h-8 bg-amber-500 rounded flex items-center justify-center text-white text-sm\">💳</div>\n              <span className=\"font-medium text-gray-700\">Cartão</span>\n            </div>\n          </div>\n          <p className=\"text-center text-gray-500 text-sm mt-6\">\n            🔒 Pagamentos processados com segurança SSL 256-bit\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18347},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useRoute } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, \n  Camera, \n  MapPin, \n  Phone, \n  Mail, \n  Calendar,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Upload,\n  Save,\n  Eye,\n  X\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Schema para perfil de visualizador\nconst viewerProfileSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  phoneNumber: z.string().optional(),\n  address: z.string().min(5, \"Endereço deve ter pelo menos 5 caracteres\"),\n  city: z.string().min(2, \"Cidade obrigatória\"),\n  state: z.string().min(2, \"Estado obrigatório\"),\n  zipCode: z.string().min(8, \"CEP inválido\"),\n  documentType: z.enum([\"CPF\"]),\n  documentNumber: z.string().min(11, \"CPF inválido\"),\n});\n\n// Schema para perfil de prestador\nconst providerProfileSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  phoneNumber: z.string().min(10, \"Telefone obrigatório\"),\n  address: z.string().min(5, \"Endereço deve ter pelo menos 5 caracteres\"),\n  city: z.string().min(2, \"Cidade obrigatória\"),\n  state: z.string().min(2, \"Estado obrigatório\"),\n  zipCode: z.string().min(8, \"CEP inválido\"),\n  description: z.string().min(20, \"Descrição deve ter pelo menos 20 caracteres\"),\n  businessHours: z.string().optional(),\n  documentType: z.enum([\"CPF\", \"CNPJ\"]),\n  documentNumber: z.string().min(11, \"Documento inválido\"),\n});\n\ntype ViewerProfileData = z.infer<typeof viewerProfileSchema>;\ntype ProviderProfileData = z.infer<typeof providerProfileSchema>;\n\nexport default function Profile() {\n  const { user, isAuthenticated, canCreateProperty } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [profileImage, setProfileImage] = useState(user?.profileImageUrl || \"\");\n  const [portfolioImages, setPortfolioImages] = useState(user?.portfolioImages || []);\n  \n  // Check if viewing another user's profile\n  const [match, params] = useRoute(\"/profile/:profileId\");\n  const profileId = params?.profileId;\n  const isViewingOtherProfile = profileId && profileId !== user?.id;\n  \n  // Fetch profile data if viewing another user's profile\n  const { data: profileData, isLoading: isLoadingProfile } = useQuery({\n    queryKey: [`/api/profiles/${profileId}`],\n    enabled: !!isViewingOtherProfile,\n  });\n  \n  // Use the appropriate user data\n  const currentUser = isViewingOtherProfile ? profileData : user;\n\n  const viewerForm = useForm<ViewerProfileData>({\n    resolver: zodResolver(viewerProfileSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      phoneNumber: user?.phoneNumber || \"\",\n      address: user?.address || \"\",\n      city: user?.city || \"\",\n      state: user?.state || \"\",\n      zipCode: user?.zipCode || \"\",\n      documentType: \"CPF\",\n      documentNumber: user?.documentNumber || \"\",\n    },\n  });\n\n  const providerForm = useForm<ProviderProfileData>({\n    resolver: zodResolver(providerProfileSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      phoneNumber: user?.phoneNumber || \"\",\n      address: user?.address || \"\",\n      city: user?.city || \"\",\n      state: user?.state || \"\",\n      zipCode: user?.zipCode || \"\",\n      description: user?.description || user?.bio || \"\",\n      businessHours: user?.businessHours || \"\",\n      documentType: (user?.documentType as \"CPF\" | \"CNPJ\") || (user?.planType === \"B\" ? \"CNPJ\" : \"CPF\"),\n      documentNumber: user?.documentNumber || \"\",\n    },\n  });\n\n  // Update form when user data changes\n  useEffect(() => {\n    if (user) {\n      providerForm.reset({\n        name: user.name || \"\",\n        email: user.email || \"\",\n        phoneNumber: user.phoneNumber || \"\",\n        address: user.address || \"\",\n        city: user.city || \"\",\n        state: user.state || \"\",\n        zipCode: user.zipCode || \"\",\n        description: user.description || user.bio || \"\",\n        businessHours: user.businessHours || \"\",\n        documentType: (user.documentType as \"CPF\" | \"CNPJ\") || (user.planType === \"B\" ? \"CNPJ\" : \"CPF\"),\n        documentNumber: user.documentNumber || \"\",\n      });\n      setProfileImage(user.profileImageUrl || \"\");\n      setPortfolioImages(user.portfolioImages || []);\n    }\n  }, [user]);\n\n  // Handle profile image upload\n  const handleProfileImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setProfileImage(result);\n        // TODO: Upload to server\n        toast({\n          title: \"Foto de perfil alterada\",\n          description: \"Sua nova foto será salva quando você salvar o perfil\",\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Handle portfolio image upload\n  const handlePortfolioImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && portfolioImages.length < 10) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setPortfolioImages(prev => [...prev, result]);\n        toast({\n          title: \"Foto adicionada ao portfólio\",\n          description: \"A foto será salva quando você salvar o perfil\",\n        });\n      };\n      reader.readAsDataURL(file);\n    } else if (portfolioImages.length >= 10) {\n      toast({\n        title: \"Limite atingido\",\n        description: \"Você pode adicionar no máximo 10 fotos ao portfólio\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Remove portfolio image\n  const removePortfolioImage = (index: number) => {\n    setPortfolioImages(prev => prev.filter((_, i) => i !== index));\n    toast({\n      title: \"Foto removida\",\n      description: \"A foto foi removida do seu portfólio\",\n    });\n  };\n\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-gray-600 mb-4\">Você precisa fazer login para acessar o perfil</p>\n            <Link href=\"/login\">\n              <Button>Fazer Login</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const onViewerSubmit = async (data: ViewerProfileData) => {\n    setIsLoading(true);\n    try {\n      const res = await apiRequest(\"PUT\", \"/api/profile\", data);\n      const response = await res.json();\n      \n      if (response.success) {\n        toast({\n          title: \"Perfil Atualizado\",\n          description: \"Suas informações foram salvas com sucesso!\",\n        });\n      } else {\n        toast({\n          title: \"Erro\",\n          description: response.message || \"Erro ao atualizar perfil\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro de conexão\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onProviderSubmit = async (data: ProviderProfileData) => {\n    setIsLoading(true);\n    try {\n      const profileData = {\n        ...data,\n        profileImageUrl: profileImage,\n        portfolioImages: portfolioImages,\n      };\n      \n      const res = await apiRequest(\"PUT\", \"/api/profile\", profileData);\n      const response = await res.json();\n      \n      if (response.success) {\n        toast({\n          title: \"Perfil Atualizado\",\n          description: \"Suas informações foram salvas com sucesso!\",\n        });\n      } else {\n        toast({\n          title: \"Erro\",\n          description: response.message || \"Erro ao atualizar perfil\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro de conexão\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderViewerProfile = () => (\n    <form onSubmit={viewerForm.handleSubmit(onViewerSubmit)} className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"w-5 h-5\" />\n            Informações Pessoais\n          </CardTitle>\n          <CardDescription>\n            Dados básicos do seu perfil\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Nome Completo</Label>\n            <Input\n              id=\"name\"\n              {...viewerForm.register(\"name\")}\n              className={viewerForm.formState.errors.name ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.name && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.name.message}</p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...viewerForm.register(\"email\")}\n              className={viewerForm.formState.errors.email ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.email && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.email.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phoneNumber\">Telefone</Label>\n            <Input\n              id=\"phoneNumber\"\n              placeholder=\"(11) 99999-9999\"\n              {...viewerForm.register(\"phoneNumber\")}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"w-5 h-5\" />\n            Endereço\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2 md:col-span-2\">\n            <Label htmlFor=\"address\">Endereço</Label>\n            <Input\n              id=\"address\"\n              {...viewerForm.register(\"address\")}\n              className={viewerForm.formState.errors.address ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.address && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.address.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"city\">Cidade</Label>\n            <Input\n              id=\"city\"\n              {...viewerForm.register(\"city\")}\n              className={viewerForm.formState.errors.city ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.city && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.city.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"state\">Estado</Label>\n            <Input\n              id=\"state\"\n              {...viewerForm.register(\"state\")}\n              className={viewerForm.formState.errors.state ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.state && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.state.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"zipCode\">CEP</Label>\n            <Input\n              id=\"zipCode\"\n              placeholder=\"00000-000\"\n              {...viewerForm.register(\"zipCode\")}\n              className={viewerForm.formState.errors.zipCode ? \"border-red-500\" : \"\"}\n            />\n            {viewerForm.formState.errors.zipCode && (\n              <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.zipCode.message}</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5\" />\n            Documentação\n          </CardTitle>\n          <CardDescription>\n            Verificação de identidade\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"documentNumber\">CPF</Label>\n              <Input\n                id=\"documentNumber\"\n                placeholder=\"000.000.000-00\"\n                {...viewerForm.register(\"documentNumber\")}\n                className={viewerForm.formState.errors.documentNumber ? \"border-red-500\" : \"\"}\n              />\n              {viewerForm.formState.errors.documentNumber && (\n                <p className=\"text-sm text-red-500\">{viewerForm.formState.errors.documentNumber.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {user.documentsVerified ? (\n              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                Documento Verificado\n              </Badge>\n            ) : (\n              <Badge variant=\"secondary\">\n                <AlertCircle className=\"w-3 h-3 mr-1\" />\n                Aguardando Verificação\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            \"Salvando...\"\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Salvar Perfil\n            </>\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n\n  const renderProviderProfile = () => (\n    <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n      <TabsList className=\"grid w-full grid-cols-4\">\n        <TabsTrigger value=\"profile\">Perfil</TabsTrigger>\n        <TabsTrigger value=\"photos\">Fotos</TabsTrigger>\n        <TabsTrigger value=\"categories\">Categorias</TabsTrigger>\n        <TabsTrigger value=\"documents\">Documentos</TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"profile\">\n        <form onSubmit={providerForm.handleSubmit(onProviderSubmit)} className=\"space-y-6\">\n          {/* Plan Status Alert */}\n          {user.planStatus !== 'active' && (\n            <Alert className=\"border-amber-200 bg-amber-50\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-amber-700\">\n                Seu plano está {user.planStatus === 'pending' ? 'pendente de pagamento' : 'inativo'}. \n                <Link href=\"/plans\" className=\"ml-2 text-amber-800 underline\">\n                  Ativar plano\n                </Link>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Informações do Prestador\n              </CardTitle>\n              <CardDescription>\n                Dados que aparecerão no seu perfil público\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nome/Empresa</Label>\n                <Input\n                  id=\"name\"\n                  {...providerForm.register(\"name\")}\n                  className={providerForm.formState.errors.name ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.name && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.name.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...providerForm.register(\"email\")}\n                  className={providerForm.formState.errors.email ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.email && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\">Telefone de Contato</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  placeholder=\"(11) 99999-9999\"\n                  {...providerForm.register(\"phoneNumber\")}\n                  className={providerForm.formState.errors.phoneNumber ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.phoneNumber && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.phoneNumber.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"businessHours\">Horário de Funcionamento</Label>\n                <Input\n                  id=\"businessHours\"\n                  placeholder=\"Seg-Sex: 8h-18h\"\n                  {...providerForm.register(\"businessHours\")}\n                />\n              </div>\n\n              <div className=\"space-y-2 md:col-span-2\">\n                <Label htmlFor=\"description\">Descrição dos Serviços</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Descreva seus serviços, experiência e diferenciais...\"\n                  {...providerForm.register(\"description\")}\n                  className={providerForm.formState.errors.description ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.description && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.description.message}</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"w-5 h-5\" />\n                Área de Atendimento\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2 md:col-span-2\">\n                <Label htmlFor=\"address\">Endereço Base</Label>\n                <Input\n                  id=\"address\"\n                  {...providerForm.register(\"address\")}\n                  className={providerForm.formState.errors.address ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.address && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.address.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">Cidade</Label>\n                <Input\n                  id=\"city\"\n                  {...providerForm.register(\"city\")}\n                  className={providerForm.formState.errors.city ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.city && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.city.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"state\">Estado</Label>\n                <Input\n                  id=\"state\"\n                  {...providerForm.register(\"state\")}\n                  className={providerForm.formState.errors.state ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.state && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.state.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"zipCode\">CEP</Label>\n                <Input\n                  id=\"zipCode\"\n                  placeholder=\"00000-000\"\n                  {...providerForm.register(\"zipCode\")}\n                  className={providerForm.formState.errors.zipCode ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.zipCode && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.zipCode.message}</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end\">\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? (\n                \"Salvando...\"\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Salvar Perfil\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </TabsContent>\n\n      <TabsContent value=\"photos\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Camera className=\"w-5 h-5\" />\n              Gerenciar Fotos\n            </CardTitle>\n            <CardDescription>\n              Adicione fotos do seu perfil e portfólio de trabalhos\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Foto de Perfil</Label>\n                <div className=\"mt-2 flex items-center gap-4\">\n                  <div className=\"w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center\">\n                    {profileImage ? (\n                      <img \n                        src={profileImage} \n                        alt=\"Perfil\" \n                        className=\"w-full h-full rounded-full object-cover\"\n                      />\n                    ) : (\n                      <User className=\"w-8 h-8 text-gray-400\" />\n                    )}\n                  </div>\n                  <div>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleProfileImageUpload}\n                      className=\"hidden\"\n                      id=\"profile-image-upload\"\n                    />\n                    <label htmlFor=\"profile-image-upload\">\n                      <Button variant=\"outline\" asChild>\n                        <span className=\"cursor-pointer\">\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Alterar Foto\n                        </span>\n                      </Button>\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label>Portfólio (até 10 fotos) - {portfolioImages.length}/10</Label>\n                <div className=\"mt-2 grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {portfolioImages.map((image, index) => (\n                    <div key={index} className=\"relative aspect-square bg-gray-100 rounded-lg overflow-hidden\">\n                      <img \n                        src={image} \n                        alt={`Portfólio ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute top-1 right-1 w-6 h-6 p-0\"\n                        onClick={() => removePortfolioImage(index)}\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                  {portfolioImages.length < 10 && (\n                    <div className=\"aspect-square bg-gray-100 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-300\">\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handlePortfolioImageUpload}\n                        className=\"hidden\"\n                        id=\"portfolio-image-upload\"\n                      />\n                      <label htmlFor=\"portfolio-image-upload\">\n                        <Button variant=\"ghost\" size=\"sm\" asChild>\n                          <span className=\"cursor-pointer flex flex-col items-center gap-2\">\n                            <Upload className=\"w-4 h-4\" />\n                            <span className=\"text-xs\">Adicionar</span>\n                          </span>\n                        </Button>\n                      </label>\n                    </div>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Adicione fotos dos seus trabalhos para mostrar a qualidade dos seus serviços\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"categories\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Categorias e Especialidades</CardTitle>\n            <CardDescription>\n              Escolha 1 categoria principal e até 3 subcategorias\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Categoria Principal</Label>\n                <div className=\"mt-2\">\n                  {user.categories && user.categories.length > 0 ? (\n                    <Badge variant=\"default\">{user.categories[0]}</Badge>\n                  ) : (\n                    <Badge variant=\"secondary\">Nenhuma categoria selecionada</Badge>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label>Subcategorias ({(user.subcategories?.length || 0)}/3)</Label>\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {user.subcategories && user.subcategories.length > 0 ? (\n                    user.subcategories.map((sub, index) => (\n                      <Badge key={index} variant=\"outline\">{sub}</Badge>\n                    ))\n                  ) : (\n                    <Badge variant=\"secondary\">Nenhuma subcategoria selecionada</Badge>\n                  )}\n                </div>\n              </div>\n\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Para alterar suas categorias, entre em contato com o suporte através do chat.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"documents\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5\" />\n              Verificação de Documentos\n            </CardTitle>\n            <CardDescription>\n              Envie seus documentos para verificação da conta\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"documentType\">Tipo de Documento</Label>\n                <Input\n                  id=\"documentType\"\n                  value={providerForm.watch(\"documentType\")}\n                  disabled\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"documentNumber\">Número do Documento</Label>\n                <Input\n                  id=\"documentNumber\"\n                  {...providerForm.register(\"documentNumber\")}\n                  className={providerForm.formState.errors.documentNumber ? \"border-red-500\" : \"\"}\n                />\n                {providerForm.formState.errors.documentNumber && (\n                  <p className=\"text-sm text-red-500\">{providerForm.formState.errors.documentNumber.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Status da Verificação</Label>\n                <div className=\"mt-2\">\n                  {user.documentsVerified ? (\n                    <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Documentos Verificados\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"secondary\">\n                      <AlertCircle className=\"w-3 h-3 mr-1\" />\n                      Aguardando Verificação\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              {!user.documentsVerified && (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Envie uma foto clara do seu documento (frente e verso) para verificação da conta.\n                    A verificação é obrigatória para prestadores de serviço.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n\n  // Show loading while fetching other user's profile\n  if (isViewingOtherProfile && (isLoadingProfile || !profileData)) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white\">\n        <div className=\"container mx-auto p-6 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Carregando perfil...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error if profile not found\n  if (isViewingOtherProfile && !profileData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white\">\n        <div className=\"container mx-auto p-6 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Perfil não encontrado</h1>\n            <p className=\"text-gray-600 mb-4\">O perfil que você está procurando não existe.</p>\n            <Link href=\"/services\">\n              <Button>Voltar aos Serviços</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render other user's profile (read-only view) - Social Media Style\n  if (isViewingOtherProfile && currentUser) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 via-white to-amber-50\">\n        {/* Hero Section with Cover Photo */}\n        <div className=\"relative\">\n          {/* Cover Photo */}\n          <div className=\"h-64 md:h-80 bg-gradient-to-r from-amber-400 via-amber-500 to-orange-500 relative overflow-hidden\">\n            <div className=\"absolute inset-0 bg-black/20\"></div>\n            <div className=\"absolute bottom-0 left-0 right-0 p-6 md:p-8\">\n              <div className=\"container mx-auto\">\n                <div className=\"flex items-end gap-6\">\n                  {/* Profile Picture */}\n                  <div className=\"relative\">\n                    <div className=\"w-24 h-24 md:w-32 md:h-32 bg-white rounded-full p-1 shadow-xl\">\n                      <div className=\"w-full h-full rounded-full overflow-hidden bg-gray-200 flex items-center justify-center\">\n                        {currentUser?.profileImageUrl ? (\n                          <img \n                            src={currentUser.profileImageUrl} \n                            alt=\"Perfil\" \n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <User className=\"w-8 h-8 md:w-12 md:h-12 text-gray-400\" />\n                        )}\n                      </div>\n                    </div>\n                    {currentUser?.documentsVerified && (\n                      <div className=\"absolute -bottom-1 -right-1 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center border-2 border-white\">\n                        <CheckCircle className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Name and Basic Info */}\n                  <div className=\"flex-1 text-white mb-2\">\n                    <h1 className=\"text-2xl md:text-4xl font-bold drop-shadow-lg\">\n                      {currentUser?.name || 'Prestador de Serviços'}\n                    </h1>\n                    <p className=\"text-lg md:text-xl text-amber-100 drop-shadow\">\n                      {currentUser?.categories?.[0] || 'Profissional'}\n                    </p>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <MapPin className=\"w-4 h-4\" />\n                      <span className=\"text-amber-100\">{currentUser?.city}, {currentUser?.state}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"absolute top-4 right-4 flex gap-2\">\n            <Link href=\"/services\">\n              <Button variant=\"secondary\" size=\"sm\" className=\"bg-white/90 hover:bg-white\">\n                Voltar aos Serviços\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Left Column - Profile Info */}\n            <div className=\"lg:col-span-1 space-y-6\">\n              {/* Contact Action */}\n              <Card className=\"border-amber-200 shadow-lg\">\n                <CardContent className=\"p-6 text-center\">\n                  <Button className=\"w-full bg-amber-500 hover:bg-amber-600 text-white shadow-lg\">\n                    <Phone className=\"w-5 h-5 mr-2\" />\n                    Entrar em Contato\n                  </Button>\n                  <p className=\"text-sm text-gray-600 mt-3\">\n                    Primeiro contato exclusivo via Hive\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* About Section */}\n              {(currentUser?.description || currentUser?.bio) ? (\n                <Card className=\"border-amber-200 shadow-lg\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <FileText className=\"w-5 h-5 text-amber-600\" />\n                      Sobre\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      {currentUser?.description || currentUser?.bio}\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : null}\n\n              {/* Specialties */}\n              {currentUser?.subcategories && currentUser.subcategories.length > 0 && (\n                <Card className=\"border-amber-200 shadow-lg\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Badge className=\"w-5 h-5 text-amber-600\" />\n                      Especialidades\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      {currentUser.subcategories.map((sub: string, index: number) => (\n                        <Badge \n                          key={index} \n                          variant=\"outline\" \n                          className=\"border-amber-300 text-amber-700 bg-amber-50\"\n                        >\n                          {sub}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Professional Info */}\n              <Card className=\"border-amber-200 shadow-lg\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <User className=\"w-5 h-5 text-amber-600\" />\n                    Informações Profissionais\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Categoria:</span>\n                    <Badge variant=\"default\" className=\"bg-amber-100 text-amber-800 border-amber-300\">\n                      {currentUser?.categories?.[0] || 'Profissional'}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Tipo de Conta:</span>\n                    <Badge variant=\"outline\" className=\"border-amber-300\">\n                      {currentUser?.planType === 'B' ? 'CNPJ Empresarial' : 'CPF Individual'}\n                    </Badge>\n                  </div>\n                  {currentUser?.businessHours && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-600\">Horário:</span>\n                      <span className=\"text-sm text-gray-800\">{currentUser.businessHours}</span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Right Column - Portfolio and Gallery */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Portfolio Gallery */}\n              {currentUser?.portfolioImages && currentUser.portfolioImages.length > 0 ? (\n                <Card className=\"border-amber-200 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-xl\">\n                      <Camera className=\"w-6 h-6 text-amber-600\" />\n                      Portfólio de Trabalhos\n                      <Badge variant=\"secondary\" className=\"ml-auto\">\n                        {currentUser.portfolioImages.length} {currentUser.portfolioImages.length === 1 ? 'foto' : 'fotos'}\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                      {currentUser.portfolioImages.map((image: string, index: number) => (\n                        <div \n                          key={index} \n                          className=\"aspect-square bg-gray-100 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 cursor-pointer group\"\n                        >\n                          <img \n                            src={image} \n                            alt={`Trabalho ${index + 1}`}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                          />\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-center text-gray-600 mt-4 text-sm\">\n                      Clique nas imagens para visualizar em tamanho maior\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card className=\"border-amber-200 shadow-lg\">\n                  <CardContent className=\"p-12 text-center\">\n                    <Camera className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">\n                      Portfólio em Construção\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      O prestador ainda não adicionou fotos dos seus trabalhos\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Stats/Achievements Section */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card className=\"border-amber-200 shadow-lg text-center\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-amber-600\">\n                      {currentUser?.documentsVerified ? '✓' : '⏳'}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {currentUser?.documentsVerified ? 'Verificado' : 'Em Análise'}\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"border-amber-200 shadow-lg text-center\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-amber-600\">\n                      {currentUser?.portfolioImages?.length || 0}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Trabalhos</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"border-amber-200 shadow-lg text-center\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-amber-600\">\n                      {currentUser?.subcategories?.length || 0}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Especialidades</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"border-amber-200 shadow-lg text-center\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-amber-600\">⭐</div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Profissional</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Contact Information */}\n              <Card className=\"border-amber-200 shadow-lg bg-gradient-to-r from-amber-50 to-orange-50\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">\n                      Interessado nos serviços?\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Entre em contato através da plataforma Hive para garantir segurança e qualidade\n                    </p>\n                    <Button className=\"bg-amber-500 hover:bg-amber-600 text-white px-8 py-3 text-lg shadow-lg\">\n                      <Phone className=\"w-5 h-5 mr-2\" />\n                      Iniciar Conversa Agora\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render own profile (editable view) \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white\">\n      <div className=\"container mx-auto p-6\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {user.userType === 'provider' ? 'Meu Perfil Profissional' : 'Meu Perfil'}\n              </h1>\n              <p className=\"text-gray-600\">\n                {user.userType === 'provider' \n                  ? 'Gerencie suas informações profissionais e apareça nas buscas'\n                  : 'Mantenha suas informações sempre atualizadas'\n                }\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-500\">Completude do Perfil</p>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-20 h-2 bg-gray-200 rounded-full\">\n                    <div \n                      className=\"h-full bg-amber-500 rounded-full transition-all\"\n                      style={{ width: `${user.completionPercentage || 0}%` }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium\">{user.completionPercentage || 0}%</span>\n                </div>\n              </div>\n\n              <Link href=\"/dashboard\">\n                <Button variant=\"outline\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Ver Dashboard\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {user.userType === 'provider' ? renderProviderProfile() : renderViewerProfile()}\n      </div>\n    </div>\n  );\n}","size_bytes":46317},"client/src/pages/profiles.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle } from \"lucide-react\";\n\ninterface UserProfile {\n  id: string;\n  documentType: 'CPF' | 'CNPJ';\n  displayName: string;\n  bio?: string;\n  profession?: string;\n  city?: string;\n  state?: string;\n  specialties: string[];\n  services: string[];\n  profileImage?: string;\n  rating: string;\n  reviewCount: number;\n  completedJobs: number;\n  responseTime: number;\n  verified: boolean;\n  available: boolean;\n  planType: string;\n  companyName?: string;\n  tradeName?: string;\n}\n\nexport default function ProfilesPage() {\n  const [documentType, setDocumentType] = useState<string>('all');\n  const [city, setCity] = useState<string>('');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: profiles, isLoading } = useQuery<UserProfile[]>({\n    queryKey: ['/api/profiles', { documentType: documentType === 'all' ? '' : documentType, city, search: searchQuery }],\n  });\n\n  const filteredProfiles = profiles?.filter((profile: UserProfile) =>\n    profile.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    profile.profession?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    profile.specialties.some(s => s.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const startChatMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      return await apiRequest(\"POST\", \"/api/chat/conversations\", {\n        providerId: providerId,\n      });\n    },\n    onSuccess: (conversation: any) => {\n      window.location.href = `/chat?conversation=${conversation.id}`;\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"401\") || error.message.includes(\"Não autorizado\")) {\n        toast({\n          title: \"Acesso Restrito\",\n          description: \"Você precisa fazer login para conversar com prestadores.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          setLocation('/auth');\n        }, 1500);\n      } else {\n        toast({\n          title: \"Erro\",\n          description: \"Não foi possível iniciar a conversa. Tente novamente.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleStartChat = (providerId: string, providerName: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login Necessário\",\n        description: `Você precisa fazer login para conversar com ${providerName}.`,\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 1500);\n      return;\n    }\n    startChatMutation.mutate(providerId);\n  };\n\n  return (\n    <div className=\"py-16 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-hive-black mb-4\">\n            Profissionais e Empresas\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-4\">\n            Encontre prestadores de serviços qualificados e empresas confiáveis em todo o Brasil\n          </p>\n          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 max-w-2xl mx-auto\">\n            <div className=\"flex items-center justify-center text-orange-800\">\n              <MessageCircle className=\"w-5 h-5 mr-2\" />\n              <span className=\"font-medium\">Primeiro contato sempre via Hive</span>\n            </div>\n            <p className=\"text-sm text-orange-700 text-center mt-1\">\n              Conecte-se através da nossa plataforma. Informações diretas podem ser compartilhadas durante o chat.\n            </p>\n          </div>\n        </div>\n\n        {/* Filtros */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Input\n                placeholder=\"Buscar profissionais...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"col-span-2\"\n              />\n              \n              <Select value={documentType} onValueChange={setDocumentType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Tipo de Perfil\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os tipos</SelectItem>\n                  <SelectItem value=\"CPF\">Pessoa Física (CPF)</SelectItem>\n                  <SelectItem value=\"CNPJ\">Empresa (CNPJ)</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Input\n                placeholder=\"Cidade\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Estatísticas */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-hive-gold mb-2\">\n                {filteredProfiles?.length || 0}\n              </div>\n              <div className=\"text-gray-600\">Perfis Encontrados</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {profiles?.filter((p: UserProfile) => p.documentType === 'CPF').length || 0}\n              </div>\n              <div className=\"text-gray-600\">Profissionais</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {profiles?.filter((p: UserProfile) => p.documentType === 'CNPJ').length || 0}\n              </div>\n              <div className=\"text-gray-600\">Empresas</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                {profiles?.filter((p: UserProfile) => p.verified).length || 0}\n              </div>\n              <div className=\"text-gray-600\">Verificados</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lista de perfis */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(9)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <div className=\"p-6 space-y-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"w-16 h-16 rounded-full\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-3 w-20\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-16 w-full\" />\n                  <div className=\"flex space-x-2\">\n                    <Skeleton className=\"h-6 w-16\" />\n                    <Skeleton className=\"h-6 w-20\" />\n                  </div>\n                  <Skeleton className=\"h-10 w-full\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : filteredProfiles?.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <i className=\"fas fa-search text-6xl text-gray-400 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">\n                Nenhum perfil encontrado\n              </h3>\n              <p className=\"text-gray-600\">\n                Tente ajustar os filtros de busca para encontrar mais resultados.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProfiles?.map((profile: UserProfile) => (\n              <Card key={profile.id} className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer group\">\n                <Link href={`/profile/${profile.id}`} className=\"block\">\n                  <div className=\"p-6\">\n                    {/* Header do cartão */}\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <Avatar className=\"w-16 h-16\">\n                        <AvatarImage src={profile.profileImage} />\n                        <AvatarFallback className=\"bg-hive-gold text-white text-lg\">\n                          {profile.displayName.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h3 className=\"font-semibold text-lg group-hover:text-hive-gold transition-colors\">\n                            {profile.displayName}\n                          </h3>\n                          {profile.verified && (\n                            <Badge className=\"bg-blue-500 hover:bg-blue-600 text-xs\">\n                              <i className=\"fas fa-check-circle mr-1\"></i>\n                              Verificado\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={profile.documentType === 'CNPJ' ? 'default' : 'secondary'}>\n                            {profile.documentType === 'CNPJ' ? 'Empresa' : 'Profissional'}\n                          </Badge>\n                          <Badge variant={profile.available ? \"outline\" : \"secondary\"} className=\"text-xs\">\n                            {profile.available ? 'Disponível' : 'Ocupado'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Profissão e localização */}\n                    {profile.profession && (\n                      <p className=\"text-gray-700 font-medium mb-2\">{profile.profession}</p>\n                    )}\n                    {profile.city && profile.state && (\n                      <p className=\"text-gray-600 text-sm mb-4 flex items-center\">\n                        <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                        {profile.city}, {profile.state}\n                      </p>\n                    )}\n\n                    {/* Bio ou nome da empresa */}\n                    {profile.documentType === 'CNPJ' && profile.companyName && (\n                      <p className=\"text-gray-700 text-sm mb-4\">\n                        <strong>Empresa:</strong> {profile.companyName}\n                      </p>\n                    )}\n                    {profile.bio && (\n                      <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n                        {profile.bio}\n                      </p>\n                    )}\n\n                    {/* Especialidades */}\n                    {profile.specialties.length > 0 && (\n                      <div className=\"mb-4\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {profile.specialties.slice(0, 3).map((specialty, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {specialty}\n                            </Badge>\n                          ))}\n                          {profile.specialties.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{profile.specialties.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Estatísticas */}\n                    <div className=\"flex items-center justify-between mb-4 text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-star text-yellow-400 mr-1\"></i>\n                        <span className=\"font-medium\">{profile.rating}</span>\n                        <span className=\"ml-1\">({profile.reviewCount})</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-briefcase mr-1\"></i>\n                        <span>{profile.completedJobs} trabalhos</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-clock mr-1\"></i>\n                        <span>{profile.responseTime}min</span>\n                      </div>\n                    </div>\n\n                    {/* Botões de ação */}\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        className=\"flex-1 bg-hive-gold hover:bg-hive-gold-dark text-white\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          e.stopPropagation();\n                          window.location.href = `/profile/${profile.id}`;\n                        }}\n                      >\n                        <i className=\"fas fa-eye mr-2\"></i>\n                        Ver Perfil\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"px-3\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          e.stopPropagation();\n                          handleStartChat(profile.id, profile.displayName);\n                        }}\n                        disabled={startChatMutation.isPending}\n                        title={!isAuthenticated ? \"Fazer login para conversar\" : \"Iniciar conversa\"}\n                      >\n                        <i className=\"fas fa-comment-dots\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </Link>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15135},"client/src/pages/properties.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport PropertyCard from \"@/components/property-card\";\nimport PropertyMapView from \"@/components/property-map-view-simple\";\nimport { type Property } from \"@shared/schema\";\n\nexport default function Properties() {\n  const [businessType, setBusinessType] = useState(\"\");\n  const [propertyType, setPropertyType] = useState(\"\");\n  const [neighborhood, setNeighborhood] = useState(\"\");\n  const [bedrooms, setBedrooms] = useState(\"\");\n  const [viewMode, setViewMode] = useState<'grid' | 'mixed'>('mixed');\n\n  const { data: properties, isLoading } = useQuery({\n    queryKey: [\"/api/properties\"],\n  });\n\n  const handleSearch = () => {\n    console.log(\"Filtrar propriedades:\", { businessType, propertyType, neighborhood, bedrooms });\n    alert(\"Sistema de filtros será implementado em breve!\");\n  };\n\n  return (\n    <div className=\"py-16 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-hive-black mb-2\">Todos os Imóveis</h1>\n              <p className=\"text-gray-600 text-lg\">Encontre o imóvel perfeito para você</p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={() => setViewMode('grid')}\n                variant={viewMode === 'grid' ? 'default' : 'outline'}\n                className={`${viewMode === 'grid' ? 'bg-hive-gold hover:bg-hive-gold-dark text-white' : 'border-hive-gold text-hive-gold hover:bg-hive-gold hover:text-white'}`}\n              >\n                <i className=\"fas fa-th-large mr-2\"></i>\n                Grade\n              </Button>\n              <Button\n                onClick={() => setViewMode('mixed')}\n                variant={viewMode === 'mixed' ? 'default' : 'outline'}\n                className={`${viewMode === 'mixed' ? 'bg-hive-gold hover:bg-hive-gold-dark text-white' : 'border-hive-gold text-hive-gold hover:bg-hive-gold hover:text-white'}`}\n              >\n                <i className=\"fas fa-map-marked-alt mr-2\"></i>\n                Mapa + Lista\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Extended Search Filters */}\n        <div className=\"bg-white p-6 rounded-xl shadow-sm mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n            <Select value={businessType} onValueChange={setBusinessType}>\n              <SelectTrigger className=\"px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold\">\n                <SelectValue placeholder=\"Tipo de negócio\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"sale\">Venda</SelectItem>\n                <SelectItem value=\"rent\">Aluguel</SelectItem>\n                <SelectItem value=\"event\">Temporada</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={propertyType} onValueChange={setPropertyType}>\n              <SelectTrigger className=\"px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold\">\n                <SelectValue placeholder=\"Tipo de imóvel\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"house\">Casa</SelectItem>\n                <SelectItem value=\"apartment\">Apartamento</SelectItem>\n                <SelectItem value=\"commercial\">Sala comercial</SelectItem>\n                <SelectItem value=\"event_hall\">Salão de festas</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={neighborhood} onValueChange={setNeighborhood}>\n              <SelectTrigger className=\"px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold\">\n                <SelectValue placeholder=\"Bairro\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"copacabana\">Copacabana</SelectItem>\n                <SelectItem value=\"ipanema\">Ipanema</SelectItem>\n                <SelectItem value=\"barra\">Barra da Tijuca</SelectItem>\n                <SelectItem value=\"centro\">Centro</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={bedrooms} onValueChange={setBedrooms}>\n              <SelectTrigger className=\"px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-hive-gold\">\n                <SelectValue placeholder=\"Quartos\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"1\">1 quarto</SelectItem>\n                <SelectItem value=\"2\">2 quartos</SelectItem>\n                <SelectItem value=\"3\">3 quartos</SelectItem>\n                <SelectItem value=\"4+\">4+ quartos</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              onClick={handleSearch}\n              className=\"bg-hive-gold hover:bg-hive-gold-dark text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-300\"\n            >\n              Buscar\n            </Button>\n          </div>\n        </div>\n\n        {/* Content based on view mode */}\n        {viewMode === 'grid' ? (\n          /* Properties Grid */\n          isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 9 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl overflow-hidden\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <div className=\"p-4 space-y-2\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(properties as Property[] || []).map((property: Property) => (\n                <PropertyCard key={property.id} property={property} />\n              ))}\n            </div>\n          )\n        ) : (\n          /* Mixed Map + List View */\n          <PropertyMapView \n            properties={(properties as Property[] || [])}\n            isLoading={isLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6760},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Star, MapPin, Phone, Users, Clock, CheckCircle, Search, Zap, Wrench, Paintbrush, TreePine, HardHat, Wind, Monitor, Hammer, Sparkles, Leaf, Shield, MessageCircle } from \"lucide-react\";\nimport ChatManager from \"@/components/chat/ChatManager\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ServiceCategory {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  icon: string;\n  providerCount: number;\n  averageRating: string;\n  featured?: boolean;\n}\n\ninterface UserProfile {\n  id: string;\n  documentType: string;\n  displayName: string;\n  bio: string;\n  profession: string;\n  city: string;\n  state: string;\n  specialties: string[];\n  services: string[];\n  profileImage: string;\n  rating: string;\n  reviewCount: number;\n  completedJobs: number;\n  responseTime: number;\n  verified: boolean;\n  available: boolean;\n  planType: string;\n  phone: string;\n  socialLinks?: {\n    whatsapp?: string;\n    instagram?: string;\n    facebook?: string;\n    website?: string;\n    linkedin?: string;\n  };\n  portfolioImages: string[];\n  companyName?: string;\n  tradeName?: string;\n  foundedYear?: number;\n  employeeCount?: number;\n  companyDescription?: string;\n  website?: string;\n}\n\nexport default function ServicesPage() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const startChatMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      return await apiRequest(\"POST\", \"/api/chat/conversations\", {\n        providerId: providerId,\n      });\n    },\n    onSuccess: (conversation: any) => {\n      window.location.href = `/chat?conversation=${conversation.id}`;\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"401\") || error.message.includes(\"Não autorizado\")) {\n        toast({\n          title: \"Acesso Restrito\",\n          description: \"Você precisa fazer login para conversar com prestadores.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          setLocation('/auth');\n        }, 1500);\n      } else {\n        toast({\n          title: \"Erro\",\n          description: \"Não foi possível iniciar a conversa. Tente novamente.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleStartChat = (providerId: string, providerName: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login Necessário\",\n        description: `Você precisa fazer login para conversar com ${providerName}.`,\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/auth');\n      }, 1500);\n      return;\n    }\n    startChatMutation.mutate(providerId);\n  };\n\n  // Função para mapear ícones das categorias\n  const getCategoryIcon = (slug: string) => {\n    const iconMap: Record<string, JSX.Element> = {\n      'eletricista': <Zap className=\"w-8 h-8\" />,\n      'encanador': <Wrench className=\"w-8 h-8\" />,\n      'pintor': <Paintbrush className=\"w-8 h-8\" />,\n      'paisagista': <TreePine className=\"w-8 h-8\" />,\n      'construcao': <HardHat className=\"w-8 h-8\" />,\n      'ar-condicionado': <Wind className=\"w-8 h-8\" />,\n      'assistencia-tecnica': <Monitor className=\"w-8 h-8\" />,\n      'marceneiro': <Hammer className=\"w-8 h-8\" />,\n      'limpeza': <Sparkles className=\"w-8 h-8\" />,\n      'jardinagem': <Leaf className=\"w-8 h-8\" />,\n      'seguranca': <Shield className=\"w-8 h-8\" />\n    };\n    return iconMap[slug] || <Wrench className=\"w-8 h-8\" />;\n  };\n  const params = useParams();\n  const categoryParam = params.category;\n  \n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>(categoryParam || 'all');\n  const [selectedCity, setSelectedCity] = useState<string>('all');\n  const [selectedRating, setSelectedRating] = useState<string>('all');\n\n  // Buscar categorias de serviço\n  const { data: categories, isLoading: categoriesLoading } = useQuery<ServiceCategory[]>({\n    queryKey: ['/api/service-categories'],\n  });\n\n  // Buscar profissionais (perfis integrados)\n  const { data: profiles, isLoading: profilesLoading } = useQuery<UserProfile[]>({\n    queryKey: ['/api/profiles'],\n  });\n\n  // Filtrar e ranquear profissionais\n  const filteredAndRankedProfiles = profiles?.filter((profile: UserProfile) => {\n    const matchesSearch = !searchQuery || \n      profile.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      profile.profession?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      profile.specialties.some(s => s.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesCategory = selectedCategory === 'all' || profile.profession === selectedCategory;\n    \n    const matchesCity = selectedCity === 'all' || profile.city.toLowerCase().includes(selectedCity.toLowerCase());\n    \n    const matchesRating = selectedRating === 'all' || parseFloat(profile.rating) >= parseFloat(selectedRating);\n    \n    return matchesSearch && matchesCategory && matchesCity && matchesRating;\n  }).sort((a, b) => {\n    // Primeiro por verificação, depois por rating, depois por trabalhos concluídos\n    if (a.verified !== b.verified) return b.verified ? 1 : -1;\n    if (parseFloat(b.rating) !== parseFloat(a.rating)) return parseFloat(b.rating) - parseFloat(a.rating);\n    return b.completedJobs - a.completedJobs;\n  });\n\n  // Agrupar por profissão/categoria\n  const groupedProfiles = filteredAndRankedProfiles?.reduce((acc, profile) => {\n    const profession = profile.profession || 'Outros';\n    if (!acc[profession]) {\n      acc[profession] = [];\n    }\n    acc[profession].push(profile);\n    return acc;\n  }, {} as Record<string, UserProfile[]>) || {};\n\n  const isLoading = categoriesLoading || profilesLoading;\n\n\n\n  return (\n    <div className=\"py-16 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-hive-black mb-4\">\n            Profissionais Especializados\n          </h1>\n          <p className=\"text-gray-600 text-lg\">\n            Encontre os melhores prestadores de serviço da sua região, ranqueados por qualidade e experiência\n          </p>\n        </div>\n\n        {/* Categorias em Destaque */}\n        {!categoryParam && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold text-hive-black mb-6\">Categorias Populares</h2>\n            {categoriesLoading ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                {[...Array(6)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 rounded-xl\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                {categories?.slice(0, 6).map((category) => (\n                  <Link key={category.id} href={`/services/${category.slug}`}>\n                    <Card className=\"h-32 hover:shadow-md transition-all cursor-pointer group bg-white\">\n                      <CardContent className=\"p-4 flex flex-col items-center justify-center h-full text-center\">\n                        <div className=\"text-2xl mb-2 group-hover:scale-110 transition-transform text-hive-gold\">\n                          {getCategoryIcon(category.slug)}\n                        </div>\n                        <h3 className=\"font-semibold text-sm text-hive-black mb-1\">{category.name}</h3>\n                        <p className=\"text-xs text-gray-500\">{category.providerCount} profissionais</p>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Filtros */}\n        <div className=\"bg-white p-6 rounded-xl shadow-sm mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar profissionais...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Categoria\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as categorias</SelectItem>\n                <SelectItem value=\"Eletricista\">Eletricista</SelectItem>\n                <SelectItem value=\"Encanador\">Encanador</SelectItem>\n                <SelectItem value=\"Pintor\">Pintor</SelectItem>\n                <SelectItem value=\"Paisagista\">Paisagista</SelectItem>\n                <SelectItem value=\"Construção Civil\">Construção Civil</SelectItem>\n                <SelectItem value=\"Ar Condicionado\">Ar Condicionado</SelectItem>\n                <SelectItem value=\"Assistência Técnica\">Assistência Técnica</SelectItem>\n                <SelectItem value=\"Marceneiro\">Marceneiro</SelectItem>\n                <SelectItem value=\"Limpeza\">Limpeza</SelectItem>\n                <SelectItem value=\"Jardinagem\">Jardinagem</SelectItem>\n                <SelectItem value=\"Serralheiro\">Serralheiro</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedCity} onValueChange={setSelectedCity}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Cidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as cidades</SelectItem>\n                <SelectItem value=\"são paulo\">São Paulo</SelectItem>\n                <SelectItem value=\"rio de janeiro\">Rio de Janeiro</SelectItem>\n                <SelectItem value=\"belo horizonte\">Belo Horizonte</SelectItem>\n                <SelectItem value=\"brasília\">Brasília</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedRating} onValueChange={setSelectedRating}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Avaliação mínima\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Qualquer avaliação</SelectItem>\n                <SelectItem value=\"4.5\">4.5+ estrelas</SelectItem>\n                <SelectItem value=\"4.0\">4.0+ estrelas</SelectItem>\n                <SelectItem value=\"3.5\">3.5+ estrelas</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button className=\"bg-hive-gold hover:bg-hive-gold-dark text-white\">\n              Filtrar\n            </Button>\n          </div>\n        </div>\n\n        {/* Estatísticas */}\n        {!isLoading && filteredAndRankedProfiles && filteredAndRankedProfiles.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold mb-2\">{filteredAndRankedProfiles.length}</div>\n                <div className=\"text-blue-100\">Profissionais Encontrados</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold mb-2\">\n                  {filteredAndRankedProfiles.filter(p => p.verified).length}\n                </div>\n                <div className=\"text-green-100\">Verificados</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-yellow-600 text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold mb-2\">\n                  {(filteredAndRankedProfiles.reduce((sum, p) => sum + parseFloat(p.rating), 0) / filteredAndRankedProfiles.length).toFixed(1)}⭐\n                </div>\n                <div className=\"text-yellow-100\">Avaliação Média</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold mb-2\">\n                  {Object.keys(groupedProfiles).length}\n                </div>\n                <div className=\"text-purple-100\">Categorias</div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Lista de Profissionais por Categoria */}\n        {isLoading ? (\n          <div className=\"space-y-8\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i}>\n                <Skeleton className=\"h-8 w-48 mb-6\" />\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(3)].map((_, j) => (\n                    <Skeleton key={j} className=\"h-80 rounded-xl\" />\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-12\">\n            {Object.entries(groupedProfiles).map(([profession, profileList]) => (\n              <div key={profession}>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-hive-black\">{profession}</h2>\n                  <Badge variant=\"secondary\" className=\"text-sm\">\n                    {profileList.length} {profileList.length === 1 ? 'profissional' : 'profissionais'}\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {profileList.map((profile) => (\n                    <Card key={profile.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                      <div className=\"relative\">\n                        <img\n                          src={profile.profileImage}\n                          alt={profile.displayName}\n                          className=\"w-full h-48 object-cover\"\n                        />\n                        {profile.verified && (\n                          <Badge className=\"absolute top-2 right-2 bg-green-500 hover:bg-green-600\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Verificado\n                          </Badge>\n                        )}\n                        {!profile.available && (\n                          <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                            <Badge variant=\"secondary\" className=\"text-white bg-red-500\">\n                              Indisponível\n                            </Badge>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h3 className=\"font-bold text-lg text-hive-black mb-1\">{profile.displayName}</h3>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {profile.documentType === 'CPF' ? 'Profissional' : 'Empresa'}\n                            </Badge>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400 mr-1\" />\n                              <span className=\"font-semibold\">{profile.rating}</span>\n                              <span className=\"text-gray-400 ml-1\">({profile.reviewCount})</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{profile.bio}</p>\n\n                        <div className=\"space-y-2 mb-4\">\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <MapPin className=\"w-4 h-4 mr-2\" />\n                            {profile.city}, {profile.state}\n                          </div>\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Users className=\"w-4 h-4 mr-2\" />\n                            {profile.completedJobs} trabalhos concluídos\n                          </div>\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Clock className=\"w-4 h-4 mr-2\" />\n                            Responde em {profile.responseTime} min\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-wrap gap-1 mb-4\">\n                          {profile.specialties && profile.specialties.length > 0 ? (\n                            <>\n                              {profile.specialties.slice(0, 3).map((specialty) => (\n                                <Badge key={specialty} variant=\"secondary\" className=\"text-xs\">\n                                  {specialty}\n                                </Badge>\n                              ))}\n                              {profile.specialties.length > 3 && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  +{profile.specialties.length - 3}\n                                </Badge>\n                              )}\n                            </>\n                          ) : (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Especialidades não informadas\n                            </Badge>\n                          )}\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button \n                            className=\"flex-1 bg-hive-gold hover:bg-hive-gold-dark text-white\"\n                            onClick={() => window.location.href = `/profile/${profile.id}`}\n                          >\n                            Ver Perfil\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => handleStartChat(profile.id, profile.displayName)}\n                            disabled={startChatMutation.isPending}\n                            className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-200\"\n                            title={!isAuthenticated ? \"Fazer login para conversar\" : \"Iniciar conversa\"}\n                          >\n                            <MessageCircle className=\"w-4 h-4 mr-1\" />\n                            {!isAuthenticated ? \"Login\" : \"Conversar\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n            \n            {Object.keys(groupedProfiles).length === 0 && !isLoading && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Users className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">Nenhum profissional encontrado</h3>\n                <p className=\"text-gray-500\">\n                  {profiles?.length ? 'Tente ajustar os filtros para encontrar mais profissionais.' : 'Carregando profissionais...'}\n                </p>\n\n              </div>\n            )}\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n}","size_bytes":20710},"client/src/components/chat/AssistantChat.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Avatar } from '@/components/ui/avatar';\nimport { Bot, X, Send, Minimize2, Maximize2, Sparkles } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ChatMessage {\n  id: string;\n  sender: 'user' | 'assistant';\n  message: string;\n  timestamp: string;\n}\n\ninterface AssistantChatProps {\n  onClose: () => void;\n}\n\nexport default function AssistantChat({ onClose }: AssistantChatProps) {\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      sender: 'assistant',\n      message: 'Olá! Sou o assistente da Hive. Como posso ajudá-lo hoje? Posso ajudar você a encontrar propriedades, prestadores de serviços ou responder suas dúvidas sobre a plataforma!',\n      timestamp: new Date().toISOString()\n    }\n  ]);\n  const [newMessage, setNewMessage] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Enviar mensagem para o assistente\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest('POST', '/api/chat', { message });\n      return response.json();\n    },\n    onSuccess: (response) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        sender: 'assistant',\n        message: response.message,\n        timestamp: response.timestamp\n      }]);\n    },\n    onError: () => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        sender: 'assistant',\n        message: 'Desculpe, ocorreu um erro. Tente novamente.',\n        timestamp: new Date().toISOString()\n      }]);\n    }\n  });\n\n  // Scroll para o final quando novas mensagens chegam\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const userMessage: ChatMessage = {\n        id: Date.now().toString(),\n        sender: 'user',\n        message: newMessage,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, userMessage]);\n      sendMessageMutation.mutate(newMessage);\n      setNewMessage('');\n    }\n  };\n\n  return (\n    <div \n      className={`fixed bottom-20 right-20 z-50 w-80 ${isMinimized ? 'h-14' : 'h-96'} transition-all duration-300 ease-in-out transform ${\n        isMinimized \n          ? 'scale-95 opacity-80' \n          : 'scale-100 opacity-100'\n      }`}\n    >\n      <Card className=\"w-full h-full shadow-xl border-2 border-blue-200\">\n        <CardHeader className=\"p-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Avatar className=\"w-7 h-7 bg-white\">\n                  <Bot className=\"w-4 h-4 text-blue-600\" />\n                </Avatar>\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white\"></div>\n              </div>\n              <div>\n                <CardTitle className=\"text-sm font-medium\">Assistente Hive</CardTitle>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-xs opacity-90\">Online</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"text-white hover:bg-blue-600 w-6 h-6 p-0 transition-transform duration-200 hover:scale-110\"\n              >\n                {isMinimized ? <Maximize2 className=\"w-3 h-3\" /> : <Minimize2 className=\"w-3 h-3\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                className=\"text-white hover:bg-blue-600 w-6 h-6 p-0\"\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        {!isMinimized && (\n          <CardContent className=\"p-0 flex flex-col h-[calc(100%-3.5rem)]\">\n            {/* Lista de mensagens */}\n            <ScrollArea className=\"flex-1 p-3\">\n              <div className=\"space-y-3\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div\n                      className={`max-w-[85%] p-2 rounded-lg text-sm ${\n                        message.sender === 'user'\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-gray-100 text-gray-900 border'\n                      }`}\n                    >\n                      {message.sender === 'assistant' && (\n                        <div className=\"flex items-center space-x-1 mb-1\">\n                          <Sparkles className=\"w-3 h-3 text-blue-600\" />\n                          <span className=\"text-xs font-medium text-blue-600\">Assistente</span>\n                        </div>\n                      )}\n                      <p>{message.message}</p>\n                      <div className=\"text-xs mt-1 opacity-70\">\n                        {(() => {\n                          try {\n                            const date = new Date(message.timestamp);\n                            return isNaN(date.getTime()) ? 'Agora' : date.toLocaleTimeString('pt-BR', {\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            });\n                          } catch {\n                            return 'Agora';\n                          }\n                        })()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {sendMessageMutation.isPending && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-gray-100 p-2 rounded-lg border\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-bounce\"></div>\n                          <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                          <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                        </div>\n                        <span className=\"text-xs text-gray-500\">Digitando...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n\n            {/* Campo de entrada de mensagem */}\n            <div className=\"p-2 border-t bg-gray-50\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Pergunte algo...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  className=\"flex-1 text-sm border-none bg-white\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white w-8 h-8 p-0\"\n                >\n                  <Send className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":8384},"client/src/components/chat/ChatManager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MessageCircle, Users, Bot, X } from 'lucide-react';\nimport { useChatContext } from '@/context/ChatContext';\nimport ChatWindow from './ChatWindow';\nimport AssistantChat from './AssistantChat';\n\ninterface ChatManagerState {\n  activeChats: Map<string, ChatWindowData>;\n  assistantOpen: boolean;\n  persistedChats: string[]; // IDs das conversas que devem ser mantidas\n}\n\ninterface ChatWindowData {\n  id: string;\n  type: 'provider' | 'assistant';\n  providerId?: string;\n  providerName?: string;\n  providerImage?: string;\n  position: number;\n  isMinimized: boolean;\n}\n\nexport default function ChatManager() {\n  const [chatState, setChatState] = useState<ChatManagerState>({\n    activeChats: new Map(),\n    assistantOpen: false,\n    persistedChats: []\n  });\n  const [unreadCount, setUnreadCount] = useState(0);\n  const { isChatPageOpen } = useChatContext();\n\n  // Buscar contagem de notificações não lidas\n  const { data: notificationData } = useQuery({\n    queryKey: ['/api', 'notifications', 'count'],\n    refetchInterval: 5000,\n  });\n\n  useEffect(() => {\n    if (notificationData && typeof notificationData === 'object' && 'count' in notificationData) {\n      setUnreadCount((notificationData as { count: number }).count);\n    }\n  }, [notificationData]);\n\n  const openProviderChat = (providerId: string, providerName: string, providerImage?: string) => {\n    setChatState(prev => {\n      const newActiveChats = new Map(prev.activeChats);\n      const newPersistedChats = [...prev.persistedChats];\n      \n      if (!newActiveChats.has(providerId)) {\n        newActiveChats.set(providerId, {\n          id: providerId,\n          type: 'provider',\n          providerId,\n          providerName,\n          providerImage,\n          position: newActiveChats.size,\n          isMinimized: false\n        });\n        \n        // Adicionar à lista de chats persistidos\n        if (!newPersistedChats.includes(providerId)) {\n          newPersistedChats.push(providerId);\n        }\n      }\n      \n      return { \n        ...prev, \n        activeChats: newActiveChats,\n        persistedChats: newPersistedChats\n      };\n    });\n  };\n\n  const openAssistant = () => {\n    setChatState(prev => {\n      // Minimizar todos os chats dos prestadores quando abrir o assistente\n      const newActiveChats = new Map(prev.activeChats);\n      for (const [id, chat] of newActiveChats) {\n        chat.isMinimized = true;\n      }\n      \n      return { \n        ...prev, \n        assistantOpen: true,\n        activeChats: newActiveChats\n      };\n    });\n  };\n\n  const closeProviderChat = (providerId: string) => {\n    setChatState(prev => {\n      const newActiveChats = new Map(prev.activeChats);\n      const newPersistedChats = prev.persistedChats.filter(id => id !== providerId);\n      \n      newActiveChats.delete(providerId);\n      \n      // Reajustar posições dos chats restantes\n      let position = 0;\n      for (const [id, chat] of newActiveChats) {\n        chat.position = position++;\n      }\n      \n      return { \n        ...prev, \n        activeChats: newActiveChats,\n        persistedChats: newPersistedChats\n      };\n    });\n  };\n\n  const closeAssistant = () => {\n    setChatState(prev => ({ ...prev, assistantOpen: false }));\n  };\n\n  // Função global para ser usada por outros componentes\n  useEffect(() => {\n    (window as any).openProviderChat = openProviderChat;\n  }, []);\n\n  // Persistir estado dos chats no localStorage\n  useEffect(() => {\n    const savedChats = localStorage.getItem('hive-chat-state');\n    if (savedChats) {\n      try {\n        const parsedChats = JSON.parse(savedChats);\n        if (parsedChats.persistedChats && parsedChats.persistedChats.length > 0) {\n          setChatState(prev => ({\n            ...prev,\n            persistedChats: parsedChats.persistedChats\n          }));\n        }\n      } catch (error) {\n        console.error('Error loading persisted chats:', error);\n      }\n    }\n  }, []);\n\n  // Salvar estado dos chats no localStorage\n  useEffect(() => {\n    if (chatState.persistedChats.length > 0) {\n      localStorage.setItem('hive-chat-state', JSON.stringify({\n        persistedChats: chatState.persistedChats\n      }));\n    }\n  }, [chatState.persistedChats]);\n\n  // Não renderizar popups se a página de chat estiver aberta\n  if (isChatPageOpen) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Sistema de bolinhas horizontais */}\n      <div className=\"fixed bottom-4 right-4 z-40\">\n        <div className=\"flex items-center space-x-3\">\n          {/* Bolinhas dos chats ativos dos prestadores */}\n          {Array.from(chatState.activeChats.entries()).map(([id, chat]: [string, ChatWindowData], index) => (\n            <div key={id} className=\"relative\">\n              <Button\n                onClick={() => {\n                  setChatState(prev => {\n                    const newActiveChats = new Map(prev.activeChats);\n                    \n                    // Fechar o assistente se estiver aberto\n                    const assistantWasOpen = prev.assistantOpen;\n                    \n                    // Minimizar todos os outros chats\n                    for (const [otherId, otherChat] of newActiveChats) {\n                      if (otherId !== id) {\n                        otherChat.isMinimized = true;\n                      }\n                    }\n                    \n                    // Alternar o estado do chat clicado\n                    const currentChat = newActiveChats.get(id);\n                    if (currentChat) {\n                      currentChat.isMinimized = !currentChat.isMinimized;\n                    }\n                    \n                    return { \n                      ...prev, \n                      activeChats: newActiveChats,\n                      assistantOpen: false // Fechar assistente quando abrir chat de prestador\n                    };\n                  });\n                }}\n                className={`rounded-full w-12 h-12 text-white shadow-lg relative transition-all duration-200 hover:scale-110 ${\n                  chat.isMinimized ? 'bg-gray-400 hover:bg-gray-500' : 'bg-hive-gold hover:bg-hive-gold-dark'\n                }`}\n              >\n                {chat.providerImage ? (\n                  <img \n                    src={chat.providerImage} \n                    alt={chat.providerName} \n                    className=\"w-8 h-8 rounded-full object-cover\"\n                  />\n                ) : (\n                  <MessageCircle className=\"w-5 h-5\" />\n                )}\n                {/* Indicador de mensagens não lidas */}\n                {unreadCount > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 w-5 h-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center p-0\">\n                    <span className=\"text-xs font-bold\">!</span>\n                  </Badge>\n                )}\n              </Button>\n              <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs text-gray-600 bg-white px-2 py-1 rounded shadow whitespace-nowrap\">\n                {chat.providerName}\n              </div>\n            </div>\n          ))}\n          \n          {/* Botão do Assistente */}\n          {!chatState.assistantOpen && (\n            <Button\n              onClick={openAssistant}\n              className=\"rounded-full w-12 h-12 bg-blue-600 hover:bg-blue-700 text-white shadow-lg relative\"\n            >\n              <Bot className=\"w-5 h-5\" />\n              <Badge className=\"absolute -top-1 -right-1 w-4 h-4 rounded-full bg-green-500 text-white text-xs flex items-center justify-center p-0\">\n                <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n              </Badge>\n            </Button>\n          )}\n          \n          {/* Botão principal de chat */}\n          <Button\n            onClick={() => {\n              if (chatState.activeChats.size === 0 && !chatState.assistantOpen) {\n                openAssistant();\n              }\n            }}\n            className=\"rounded-full w-14 h-14 bg-hive-gold hover:bg-hive-gold-dark text-white shadow-lg relative\"\n          >\n            <MessageCircle className=\"w-6 h-6\" />\n            {unreadCount > 0 && (\n              <Badge className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full bg-red-500 text-white text-xs flex items-center justify-center\">\n                {unreadCount > 99 ? '99+' : unreadCount}\n              </Badge>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Chat do Assistente */}\n      {chatState.assistantOpen && (\n        <AssistantChat onClose={closeAssistant} />\n      )}\n\n      {/* Chats dos Prestadores - Empilhados */}\n      {Array.from(chatState.activeChats.entries()).map(([id, chat]: [string, ChatWindowData]) => (\n        <ChatWindow\n          key={id}\n          providerId={chat.providerId!}\n          providerName={chat.providerName!}\n          providerImage={chat.providerImage}\n          position={chat.position}\n          totalChats={chatState.activeChats.size}\n          isMinimized={chat.isMinimized}\n          onClose={() => closeProviderChat(id)}\n          onToggleMinimize={() => {\n            setChatState(prev => {\n              const newActiveChats = new Map(prev.activeChats);\n              const currentChat = newActiveChats.get(id);\n              if (currentChat) {\n                currentChat.isMinimized = !currentChat.isMinimized;\n              }\n              return { ...prev, activeChats: newActiveChats };\n            });\n          }}\n        />\n      ))}\n    </>\n  );\n}","size_bytes":9716},"client/src/components/chat/ChatWidget.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Avatar } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { MessageCircle, X, Send, Minimize2, Maximize2 } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ChatMessage {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  message: string;\n  createdAt: string;\n  read: boolean;\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  participantIds: string[];\n  lastMessage: string | null;\n  lastMessageAt: string;\n}\n\ninterface ChatWidgetProps {\n  providerId?: string;\n  providerName?: string;\n  providerImage?: string;\n}\n\nexport default function ChatWidget({ providerId, providerName, providerImage }: ChatWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [unreadCount, setUnreadCount] = useState(0);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n\n  // Buscar ou criar conversa com o provedor\n  const createConversationMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      const response = await apiRequest('POST', '/api/chat/conversations', { providerId });\n      return response.json();\n    },\n    onSuccess: (conversation: Conversation) => {\n      setConversationId(conversation.id);\n    }\n  });\n\n  // Inicializar conversa automaticamente para o assistente\n  useEffect(() => {\n    if (!providerId && isOpen) {\n      // Para o assistente, usar ID fixo 'conv-assistant'\n      setConversationId('conv-assistant');\n    }\n  }, [providerId, isOpen]);\n\n  // Buscar mensagens da conversa - usando a mesma query key da página de chat\n  const { data: messages, refetch: refetchMessages } = useQuery<ChatMessage[]>({\n    queryKey: ['/api', 'chat', 'conversations', conversationId, 'messages'],\n    enabled: !!conversationId,\n    refetchInterval: 3000, // Atualizar a cada 3 segundos\n  });\n\n  // Enviar mensagem\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ message, receiverId }: { message: string; receiverId: string }) => {\n      if (!conversationId) throw new Error('No conversation');\n      const response = await apiRequest('POST', `/api/chat/conversations/${conversationId}/messages`, {\n        message,\n        receiverId\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage('');\n      // Invalidar com as mesmas query keys da página de chat para sincronização\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations', conversationId, 'messages'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations'] \n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    }\n  });\n\n  // Buscar contagem de notificações não lidas\n  const { data: notificationData } = useQuery({\n    queryKey: ['/api/notifications/count'],\n    refetchInterval: 5000, // Atualizar a cada 5 segundos\n  });\n\n  useEffect(() => {\n    if (notificationData && typeof notificationData === 'object' && notificationData !== null && 'count' in notificationData) {\n      setUnreadCount((notificationData as { count: number }).count);\n    }\n  }, [notificationData]);\n\n  // Scroll para o final quando novas mensagens chegam\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const handleStartChat = () => {\n    if (providerId) {\n      createConversationMutation.mutate(providerId);\n    }\n    setIsOpen(true);\n  };\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      if (providerId) {\n        // Envio para prestador\n        sendMessageMutation.mutate({\n          message: newMessage,\n          receiverId: providerId\n        });\n      } else {\n        // Envio para assistente - usar endpoint específico\n        const assistantMutation = {\n          mutationFn: async () => {\n            const response = await apiRequest('POST', '/api/chat', { message: newMessage });\n            return response.json();\n          },\n          onSuccess: () => {\n            setNewMessage('');\n            queryClient.invalidateQueries({ \n              queryKey: ['/api', 'chat', 'conversations', 'conv-assistant', 'messages'] \n            });\n          }\n        };\n        assistantMutation.mutationFn().then(assistantMutation.onSuccess);\n      }\n    }\n  };\n\n  if (!isOpen && !providerId) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"rounded-full w-14 h-14 bg-hive-gold hover:bg-hive-gold-dark text-white shadow-lg\"\n        >\n          <MessageCircle className=\"w-6 h-6\" />\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full bg-red-500 text-white text-xs flex items-center justify-center\">\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Botão para abrir o chat quando há um provedor específico */}\n      {providerId && !isOpen && (\n        <Button\n          onClick={handleStartChat}\n          className=\"bg-hive-gold hover:bg-hive-gold-dark text-white\"\n        >\n          <MessageCircle className=\"w-4 h-4 mr-2\" />\n          Conversar\n        </Button>\n      )}\n\n      {/* Widget do chat */}\n      {isOpen && (\n        <div className={`fixed bottom-4 right-4 z-50 w-96 h-[500px] ${isMinimized ? 'h-14' : ''} transition-all duration-300`}>\n          <Card className=\"w-full h-full shadow-xl\">\n            <CardHeader className=\"p-4 bg-hive-gold text-white rounded-t-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {providerImage && (\n                    <Avatar className=\"w-8 h-8\">\n                      <img src={providerImage} alt={providerName} className=\"object-cover\" />\n                    </Avatar>\n                  )}\n                  <CardTitle className=\"text-lg\">\n                    {providerName || 'Chat Hive'}\n                  </CardTitle>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                    className=\"text-white hover:bg-hive-gold-dark\"\n                  >\n                    {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"text-white hover:bg-hive-gold-dark\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n\n            {!isMinimized && (\n              <CardContent className=\"p-0 flex flex-col h-[calc(100%-4rem)]\">\n                {/* Lista de mensagens */}\n                <ScrollArea className=\"flex-1 p-4\">\n                  {messages && messages.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {messages.map((message) => (\n                        <div\n                          key={message.id}\n                          className={`flex ${(message as any).sender === 'user' || message.senderId === 'mock-user-id' || message.senderId === 'user' ? 'justify-end' : 'justify-start'}`}\n                        >\n                          <div\n                            className={`max-w-[75%] p-3 rounded-lg ${\n                              (message as any).sender === 'user' || message.senderId === 'mock-user-id' || message.senderId === 'user'\n                                ? 'bg-hive-gold text-white'\n                                : 'bg-gray-100 text-gray-900'\n                            }`}\n                          >\n                            <p className=\"text-sm\">{message.message}</p>\n                            <div className=\"text-xs mt-1 opacity-70\">\n                              {(() => {\n                                try {\n                                  const date = new Date(message.createdAt);\n                                  return isNaN(date.getTime()) ? 'Agora' : date.toLocaleTimeString('pt-BR', {\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  });\n                                } catch {\n                                  return 'Agora';\n                                }\n                              })()}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      <div ref={messagesEndRef} />\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-gray-500 mt-8\">\n                      <MessageCircle className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                      <p>Inicie a conversa!</p>\n                      <p className=\"text-sm\">Envie uma mensagem para começar o chat.</p>\n                    </div>\n                  )}\n                </ScrollArea>\n\n                {/* Campo de entrada de mensagem */}\n                <div className=\"p-4 border-t\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Digite sua mensagem...\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                      className=\"bg-hive-gold hover:bg-hive-gold-dark text-white\"\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":10901},"client/src/components/chat/ChatWindow.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Avatar } from '@/components/ui/avatar';\nimport { MessageCircle, X, Send, Minimize2, Maximize2 } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ChatMessage {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  message: string;\n  createdAt: string;\n  read: boolean;\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  participantIds: string[];\n  lastMessage: string | null;\n  lastMessageAt: string;\n}\n\ninterface ChatWindowProps {\n  providerId: string;\n  providerName: string;\n  providerImage?: string;\n  position: number;\n  totalChats: number;\n  isMinimized: boolean;\n  onClose: () => void;\n  onToggleMinimize: () => void;\n}\n\nexport default function ChatWindow({\n  providerId,\n  providerName,\n  providerImage,\n  position,\n  totalChats,\n  isMinimized,\n  onClose,\n  onToggleMinimize\n}: ChatWindowProps) {\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [newMessage, setNewMessage] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n\n  // Calcular posição do chat (empilhado verticalmente na lateral direita)\n  const rightOffset = 20;\n  const bottomOffset = 80 + (position * 410); // 80px base (espaço das bolinhas) + 410px por chat (400px altura + 10px espaço)\n\n  // Buscar ou criar conversa com o provedor\n  const createConversationMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      const response = await apiRequest('POST', '/api/chat/conversations', { providerId });\n      return response.json();\n    },\n    onSuccess: (conversation: Conversation) => {\n      setConversationId(conversation.id);\n    }\n  });\n\n  // Buscar mensagens da conversa - usando a mesma query key da página de chat\n  const { data: messages, refetch: refetchMessages } = useQuery<ChatMessage[]>({\n    queryKey: ['/api', 'chat', 'conversations', conversationId, 'messages'],\n    enabled: !!conversationId,\n    refetchInterval: 3000,\n  });\n\n  // Enviar mensagem\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ message, receiverId }: { message: string; receiverId: string }) => {\n      if (!conversationId) throw new Error('No conversation');\n      const response = await apiRequest('POST', `/api/chat/conversations/${conversationId}/messages`, {\n        message,\n        receiverId\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage('');\n      // Invalidar com as mesmas query keys da página de chat para sincronização\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations', conversationId, 'messages'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api', 'chat', 'conversations'] \n      });\n      queryClient.invalidateQueries({ queryKey: ['/api', 'notifications'] });\n    }\n  });\n\n  // Inicializar conversa ao abrir o chat\n  useEffect(() => {\n    createConversationMutation.mutate(providerId);\n  }, [providerId]);\n\n  // Scroll para o final quando novas mensagens chegam\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      sendMessageMutation.mutate({\n        message: newMessage,\n        receiverId: providerId\n      });\n    }\n  };\n\n  return (\n    <div \n      className={`fixed z-30 w-80 transition-all duration-300 ease-in-out transform ${\n        isMinimized \n          ? 'h-14 scale-95 opacity-80' \n          : 'h-96 scale-100 opacity-100'\n      }`}\n      style={{ \n        right: `${rightOffset}px`, \n        bottom: `${bottomOffset}px`\n      }}\n      data-chat-id={providerId}\n    >\n      <Card className=\"w-full h-full shadow-xl border-2 border-hive-gold/20\">\n        <CardHeader className=\"p-3 bg-hive-gold text-white rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              {providerImage && (\n                <Avatar className=\"w-7 h-7\">\n                  <img src={providerImage} alt={providerName} className=\"object-cover\" />\n                </Avatar>\n              )}\n              <CardTitle className=\"text-sm font-medium truncate\">\n                {providerName}\n              </CardTitle>\n            </div>\n            <div className=\"flex space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onToggleMinimize}\n                className=\"text-white hover:bg-hive-gold-dark w-6 h-6 p-0 transition-transform duration-200 hover:scale-110\"\n              >\n                {isMinimized ? <Maximize2 className=\"w-3 h-3\" /> : <Minimize2 className=\"w-3 h-3\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                className=\"text-white hover:bg-hive-gold-dark w-6 h-6 p-0\"\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        {!isMinimized && (\n          <CardContent className=\"p-0 flex flex-col h-[calc(100%-3.5rem)]\">\n            {/* Lista de mensagens */}\n            <ScrollArea className=\"flex-1 p-3\">\n              {messages && messages.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${(message as any).sender === 'user' || message.senderId === 'mock-user-id' || message.senderId === 'user' ? 'justify-end' : 'justify-start'}`}\n                    >\n                      <div\n                        className={`max-w-[75%] p-2 rounded-lg text-sm ${\n                          (message as any).sender === 'user' || message.senderId === 'mock-user-id' || message.senderId === 'user'\n                            ? 'bg-hive-gold text-white'\n                            : 'bg-gray-100 text-gray-900'\n                        }`}\n                      >\n                        <p>{message.message}</p>\n                        <div className=\"text-xs mt-1 opacity-70\">\n                          {(() => {\n                            try {\n                              const date = new Date(message.createdAt);\n                              return isNaN(date.getTime()) ? 'Agora' : date.toLocaleTimeString('pt-BR', {\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              });\n                            } catch {\n                              return 'Agora';\n                            }\n                          })()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  <div ref={messagesEndRef} />\n                </div>\n              ) : (\n                <div className=\"text-center text-gray-500 mt-6\">\n                  <MessageCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">Inicie a conversa!</p>\n                </div>\n              )}\n            </ScrollArea>\n\n            {/* Campo de entrada de mensagem */}\n            <div className=\"p-2 border-t\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Mensagem...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  className=\"flex-1 text-sm\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                  className=\"bg-hive-gold hover:bg-hive-gold-dark text-white w-8 h-8 p-0\"\n                >\n                  <Send className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":8501},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1404},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1229},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }","size_bytes":260},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/property-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  ArrowLeft, \n  MapPin, \n  Bed, \n  Bath, \n  Car, \n  Ruler,\n  Phone,\n  Mail,\n  MessageCircle,\n  Heart,\n  Share2,\n  Camera,\n  Eye,\n  Building,\n  Shield\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Property {\n  id: string;\n  title: string;\n  description: string;\n  price: string;\n  priceType: string;\n  propertyType: string;\n  location: string;\n  bedrooms?: number;\n  bathrooms?: number;\n  parkingSpaces?: number;\n  area?: number;\n  imageUrl: string;\n  images: string[];\n  amenities: string[];\n  agencyName: string;\n  agencyId?: string;\n  agencyPhone?: string;\n  agencyEmail?: string;\n  agencyLogo?: string;\n  status: string;\n  featured: boolean;\n  views: number;\n}\n\nexport default function PropertyDetail() {\n  const [match, params] = useRoute(\"/property/:id\");\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [isLiked, setIsLiked] = useState(false);\n  const queryClient = useQueryClient();\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: property, isLoading } = useQuery<Property>({\n    queryKey: [\"/api/properties\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const updateViewsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/properties/${params?.id}/view`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\", params?.id] });\n    },\n  });\n\n  const startChatMutation = useMutation({\n    mutationFn: async () => {\n      if (!isAuthenticated) {\n        setLocation('/login');\n        return;\n      }\n      \n      if (!property?.agencyId) {\n        throw new Error(\"Informações da imobiliária não disponíveis\");\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/conversations\", {\n        participantId: property.agencyId,\n        participantType: \"provider\",\n        initialMessage: `Olá! Tenho interesse no imóvel \"${property.title}\" em ${property.location}.`\n      });\n      \n      return response.json();\n    },\n    onSuccess: (conversation) => {\n      if (conversation) {\n        toast({\n          title: \"Conversa iniciada!\",\n          description: \"Você será redirecionado para o chat.\",\n        });\n        setTimeout(() => {\n          setLocation('/chat');\n        }, 1000);\n      }\n    },\n    onError: (error) => {\n      console.error(\"Error starting chat:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível iniciar a conversa. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartChat = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login necessário\",\n        description: \"Faça login para conversar com a imobiliária.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation('/login');\n      }, 1500);\n      return;\n    }\n    \n    startChatMutation.mutate();\n  };\n\n  useEffect(() => {\n    if (property && !updateViewsMutation.data) {\n      updateViewsMutation.mutate();\n    }\n  }, [property]);\n\n  if (!match) return null;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4 w-1/4\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <div className=\"h-96 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[1, 2, 3, 4].map((i) => (\n                    <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n                <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!property) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Imóvel não encontrado</h2>\n          <p className=\"text-gray-600 mb-4\">O imóvel que você está procurando não existe ou foi removido.</p>\n          <Link href=\"/properties\">\n            <Button>Voltar aos imóveis</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const formatPrice = (price: string, type: string) => {\n    const formatted = new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n    \n    if (type === \"rent\") return `${formatted}/mês`;\n    if (type === \"event\") return `${formatted}/evento`;\n    return formatted;\n  };\n\n  const getPropertyTypeLabel = (type: string) => {\n    const types: Record<string, string> = {\n      house: \"Casa\",\n      apartment: \"Apartamento\",\n      commercial: \"Sala Comercial\",\n      event_hall: \"Salão de Festas\",\n    };\n    return types[type] || type;\n  };\n\n  const allImages = [property.imageUrl, ...(property.images || [])];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Link href=\"/properties\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Voltar aos imóveis\n            </Button>\n          </Link>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Heart className={`w-4 h-4 mr-2 ${isLiked ? 'fill-red-500 text-red-500' : ''}`} \n                     onClick={() => setIsLiked(!isLiked)} />\n              Favoritar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Compartilhar\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Images and Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Image Gallery */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"relative\">\n                  <img\n                    src={allImages[selectedImageIndex]}\n                    alt={property.title}\n                    className=\"w-full h-96 object-cover rounded-t-lg\"\n                  />\n                  <div className=\"absolute top-4 right-4 bg-black/50 text-white px-2 py-1 rounded text-sm flex items-center\">\n                    <Camera className=\"w-4 h-4 mr-1\" />\n                    {selectedImageIndex + 1} / {allImages.length}\n                  </div>\n                  <div className=\"absolute bottom-4 left-4 flex items-center space-x-2\">\n                    <Badge variant=\"secondary\">\n                      {getPropertyTypeLabel(property.propertyType)}\n                    </Badge>\n                    {property.featured && (\n                      <Badge className=\"bg-hive-gold\">Destaque</Badge>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Thumbnail Gallery */}\n                <div className=\"p-4 grid grid-cols-6 gap-2\">\n                  {allImages.map((image, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setSelectedImageIndex(index)}\n                      className={`relative h-16 rounded overflow-hidden border-2 transition-all ${\n                        selectedImageIndex === index ? 'border-hive-gold' : 'border-gray-200'\n                      }`}\n                    >\n                      <img\n                        src={image}\n                        alt={`${property.title} ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Property Information */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-2xl mb-2\">{property.title}</CardTitle>\n                    <div className=\"flex items-center text-gray-600 mb-2\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      {property.location}\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      {property.views} visualizações\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-3xl font-bold text-hive-gold\">\n                      {formatPrice(property.price, property.priceType)}\n                    </div>\n                    <Badge variant={property.status === \"available\" ? \"default\" : \"secondary\"}>\n                      {property.status === \"available\" ? \"Disponível\" : \"Indisponível\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                {/* Property Features */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  {property.bedrooms && (\n                    <div className=\"flex items-center\">\n                      <Bed className=\"w-5 h-5 text-hive-gold mr-2\" />\n                      <span className=\"text-sm\">{property.bedrooms} quartos</span>\n                    </div>\n                  )}\n                  {property.bathrooms && (\n                    <div className=\"flex items-center\">\n                      <Bath className=\"w-5 h-5 text-hive-gold mr-2\" />\n                      <span className=\"text-sm\">{property.bathrooms} banheiros</span>\n                    </div>\n                  )}\n                  {property.parkingSpaces && (\n                    <div className=\"flex items-center\">\n                      <Car className=\"w-5 h-5 text-hive-gold mr-2\" />\n                      <span className=\"text-sm\">{property.parkingSpaces} vagas</span>\n                    </div>\n                  )}\n                  {property.area && (\n                    <div className=\"flex items-center\">\n                      <Ruler className=\"w-5 h-5 text-hive-gold mr-2\" />\n                      <span className=\"text-sm\">{property.area}m²</span>\n                    </div>\n                  )}\n                </div>\n\n                <Separator className=\"my-6\" />\n\n                {/* Description */}\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Descrição</h3>\n                  <p className=\"text-gray-700 leading-relaxed\">{property.description}</p>\n                </div>\n\n                {/* Amenities */}\n                {property.amenities && property.amenities.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h3 className=\"text-lg font-semibold mb-3\">Comodidades</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {property.amenities.map((amenity, index) => (\n                        <Badge key={index} variant=\"outline\">{amenity}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Contact and Agency Info */}\n          <div className=\"space-y-6\">\n            {/* Agency Contact Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Building className=\"w-5 h-5 mr-2\" />\n                  Imobiliária\n                </CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-12 h-12\">\n                    <AvatarImage \n                      src={property.agencyLogo || \"/placeholder-agency.png\"} \n                      alt={property.agencyName} \n                    />\n                    <AvatarFallback>\n                      {property.agencyName.substring(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h4 className=\"font-semibold\">{property.agencyName}</h4>\n                    <div className=\"flex items-center text-sm text-green-600\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Imobiliária verificada\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-3\">\n                  <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                    <div className=\"flex items-center text-sm text-orange-800\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      <span className=\"font-medium\">Primeiro contato via Hive</span>\n                    </div>\n                    <p className=\"text-xs text-orange-700 mt-1\">\n                      Inicie a conversa conosco através da plataforma. Informações de contato direto serão compartilhadas durante o chat se necessário.\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-3 pt-4\">\n                  <Button \n                    onClick={handleStartChat}\n                    disabled={startChatMutation.isPending}\n                    className=\"bg-hive-gold hover:bg-hive-gold-dark\"\n                    size=\"lg\"\n                  >\n                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                    {startChatMutation.isPending ? \"Iniciando...\" : \n                     !isAuthenticated ? \"Fazer login para conversar\" : \"Iniciar conversa\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Ações rápidas</CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <MapPin className=\"w-4 h-4 mr-2\" />\n                  Ver no mapa\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Agendar visita\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Share2 className=\"w-4 h-4 mr-2\" />\n                  Compartilhar imóvel\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Property Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Estatísticas do imóvel</CardTitle>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Código do imóvel:</span>\n                    <span className=\"font-mono text-sm\">{property.id.slice(0, 8)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Visualizações:</span>\n                    <span>{property.views}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Status:</span>\n                    <Badge variant={property.status === \"available\" ? \"default\" : \"secondary\"}>\n                      {property.status === \"available\" ? \"Disponível\" : \"Indisponível\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17177},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport type { AuthUser } from \"@shared/auth-schema\";\n\ninterface AuthState {\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport function useAuth() {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    isLoading: true,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      // Check if we have a session stored\n      const sessionId = localStorage.getItem(\"hive_session\");\n      const storedUser = localStorage.getItem(\"hive_user\");\n\n      if (!sessionId || !storedUser) {\n        setAuthState({\n          user: null,\n          isLoading: false,\n          isAuthenticated: false,\n        });\n        return;\n      }\n\n      // Verify session with server\n      const res = await fetch(\"/api/auth/me\", {\n        headers: {\n          Authorization: `Bearer ${sessionId}`,\n        },\n      });\n      \n      if (!res.ok) {\n        throw new Error(\"Session invalid\");\n      }\n      \n      const response = await res.json();\n\n      if (response.user) {\n        // Update localStorage with fresh user data\n        localStorage.setItem(\"hive_user\", JSON.stringify(response.user));\n        setAuthState({\n          user: response.user,\n          isLoading: false,\n          isAuthenticated: true,\n        });\n      } else {\n        // Session invalid, clear storage\n        localStorage.removeItem(\"hive_session\");\n        localStorage.removeItem(\"hive_user\");\n        setAuthState({\n          user: null,\n          isLoading: false,\n          isAuthenticated: false,\n        });\n      }\n    } catch (error) {\n      // Session invalid or network error\n      localStorage.removeItem(\"hive_session\");\n      localStorage.removeItem(\"hive_user\");\n      setAuthState({\n        user: null,\n        isLoading: false,\n        isAuthenticated: false,\n      });\n    }\n  };\n\n  const login = (user: AuthUser, sessionId: string) => {\n    localStorage.setItem(\"hive_session\", sessionId);\n    localStorage.setItem(\"hive_user\", JSON.stringify(user));\n    setAuthState({\n      user,\n      isLoading: false,\n      isAuthenticated: true,\n    });\n  };\n\n  const refreshAuth = async () => {\n    setAuthState(prev => ({ ...prev, isLoading: true }));\n    await checkAuth();\n  };\n\n  const logout = async () => {\n    try {\n      const sessionId = localStorage.getItem(\"hive_session\");\n      if (sessionId) {\n        await fetch(\"/api/auth/logout\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${sessionId}`,\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      localStorage.removeItem(\"hive_session\");\n      localStorage.removeItem(\"hive_user\");\n      setAuthState({\n        user: null,\n        isLoading: false,\n        isAuthenticated: false,\n      });\n    }\n  };\n\n  const canCreateProperty = () => {\n    if (!authState.user || authState.user.userType !== \"provider\") {\n      return false;\n    }\n\n    if (authState.user.planStatus !== \"active\") {\n      return false;\n    }\n\n    return authState.user.categories?.includes(\"imobiliaria\") || false;\n  };\n\n  return {\n    ...authState,\n    login,\n    logout,\n    canCreateProperty,\n    refresh: refreshAuth,\n  };\n}","size_bytes":3313},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginData } from \"@shared/auth-schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, LogIn } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      const response = await res.json();\n      \n      if (response.success && response.sessionId) {\n        // Store session\n        localStorage.setItem(\"hive_session\", response.sessionId);\n        localStorage.setItem(\"hive_user\", JSON.stringify(response.user));\n        \n        // Redirect to home\n        setLocation(\"/\");\n      } else {\n        setError(response.message || \"Erro no login\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"Erro de conexão\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-r from-amber-400 to-amber-600 rounded-xl flex items-center justify-center\">\n            <LogIn className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Entrar no Hive\n          </CardTitle>\n          <CardDescription>\n            Entre na sua conta para acessar a plataforma\n          </CardDescription>\n        </CardHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                {...form.register(\"email\")}\n                className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Sua senha\"\n                  {...form.register(\"password\")}\n                  className={form.formState.errors.password ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n          </CardContent>\n\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Não tem uma conta?{\" \"}\n                <Link href=\"/register\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Cadastre-se como visualizador\n                </Link>\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                É prestador de serviços?{\" \"}\n                <Link href=\"/register-provider\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Cadastre sua empresa\n                </Link>\n              </p>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","size_bytes":5391},"client/src/pages/register-provider.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { providerRegistrationSchema, type ProviderRegistrationData } from \"@shared/auth-schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, Building2, Users, Crown } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst serviceCategories = [\n  \"eletricista\", \"encanador\", \"pintor\", \"limpeza\", \"jardinagem\", \n  \"marcenaria\", \"serralheria\", \"imobiliaria\"\n];\n\nexport default function RegisterProvider() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n\n  const form = useForm<ProviderRegistrationData>({\n    resolver: zodResolver(providerRegistrationSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      documentType: \"CPF\",\n      documentNumber: \"\",\n      speciality: \"\",\n      description: \"\",\n      location: \"\",\n      categories: [],\n      phone: \"\",\n      planType: \"A\",\n    },\n  });\n\n  const planType = form.watch(\"planType\");\n  const documentType = form.watch(\"documentType\");\n\n  const onSubmit = async (data: ProviderRegistrationData) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const res = await apiRequest(\"POST\", \"/api/auth/register-provider\", {\n        ...data,\n        categories: selectedCategories,\n      });\n      const response = await res.json();\n      \n      if (response.success && response.sessionId) {\n        // Store session\n        localStorage.setItem(\"hive_session\", response.sessionId);\n        localStorage.setItem(\"hive_user\", JSON.stringify(response.user));\n        \n        setSuccess(\"Cadastro realizado! Agora complete o pagamento do seu plano para ativar a conta.\");\n        \n        setTimeout(() => {\n          setLocation(\"/plans\");\n        }, 2000);\n      } else {\n        setError(response.message || \"Erro no cadastro\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"Erro de conexão\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCategoryChange = (category: string, checked: boolean) => {\n    if (checked) {\n      setSelectedCategories([...selectedCategories, category]);\n    } else {\n      setSelectedCategories(selectedCategories.filter(c => c !== category));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-r from-amber-400 to-amber-600 rounded-xl flex items-center justify-center\">\n            <Building2 className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Cadastrar como Prestador\n          </CardTitle>\n          <CardDescription>\n            Crie sua conta profissional e comece a receber clientes\n          </CardDescription>\n        </CardHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-6\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {success && (\n              <Alert className=\"border-green-200 bg-green-50 text-green-800\">\n                <AlertDescription>{success}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* Plan Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className={`p-4 border rounded-lg cursor-pointer transition-all ${planType === \"A\" ? \"border-amber-500 bg-amber-50\" : \"border-gray-200\"}`}>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    id=\"planA\"\n                    {...form.register(\"planType\")}\n                    value=\"A\"\n                    className=\"text-amber-600\"\n                  />\n                  <Users className=\"w-5 h-5 text-amber-600\" />\n                  <div>\n                    <Label htmlFor=\"planA\" className=\"font-semibold cursor-pointer\">Plano A - Autônomos</Label>\n                    <p className=\"text-sm text-gray-600\">R$ 49/mês - Ideal para CPF</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className={`p-4 border rounded-lg cursor-pointer transition-all ${planType === \"B\" ? \"border-amber-500 bg-amber-50\" : \"border-gray-200\"}`}>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    id=\"planB\"\n                    {...form.register(\"planType\")}\n                    value=\"B\"\n                    className=\"text-amber-600\"\n                  />\n                  <Crown className=\"w-5 h-5 text-amber-600\" />\n                  <div>\n                    <Label htmlFor=\"planB\" className=\"font-semibold cursor-pointer\">Plano B - Empresas</Label>\n                    <p className=\"text-sm text-gray-600\">R$ 149/mês - Ideal para CNPJ</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Basic Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nome/Razão Social</Label>\n                <Input\n                  id=\"name\"\n                  placeholder={planType === \"A\" ? \"Seu nome completo\" : \"Razão social da empresa\"}\n                  {...form.register(\"name\")}\n                  className={form.formState.errors.name ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"contato@empresa.com\"\n                  {...form.register(\"email\")}\n                  className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Mínimo 6 caracteres\"\n                  {...form.register(\"password\")}\n                  className={form.formState.errors.password ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            {/* Document Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"documentType\">Tipo de Documento</Label>\n                <Select onValueChange={(value) => form.setValue(\"documentType\", value as \"CPF\" | \"CNPJ\")}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o tipo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CPF\">CPF (Pessoa Física)</SelectItem>\n                    <SelectItem value=\"CNPJ\">CNPJ (Pessoa Jurídica)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"documentNumber\">{documentType}</Label>\n                <Input\n                  id=\"documentNumber\"\n                  placeholder={documentType === \"CPF\" ? \"000.000.000-00\" : \"00.000.000/0001-00\"}\n                  {...form.register(\"documentNumber\")}\n                  className={form.formState.errors.documentNumber ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.documentNumber && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.documentNumber.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"speciality\">Especialidade</Label>\n                <Input\n                  id=\"speciality\"\n                  placeholder=\"Ex: Instalações elétricas residenciais\"\n                  {...form.register(\"speciality\")}\n                  className={form.formState.errors.speciality ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.speciality && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.speciality.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Telefone</Label>\n                <Input\n                  id=\"phone\"\n                  placeholder=\"(11) 99999-9999\"\n                  {...form.register(\"phone\")}\n                  className={form.formState.errors.phone ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">Localização</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Cidade, Estado\"\n                {...form.register(\"location\")}\n                className={form.formState.errors.location ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.location && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.location.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Descrição</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Conte sobre sua experiência, serviços oferecidos, diferenciais...\"\n                {...form.register(\"description\")}\n                className={form.formState.errors.description ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.description && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.description.message}</p>\n              )}\n            </div>\n\n            {/* Categories */}\n            <div className=\"space-y-2\">\n              <Label>Categorias de Serviços</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                {serviceCategories.map((category) => (\n                  <div key={category} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={category}\n                      checked={selectedCategories.includes(category)}\n                      onCheckedChange={(checked) => handleCategoryChange(category, !!checked)}\n                    />\n                    <Label htmlFor={category} className=\"text-sm capitalize cursor-pointer\">\n                      {category}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              {selectedCategories.length === 0 && (\n                <p className=\"text-sm text-red-500\">Selecione pelo menos uma categoria</p>\n              )}\n            </div>\n          </CardContent>\n\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700\"\n              disabled={isLoading || selectedCategories.length === 0}\n            >\n              {isLoading ? \"Cadastrando...\" : \"Cadastrar e escolher plano\"}\n            </Button>\n\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Já tem uma conta?{\" \"}\n                <Link href=\"/login\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Entrar\n                </Link>\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                Quer apenas navegar?{\" \"}\n                <Link href=\"/register\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Criar conta gratuita\n                </Link>\n              </p>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","size_bytes":14250},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { registerSchema, type RegisterData } from \"@shared/auth-schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, UserPlus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const form = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      userType: \"viewer\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterData) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const res = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      const response = await res.json();\n      \n      if (response.success && response.sessionId) {\n        // Store session\n        localStorage.setItem(\"hive_session\", response.sessionId);\n        localStorage.setItem(\"hive_user\", JSON.stringify(response.user));\n        \n        setSuccess(\"Conta criada com sucesso! Redirecionando...\");\n        \n        setTimeout(() => {\n          setLocation(\"/\");\n        }, 1500);\n      } else {\n        setError(response.message || \"Erro no cadastro\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"Erro de conexão\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-r from-amber-400 to-amber-600 rounded-xl flex items-center justify-center\">\n            <UserPlus className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Criar Conta Gratuita\n          </CardTitle>\n          <CardDescription>\n            Crie sua conta para navegar e descobrir propriedades e serviços\n          </CardDescription>\n        </CardHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {success && (\n              <Alert className=\"border-green-200 bg-green-50 text-green-800\">\n                <AlertDescription>{success}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Nome completo</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                {...form.register(\"name\")}\n                className={form.formState.errors.name ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                {...form.register(\"email\")}\n                className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Mínimo 6 caracteres\"\n                  {...form.register(\"password\")}\n                  className={form.formState.errors.password ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-500\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <div className=\"rounded-lg bg-amber-50 p-3 border border-amber-200\">\n              <p className=\"text-sm text-amber-800\">\n                <strong>Conta Gratuita:</strong> Você poderá navegar, descobrir propriedades e contatar prestadores de serviços.\n              </p>\n            </div>\n          </CardContent>\n\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Criando conta...\" : \"Criar conta gratuita\"}\n            </Button>\n\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Já tem uma conta?{\" \"}\n                <Link href=\"/login\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Entrar\n                </Link>\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                É prestador de serviços?{\" \"}\n                <Link href=\"/register-provider\" className=\"text-amber-600 hover:text-amber-700 font-medium\">\n                  Cadastre sua empresa\n                </Link>\n              </p>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","size_bytes":6720},"shared/auth-schema.ts":{"content":"import { z } from \"zod\";\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n});\n\n// Register schema for viewers (free users)\nexport const registerSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  userType: z.literal(\"viewer\"),\n});\n\n// Provider registration schema (requires plan subscription)\nexport const providerRegistrationSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  documentType: z.enum([\"CPF\", \"CNPJ\"]),\n  documentNumber: z.string().min(11, \"Documento inválido\"),\n  speciality: z.string().min(5, \"Especialidade deve ser mais detalhada\"),\n  description: z.string().min(20, \"Descrição deve ter pelo menos 20 caracteres\"),\n  location: z.string().min(5, \"Localização inválida\"),\n  categories: z.array(z.string()).min(1, \"Selecione pelo menos uma categoria\"),\n  phone: z.string().min(10, \"Telefone inválido\"),\n  planType: z.enum([\"A\", \"B\"]),\n});\n\n// Property creation schema (only for real estate providers)\nexport const createPropertySchema = z.object({\n  title: z.string().min(5, \"Título muito curto\"),\n  description: z.string().min(20, \"Descrição deve ter pelo menos 20 caracteres\"),\n  price: z.string().min(1, \"Preço obrigatório\"),\n  priceType: z.enum([\"sale\", \"rent\", \"event\"]),\n  propertyType: z.enum([\"apartment\", \"house\", \"commercial\", \"event_hall\"]),\n  location: z.string().min(5, \"Localização inválida\"),\n  bedrooms: z.number().optional(),\n  bathrooms: z.number().min(1, \"Pelo menos 1 banheiro\"),\n  parkingSpaces: z.number().optional(),\n  area: z.number().min(1, \"Área obrigatória\"),\n  imageUrl: z.string().url(\"URL da imagem inválida\"),\n  images: z.array(z.string().url()).default([]),\n  amenities: z.array(z.string()).default([]),\n});\n\n// Inferred types\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type ProviderRegistrationData = z.infer<typeof providerRegistrationSchema>;\nexport type CreatePropertyData = z.infer<typeof createPropertySchema>;\n\n// User types\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  userType: \"viewer\" | \"provider\";\n  isActive: boolean;\n  categories?: string[];\n  subcategories?: string[];\n  description?: string;\n  phoneNumber?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  profileImage?: string;\n  profileImageUrl?: string;\n  portfolioImages?: string[];\n  bio?: string;\n  businessHours?: string;\n  rating?: string;\n  reviewCount?: number;\n  isVerified?: boolean;\n  planType?: \"A\" | \"B\";\n  providerPlan?: \"A\" | \"B\";\n  planStatus?: \"inactive\" | \"pending\" | \"active\";\n  stripeCustomerId?: string;\n  stripeSubscriptionId?: string;\n  completionPercentage?: number;\n  documentsVerified?: boolean;\n  documentType?: string;\n  documentNumber?: string;\n  provider?: {\n    id: string;\n    categories: string[];\n    planType: string;\n    planActive: boolean;\n    verified: boolean;\n  };\n}\n\nexport interface LoginResponse {\n  success: boolean;\n  user?: AuthUser;\n  message?: string;\n}","size_bytes":3419},"client/src/components/auth-status.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { User, LogOut, LogIn, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function AuthStatus() {\n  const { user, isAuthenticated, isLoading, logout } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"w-8 h-8 border-2 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return (\n      <Button size=\"sm\" asChild className=\"bg-amber-600 hover:bg-amber-700 text-white\">\n        <Link href=\"/auth\">\n          <LogIn className=\"w-4 h-4 mr-2\" />\n          Entrar\n        </Link>\n      </Button>\n    );\n  }\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2 text-amber-600 border-amber-600 hover:bg-amber-50\">\n          <User className=\"w-4 h-4\" />\n          Perfil\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\" align=\"end\">\n        <div className=\"space-y-3\">\n          <div>\n            <Link href=\"/dashboard\" className=\"hover:text-amber-600 transition-colors\">\n              <p className=\"font-medium cursor-pointer\">{user?.name}</p>\n            </Link>\n            <p className=\"text-sm text-gray-600\">{user?.email}</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant={user?.userType === \"provider\" ? \"default\" : \"secondary\"}>\n                {user?.userType === \"provider\" ? \"Prestador\" : \"Visualizador\"}\n              </Badge>\n              {user?.planType && (\n                <Badge variant={user.planStatus === \"active\" ? \"default\" : \"secondary\"}>\n                  Plano {user.planType} - {user.planStatus === \"active\" ? \"Ativo\" : \"Inativo\"}\n                </Badge>\n              )}\n            </div>\n            \n            {user?.userType === \"provider\" && (\n              <div className=\"text-sm\">\n                <p className=\"text-gray-600 mb-1\">Status da Conta:</p>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={user.isVerified ? \"default\" : \"outline\"}>\n                    {user.isVerified ? \"Verificada\" : \"Pendente\"}\n                  </Badge>\n                  <span className=\"text-xs text-gray-500\">\n                    {user.completionPercentage}% completo\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2 pt-2 border-t\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n              <Link href=\"/dashboard\">\n                <Home className=\"w-4 h-4 mr-2\" />\n                Acessar Painel\n              </Link>\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"w-full\" \n              onClick={logout}\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Sair\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":3277},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  User, \n  Home, \n  CreditCard, \n  FileText, \n  Star, \n  MapPin,\n  Camera,\n  Settings,\n  Plus,\n  TrendingUp,\n  Users,\n  Calendar,\n  Crown,\n  CheckCircle,\n  BarChart3\n} from \"lucide-react\";\nimport { ProfileProgressTracker } from \"@/components/ProfileProgressTracker\";\nimport { RealEstateDashboard } from \"@/components/RealEstateDashboard\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading, canCreateProperty } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-gray-600 mb-4\">Você precisa fazer login para acessar o dashboard</p>\n            <Link href=\"/auth\">\n              <Button>Fazer Login</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // PRESTADOR ONBOARDING - Guia o primeiro cadastro\n  const renderProviderOnboarding = () => (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-20 h-20 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <Crown className=\"h-10 w-10 text-amber-600\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Bem-vindo ao {user.planType === \"A\" ? \"BE HIVE\" : \"HIVE GOLD\"}!\n        </h2>\n        <p className=\"text-gray-600 text-lg mb-8\">\n          Complete seu cadastro para começar a oferecer seus serviços\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <ProfileProgressTracker user={user} />\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>🎯 Dica de Sucesso</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Perfis completos recebem até <strong>5x mais contatos</strong> de clientes.\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm text-green-600\">\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Foto profissional\n              </div>\n              <div className=\"flex items-center text-sm text-green-600\">\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Portfólio com exemplos\n              </div>\n              <div className=\"flex items-center text-sm text-green-600\">\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Biografia detalhada\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {user.planType === \"B\" && (\n        <Card className=\"bg-gradient-to-br from-amber-50 to-yellow-50 border-amber-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-amber-800\">\n              <Crown className=\"h-5 w-5\" />\n              Recursos Exclusivos HIVE GOLD\n            </CardTitle>\n            <CardDescription className=\"text-amber-700\">\n              Funcionalidades premium para empresas\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-amber-600\" />\n              <span className=\"text-amber-800\">Cadastro de propriedades (imobiliárias)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-amber-600\" />\n              <span className=\"text-amber-800\">Relatórios avançados</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-amber-600\" />\n              <span className=\"text-amber-800\">Gerenciamento de equipe</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-amber-600\" />\n              <span className=\"text-amber-800\">Suporte prioritário</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  // PRESTADOR DASHBOARD COMPLETO - Após completar o cadastro\n  const renderProviderDashboard = () => {\n    const isCompany = user.planType === \"B\";\n    \n    return (\n      <div className=\"space-y-6\">\n        {/* Provider Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Plano Ativo</CardTitle>\n              <Crown className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold text-amber-600\">\n                {user.planType === \"A\" ? \"BE HIVE\" : \"HIVE GOLD\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {user.planType === \"A\" ? \"CPF - R$ 29/mês\" : \"CNPJ - R$ 59/mês\"}\n              </p>\n              <Badge variant={user.planStatus === \"active\" ? \"default\" : \"secondary\"} className=\"mt-2\">\n                {user.planStatus === \"active\" ? \"Ativo\" : \"Inativo\"}\n              </Badge>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Perfil</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">{user.completionPercentage}%</p>\n              <p className=\"text-xs text-muted-foreground\">Completo</p>\n              <Link href=\"/profile\">\n                <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Editar Perfil\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Visualizações</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">0</p>\n              <p className=\"text-xs text-muted-foreground\">Este mês</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Contatos</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">0</p>\n              <p className=\"text-xs text-muted-foreground\">Solicitações</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Provider Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Ações Rápidas</CardTitle>\n              <CardDescription>Gerencie seu perfil e serviços</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/profile\">\n                <Button className=\"w-full justify-start\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Editar Perfil Completo\n                </Button>\n              </Link>\n              \n              <Button className=\"w-full justify-start\" variant=\"outline\">\n                <Camera className=\"w-4 h-4 mr-2\" />\n                Gerenciar Fotos de Serviços\n              </Button>\n              \n              <Button className=\"w-full justify-start\" variant=\"outline\">\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                Atualizar Localização\n              </Button>\n            </CardContent>\n          </Card>\n\n          {user?.categories?.includes('imobiliaria') ? (\n            <Card>\n              <CardHeader>\n                <CardTitle>🏢 Painel Imobiliário</CardTitle>\n                <CardDescription>Gerencie seu portfólio de imóveis</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"#properties-section\">\n                  <Button className=\"w-full justify-start\">\n                    <Home className=\"w-4 h-4 mr-2\" />\n                    Gerenciar Imóveis\n                  </Button>\n                </Link>\n                \n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Novo Imóvel\n                </Button>\n                \n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Relatórios de Vendas\n                </Button>\n              </CardContent>\n            </Card>\n          ) : isCompany && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Funcionalidades Empresariais</CardTitle>\n                <CardDescription>Recursos exclusivos do HIVE GOLD</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Relatórios Avançados\n                </Button>\n                \n                <Button className=\"w-full justify-start\" variant=\"outline\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Gerenciar Equipe\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Service Portfolio */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Meu Portfólio de Serviços</CardTitle>\n            <CardDescription>Gerencie seus serviços e categorias</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {user.categories && user.categories.length > 0 ? (\n                user.categories.map((category) => (\n                  <Badge key={category} variant=\"secondary\">\n                    {category}\n                  </Badge>\n                ))\n              ) : (\n                <p className=\"text-muted-foreground\">Nenhuma categoria selecionada</p>\n              )}\n            </div>\n            <Button variant=\"outline\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Gerenciar Categorias\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Real Estate Dashboard - Only for Imobiliaria providers */}\n        {user?.categories?.includes('imobiliaria') && (\n          <div id=\"properties-section\">\n            <RealEstateDashboard />\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // DASHBOARD USUÁRIO VISUALIZADOR\n  const renderViewerDashboard = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Perfil</CardTitle>\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold\">👤</p>\n            <p className=\"text-xs text-muted-foreground mb-2\">Usuário</p>\n            <Link href=\"/profile\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Editar\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Favoritos</CardTitle>\n            <Star className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold\">0</p>\n            <p className=\"text-xs text-muted-foreground\">Salvos</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-amber-200 bg-gradient-to-br from-amber-50 to-yellow-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-amber-800\">Torne-se Prestador</CardTitle>\n            <Crown className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold text-amber-900\">🚀</p>\n            <p className=\"text-xs text-amber-700 mb-3\">Ofereça seus serviços</p>\n            <Link href=\"/plans\">\n              <Button size=\"sm\" className=\"bg-amber-500 hover:bg-amber-600 text-white\">\n                <Crown className=\"w-4 h-4 mr-2\" />\n                Ver Planos\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Ações Rápidas</CardTitle>\n          <CardDescription>O que você gostaria de fazer hoje?</CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Link href=\"/properties\">\n            <Button variant=\"outline\" className=\"w-full h-20 flex flex-col\">\n              <Home className=\"w-6 h-6 mb-2\" />\n              Buscar Imóveis\n            </Button>\n          </Link>\n          <Link href=\"/services\">\n            <Button variant=\"outline\" className=\"w-full h-20 flex flex-col\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              Encontrar Prestadores\n            </Button>\n          </Link>\n          <Link href=\"/upgrade-to-provider\">\n            <Button variant=\"outline\" className=\"w-full h-20 flex flex-col border-amber-200 text-amber-700 hover:bg-amber-50\">\n              <Crown className=\"w-6 h-6 mb-2\" />\n              Tornar-se Prestador\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-white\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Olá, {user.name}! 👋\n          </h1>\n          <p className=\"text-gray-600\">\n            {user.userType === \"provider\" \n              ? `Dashboard do ${user.planType === \"A\" ? \"BE HIVE\" : \"HIVE GOLD\"}`\n              : \"Bem-vindo ao seu dashboard Hive\"\n            }\n          </p>\n        </div>\n\n        {user.userType === \"provider\" ? (\n          (!user.categories || user.categories.length === 0) ? \n            renderProviderOnboarding() : \n            renderProviderDashboard()\n        ) : (\n          renderViewerDashboard()\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15920},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, Building2, User } from \"lucide-react\";\nimport logoPath from \"@assets/logo hive_1754700716189.png\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  \n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  // Login form\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  \n  // Register form\n  const [registerData, setRegisterData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    userType: \"viewer\" as \"viewer\" | \"provider\",\n  });\n  \n  // Provider registration form\n  const [providerData, setProviderData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    documentType: \"CPF\" as \"CPF\" | \"CNPJ\",\n    documentNumber: \"\",\n    phone: \"\",\n    speciality: \"\",\n    description: \"\",\n    location: \"\",\n    categories: [] as string[],\n    planType: \"A\" as \"A\" | \"B\",\n  });\n  \n  const serviceCategories = [\n    \"eletricista\", \"encanador\", \"pintor\", \"marceneiro\", \"pedreiro\",\n    \"jardineiro\", \"faxineiro\", \"chaveiro\", \"vidraceiro\", \"soldador\",\n    \"imobiliaria\", \"corretor\", \"arquiteto\", \"engenheiro\"\n  ];\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(loginData),\n      });\n\n      const result = await response.json();\n\n      if (result.success && result.user) {\n        login(result.user, result.sessionId);\n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: `Bem-vindo(a), ${result.user.name}!`,\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Erro no login\",\n          description: result.message || \"Credenciais inválidas\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no login\",\n        description: \"Erro de conexão. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegisterViewer = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: \"As senhas não coincidem\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          name: registerData.name,\n          email: registerData.email,\n          password: registerData.password,\n          userType: \"viewer\",\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success && result.user) {\n        login(result.user, result.sessionId);\n        toast({\n          title: \"Cadastro realizado com sucesso!\",\n          description: `Bem-vindo ao Hive, ${result.user.name}!`,\n        });\n        // Wait for auth state to be updated before redirecting\n        setTimeout(() => {\n          window.location.href = \"/dashboard\";\n        }, 1000);\n      } else {\n        toast({\n          title: \"Erro no cadastro\",\n          description: result.message || \"Erro ao criar conta\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: \"Erro de conexão. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegisterProvider = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (providerData.password !== providerData.confirmPassword) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: \"As senhas não coincidem\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (providerData.categories.length === 0) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: \"Selecione pelo menos uma categoria\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/register-provider\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(providerData),\n      });\n\n      const result = await response.json();\n\n      if (result.success && result.user) {\n        login(result.user, result.sessionId);\n        toast({\n          title: \"Cadastro de prestador realizado!\",\n          description: `Bem-vindo ao Hive, ${result.user.name}! Complete seu perfil para começar.`,\n        });\n        // Wait for auth state to be updated before redirecting\n        setTimeout(() => {\n          window.location.href = \"/dashboard\";\n        }, 1000);\n      } else {\n        toast({\n          title: \"Erro no cadastro\",\n          description: result.message || \"Erro ao criar conta de prestador\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: \"Erro de conexão. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleCategory = (category: string) => {\n    setProviderData(prev => ({\n      ...prev,\n      categories: prev.categories.includes(category)\n        ? prev.categories.filter(c => c !== category)\n        : [...prev.categories, category]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-4xl shadow-2xl\">\n        <CardHeader className=\"text-center pb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <img src={logoPath} alt=\"Hive\" className=\"h-12 w-auto\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-gray-900\">\n            Bem-vindo ao Hive\n          </CardTitle>\n          <CardDescription className=\"text-lg text-gray-600\">\n            A plataforma que conecta propriedades e serviços\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n              <TabsTrigger value=\"login\" className=\"text-base\">\n                Entrar\n              </TabsTrigger>\n              <TabsTrigger value=\"register\" className=\"text-base\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Criar Conta\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\" className=\"space-y-6\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={loginData.email}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"seu@email.com\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Senha</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={loginData.password}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                      placeholder=\"••••••••\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? \"Entrando...\" : \"Entrar\"}\n                </Button>\n              </form>\n              \n              <div className=\"text-center text-sm text-gray-600\">\n                <p>Contas de teste disponíveis:</p>\n                <div className=\"mt-2 space-y-1\">\n                  <p><strong>Visualizador:</strong> viewer@test.com (senha: 123456)</p>\n                  <p><strong>Prestador:</strong> eletricista@test.com (senha: 123456)</p>\n                  <p><strong>Imobiliária:</strong> imobiliaria@test.com (senha: 123456)</p>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"register\" className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                  Crie sua conta no Hive\n                </h3>\n                <p className=\"text-gray-600\">\n                  Comece como cliente e depois você pode se tornar prestador de serviços\n                </p>\n              </div>\n              \n              <form onSubmit={handleRegisterViewer} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"user-name\">Nome Completo</Label>\n                    <Input\n                      id=\"user-name\"\n                      value={registerData.name}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Seu nome completo\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"user-email\">Email</Label>\n                    <Input\n                      id=\"user-email\"\n                      type=\"email\"\n                      value={registerData.email}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"seu@email.com\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"user-password\">Senha</Label>\n                    <Input\n                      id=\"user-password\"\n                      type=\"password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      placeholder=\"••••••••\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"user-confirm\">Confirmar Senha</Label>\n                    <Input\n                      id=\"user-confirm\"\n                      type=\"password\"\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      placeholder=\"••••••••\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                  <div className=\"flex items-start\">\n                    <User className=\"w-5 h-5 text-amber-600 mt-0.5 mr-3\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-amber-800\">\n                        Sua conta será criada como cliente\n                      </p>\n                      <p className=\"text-sm text-amber-700 mt-1\">\n                        Após o cadastro, você poderá assinar um plano para se tornar prestador de serviços\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? \"Criando conta...\" : \"Criar Minha Conta\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n\n\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13737},"client/src/pages/upgrade-to-provider.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, Crown, CheckCircle, Star } from \"lucide-react\";\n\nexport default function UpgradeToProviderPage() {\n  const [, setLocation] = useLocation();\n  const { user, refresh } = useAuth();\n  const { toast } = useToast();\n  \n  const [loading, setLoading] = useState(false);\n  const [step, setStep] = useState(1);\n  \n  const [providerData, setProviderData] = useState({\n    documentType: \"CPF\" as \"CPF\" | \"CNPJ\",\n    documentNumber: \"\",\n    phone: \"\",\n    speciality: \"\",\n    description: \"\",\n    location: \"\",\n    categories: [] as string[],\n    planType: \"A\" as \"A\" | \"B\",\n  });\n  \n  const serviceCategories = [\n    \"eletricista\", \"encanador\", \"pintor\", \"marceneiro\", \"pedreiro\",\n    \"jardineiro\", \"faxineiro\", \"chaveiro\", \"vidraceiro\", \"soldador\",\n    \"imobiliaria\", \"corretor\", \"arquiteto\", \"engenheiro\"\n  ];\n\n  const handleUpgradeToProvider = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (providerData.categories.length === 0) {\n      toast({\n        title: \"Erro no upgrade\",\n        description: \"Selecione pelo menos uma categoria\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/upgrade-to-provider\", {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hive_session\")}`,\n        },\n        body: JSON.stringify({\n          ...providerData,\n          name: user?.name,\n          email: user?.email,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        refresh();\n        toast({\n          title: \"Upgrade realizado com sucesso!\",\n          description: \"Agora você é um prestador de serviços!\",\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Erro no upgrade\",\n          description: result.message || \"Erro ao fazer upgrade para prestador\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no upgrade\",\n        description: \"Erro de conexão. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleCategory = (category: string) => {\n    setProviderData(prev => ({\n      ...prev,\n      categories: prev.categories.includes(category)\n        ? prev.categories.filter(c => c !== category)\n        : [...prev.categories, category]\n    }));\n  };\n\n  if (!user) {\n    window.location.href = \"/auth\";\n    return null;\n  }\n\n  if (user.userType === \"provider\") {\n    window.location.href = \"/dashboard\";\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 py-12 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card className=\"shadow-2xl\">\n          <CardHeader className=\"text-center pb-8 bg-gradient-to-r from-amber-600 to-orange-600 text-white rounded-t-lg\">\n            <div className=\"flex justify-center mb-4\">\n              <Crown className=\"h-16 w-16\" />\n            </div>\n            <CardTitle className=\"text-3xl font-bold\">\n              Torne-se um Prestador de Serviços\n            </CardTitle>\n            <CardDescription className=\"text-amber-100 text-lg\">\n              Expanda seu negócio e alcance mais clientes no Hive\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"p-8\">\n            {step === 1 && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-semibold text-gray-900 mb-4\">\n                    Escolha seu plano\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Selecione o plano que melhor se adequa ao seu perfil profissional\n                  </p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {/* Plano A */}\n                  <Card \n                    className={`cursor-pointer border-2 transition-all ${\n                      providerData.planType === \"A\" \n                        ? \"border-amber-500 bg-amber-50\" \n                        : \"border-gray-200 hover:border-amber-300\"\n                    }`}\n                    onClick={() => setProviderData(prev => ({ ...prev, planType: \"A\" }))}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-xl\">Plano A - Individual</CardTitle>\n                        {providerData.planType === \"A\" && (\n                          <CheckCircle className=\"h-6 w-6 text-amber-600\" />\n                        )}\n                      </div>\n                      <CardDescription>Para profissionais autônomos (CPF)</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-amber-600 mb-4\">\n                        R$ 29<span className=\"text-lg text-gray-500\">/mês</span>\n                      </div>\n                      <ul className=\"space-y-2 text-sm text-gray-600\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Perfil profissional completo\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Até 3 categorias de serviços\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Galeria de fotos dos trabalhos\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Chat direto com clientes\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Sistema de avaliações\n                        </li>\n                      </ul>\n                    </CardContent>\n                  </Card>\n\n                  {/* Plano B */}\n                  <Card \n                    className={`cursor-pointer border-2 transition-all relative ${\n                      providerData.planType === \"B\" \n                        ? \"border-amber-500 bg-amber-50\" \n                        : \"border-gray-200 hover:border-amber-300\"\n                    }`}\n                    onClick={() => setProviderData(prev => ({ ...prev, planType: \"B\" }))}\n                  >\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <Badge className=\"bg-gradient-to-r from-amber-500 to-orange-500\">\n                        <Star className=\"h-3 w-3 mr-1\" />\n                        Mais Popular\n                      </Badge>\n                    </div>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-xl\">Plano B - Empresarial</CardTitle>\n                        {providerData.planType === \"B\" && (\n                          <CheckCircle className=\"h-6 w-6 text-amber-600\" />\n                        )}\n                      </div>\n                      <CardDescription>Para empresas e imobiliárias (CNPJ)</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-amber-600 mb-4\">\n                        R$ 59<span className=\"text-lg text-gray-500\">/mês</span>\n                      </div>\n                      <ul className=\"space-y-2 text-sm text-gray-600\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Todos os benefícios do Plano A\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Categorias ilimitadas\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Cadastro de propriedades (imobiliárias)\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Destaque na busca\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Analytics e relatórios\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          Suporte prioritário\n                        </li>\n                      </ul>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"flex justify-center\">\n                  <Button \n                    onClick={() => setStep(2)} \n                    size=\"lg\"\n                    className=\"bg-amber-600 hover:bg-amber-700 text-white px-8\"\n                  >\n                    Continuar com Plano {providerData.planType}\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {step === 2 && (\n              <form onSubmit={handleUpgradeToProvider} className=\"space-y-6\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n                    Complete seu perfil profissional\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Preencha os dados para finalizar seu upgrade para Plano {providerData.planType}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Tipo de Documento</Label>\n                    <Select\n                      value={providerData.documentType}\n                      onValueChange={(value: \"CPF\" | \"CNPJ\") => \n                        setProviderData(prev => ({ ...prev, documentType: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"CPF\">CPF</SelectItem>\n                        <SelectItem value=\"CNPJ\">CNPJ</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"document\">\n                      {providerData.documentType}\n                    </Label>\n                    <Input\n                      id=\"document\"\n                      value={providerData.documentNumber}\n                      onChange={(e) => setProviderData(prev => ({ ...prev, documentNumber: e.target.value }))}\n                      placeholder={providerData.documentType === \"CPF\" ? \"000.000.000-00\" : \"00.000.000/0000-00\"}\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={providerData.phone}\n                      onChange={(e) => setProviderData(prev => ({ ...prev, phone: e.target.value }))}\n                      placeholder=\"(11) 99999-9999\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"speciality\">Especialidade Principal</Label>\n                    <Input\n                      id=\"speciality\"\n                      value={providerData.speciality}\n                      onChange={(e) => setProviderData(prev => ({ ...prev, speciality: e.target.value }))}\n                      placeholder=\"Ex: Instalações elétricas residenciais\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"location\">Localização</Label>\n                    <Input\n                      id=\"location\"\n                      value={providerData.location}\n                      onChange={(e) => setProviderData(prev => ({ ...prev, location: e.target.value }))}\n                      placeholder=\"Cidade, Estado\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Descrição dos Serviços</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={providerData.description}\n                    onChange={(e) => setProviderData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Descreva os serviços que você oferece...\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Categorias de Serviços</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {serviceCategories.map((category) => (\n                      <Badge\n                        key={category}\n                        variant={providerData.categories.includes(category) ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer\"\n                        onClick={() => toggleCategory(category)}\n                      >\n                        {category}\n                      </Badge>\n                    ))}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Selecionadas: {providerData.categories.join(\", \") || \"Nenhuma\"}\n                  </p>\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setStep(1)}\n                  >\n                    Voltar\n                  </Button>\n                  <Button type=\"submit\" className=\"flex-1\" disabled={loading}>\n                    {loading ? \"Processando...\" : `Finalizar Upgrade - Plano ${providerData.planType}`}\n                  </Button>\n                </div>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16022},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Crown, CreditCard, Shield, CheckCircle } from 'lucide-react';\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ planType }: { planType: string }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [_, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const result = await stripe.confirmPayment({\n      elements,\n      redirect: 'if_required',\n    });\n\n    if (result.error) {\n      toast({\n        title: \"Erro no Pagamento\",\n        description: result.error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      // Process the successful payment\n      try {\n        // Get current user from localStorage\n        const storedUser = localStorage.getItem(\"hive_user\");\n        const currentUser = storedUser ? JSON.parse(storedUser) : null;\n        \n        if (!currentUser) {\n          throw new Error('Usuário não encontrado. Faça login novamente.');\n        }\n\n        // Create subscription record\n        const subscriptionResponse = await apiRequest(\"POST\", \"/api/subscriptions/create\", {\n          userId: currentUser.id,\n          planType,\n          stripeSubscriptionId: result.paymentIntent.id,\n        });\n        \n        const subscriptionData = await subscriptionResponse.json();\n        \n        if (subscriptionData.success) {\n          // Process payment success with backend\n          const response = await apiRequest(\"POST\", \"/api/process-payment-success\", {\n            paymentIntentId: result.paymentIntent.id,\n            planType,\n            subscriptionId: subscriptionData.subscription.id,\n          });\n          \n          const data = await response.json();\n          \n          if (data.success) {\n            // Update local user data\n            if (data.user) {\n              console.log('Updating localStorage with user data:', data.user);\n              localStorage.setItem(\"hive_user\", JSON.stringify(data.user));\n            }\n            \n            toast({\n              title: \"Assinatura Ativada com Sucesso!\",\n              description: `Plano ${planType === 'A' ? 'BE HIVE' : 'HIVE GOLD'} ativo. Duração: 30 dias. Cancelamento gratuito: 7 dias.`,\n            });\n            \n            console.log('Redirecting to select-categories in 2 seconds...');\n            setTimeout(() => {\n              // AMBOS os planos devem ir para seleção de categorias\n              console.log('Now redirecting to select-categories');\n              setLocation('/select-categories');\n            }, 2000);\n          } else {\n            throw new Error(data.message || 'Payment processing failed');\n          }\n        } else {\n          throw new Error(subscriptionData.message || 'Subscription creation failed');\n        }\n      } catch (error) {\n        console.error('Error processing payment success:', error);\n        toast({\n          title: \"Erro no Processamento\",\n          description: error instanceof Error ? error.message : \"Houve um erro. Entre em contato com o suporte.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n\n    setIsProcessing(false);\n  };\n\n  const planInfo = planType === 'A' \n    ? { name: 'BE HIVE', price: 'R$ 29', description: 'Prestador Pessoa Física (CPF)' }\n    : { name: 'HIVE GOLD', price: 'R$ 59', description: 'Prestador Empresarial (CNPJ)' };\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <Card className=\"mb-6\">\n        <CardHeader className=\"text-center pb-4\">\n          <div className=\"w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Crown className=\"h-8 w-8 text-amber-600\" />\n          </div>\n          <CardTitle className=\"text-xl text-gray-900\">{planInfo.name}</CardTitle>\n          <CardDescription className=\"text-gray-600\">{planInfo.description}</CardDescription>\n          <div className=\"text-3xl font-bold text-amber-600 mt-2\">\n            {planInfo.price}\n            <span className=\"text-sm text-gray-500 font-normal\">/mês</span>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Informações de Pagamento\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <PaymentElement />\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <Shield className=\"h-4 w-4\" />\n              <span>Pagamento seguro processado pelo Stripe</span>\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-amber-500 hover:bg-amber-600\" \n              disabled={!stripe || isProcessing}\n            >\n              {isProcessing ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  Processando...\n                </div>\n              ) : (\n                `Assinar ${planInfo.name}`\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default function Checkout() {\n  const [location] = useLocation();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const { toast } = useToast();\n  \n  // Usar window.location.search para capturar os parâmetros corretamente\n  const searchParams = new URLSearchParams(window.location.search);\n  const planType = searchParams.get('plan') || 'A';\n  \n  // Debug para verificar o parâmetro do plano\n  console.log('URL atual:', location);\n  console.log('window.location.search:', window.location.search);\n  console.log('Parâmetros da URL:', searchParams);\n  console.log('Tipo de plano extraído:', planType);\n\n  useEffect(() => {\n    console.log('Creating subscription for plan type:', planType);\n    \n    // Create subscription intent with specific plan type\n    apiRequest(\"POST\", \"/api/create-subscription\", { planType })\n      .then(async (response) => {\n        const data = await response.json();\n        console.log('Subscription response:', data);\n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          throw new Error('Failed to create subscription - no client secret');\n        }\n      })\n      .catch((error) => {\n        console.error('Error creating subscription:', error);\n        \n        // Verificar se é um erro específico do Stripe\n        if (error.message && error.message.includes('401')) {\n          toast({\n            title: \"Login Necessário\",\n            description: \"Você precisa fazer login para assinar um plano.\",\n            variant: \"destructive\",\n          });\n          // Redirecionar para login\n          setTimeout(() => {\n            window.location.href = '/auth';\n          }, 2000);\n        } else {\n          toast({\n            title: \"Erro na Assinatura\",\n            description: \"Não foi possível processar sua assinatura. Verifique se você está logado e tente novamente.\",\n            variant: \"destructive\",\n          });\n        }\n      });\n  }, [planType, toast]);\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Preparando pagamento...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Finalizar Assinatura</h1>\n          <p className=\"text-gray-600\">Complete seu pagamento para se tornar um prestador Hive</p>\n        </div>\n        \n        {/* Make SURE to wrap the form in <Elements> which provides the stripe context. */}\n        <Elements stripe={stripePromise} options={{ clientSecret }}>\n          <CheckoutForm planType={planType} />\n        </Elements>\n      </div>\n    </div>\n  );\n}","size_bytes":9168},"client/src/pages/select-categories.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { toast, useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, Building2, ArrowRight, Camera, Upload, User, FileText } from \"lucide-react\";\nimport type { ServiceCategory } from \"@shared/schema\";\n\nexport default function SelectCategories() {\n  const authState = useAuth();\n  const { user, isAuthenticated } = authState;\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState<ServiceCategory | null>(null);\n  const [selectedSubcategories, setSelectedSubcategories] = useState<string[]>([]);\n  const [biography, setBiography] = useState(\"\");\n  const [profileImage, setProfileImage] = useState<string>(\"\");\n  const [portfolioImages, setPortfolioImages] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n\n\n  // Verificar se o usuário é empresarial - aguardar loading terminar\n  useEffect(() => {\n    // Aguardar até loading terminar\n    if (authState.isLoading) {\n      return;\n    }\n    \n    if (!isAuthenticated) {\n      setLocation('/auth');\n      return;\n    }\n    \n    if (user?.userType !== \"provider\" || (!user?.planType && !user?.providerPlan)) {\n      toast({\n        title: \"Acesso Negado\",\n        description: \"Esta página é apenas para prestadores com plano ativo.\",\n        variant: \"destructive\",\n      });\n      setLocation('/dashboard');\n      return;\n    }\n  }, [user?.userType, user?.planType, user?.providerPlan, isAuthenticated, authState.isLoading]);\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery<ServiceCategory[]>({\n    queryKey: [\"/api/service-categories\"],\n  });\n\n  const completeMutation = useMutation({\n    mutationFn: async (data: {\n      categoryId: string;\n      subcategories: string[];\n      biography: string;\n      profileImage?: string;\n      portfolioImages: string[];\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/complete-provider-setup\", data);\n      if (!response.ok) {\n        throw new Error(\"Falha ao salvar configurações\");\n      }\n      return response.json();\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"Configuração Concluída!\",\n        description: \"Seu perfil de prestador foi configurado com sucesso.\",\n      });\n      \n      // Atualizar localStorage com dados do usuário\n      if (response.user) {\n        localStorage.setItem(\"hive_user\", JSON.stringify(response.user));\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profiles\"] });\n      \n      // Marcar como definitivamente completado\n      setIsSubmitting(false);\n      \n      setTimeout(() => {\n        setLocation('/dashboard');\n      }, 1500);\n    },\n    onError: (error) => {\n      console.error(\"Setup error:\", error);\n      setIsSubmitting(false);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar as configurações. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCategorySelect = (category: ServiceCategory) => {\n    setSelectedCategory(category);\n    setSelectedSubcategories([]);\n  };\n\n  const handleSubcategoryToggle = (subcategory: string) => {\n    setSelectedSubcategories(prev => {\n      if (prev.includes(subcategory)) {\n        return prev.filter(s => s !== subcategory);\n      } else if (prev.length < 3) {\n        return [...prev, subcategory];\n      } else {\n        toast({\n          title: \"Limite Atingido\",\n          description: \"Você pode selecionar no máximo 3 subcategorias.\",\n          variant: \"destructive\",\n        });\n        return prev;\n      }\n    });\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>, type: 'profile' | 'portfolio') => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Simulação de upload - em produção seria um upload real\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const imageData = event.target?.result as string;\n      \n      if (type === 'profile') {\n        setProfileImage(imageData);\n      } else {\n        if (portfolioImages.length < 5) {\n          setPortfolioImages(prev => [...prev, imageData]);\n        } else {\n          toast({\n            title: \"Limite de Imagens\",\n            description: \"Você pode adicionar no máximo 5 imagens ao portfólio.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const removePortfolioImage = (index: number) => {\n    setPortfolioImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = () => {\n    if (!selectedCategory) {\n      toast({\n        title: \"Categoria Obrigatória\",\n        description: \"Selecione uma categoria principal.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedSubcategories.length === 0) {\n      toast({\n        title: \"Subcategoria Obrigatória\", \n        description: \"Selecione pelo menos uma subcategoria.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!biography.trim()) {\n      toast({\n        title: \"Biografia Obrigatória\",\n        description: \"Escreva uma breve biografia sobre seus serviços.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    completeMutation.mutate({\n      categoryId: selectedCategory.id,\n      subcategories: selectedSubcategories,\n      biography: biography.trim(),\n      profileImage,\n      portfolioImages,\n    });\n  };\n\n  if (authState.isLoading || categoriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-50 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-amber-600 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const isBusinessPlan = user?.planType === 'B' || user?.providerPlan === 'B';\n  const availableCategories = categories?.filter(category => {\n    // Para planos CNPJ, mostrar todas as categorias (CPF + CNPJ)\n    // Para planos CPF, mostrar apenas categorias CPF (não pode ver imobiliária)\n    if (isBusinessPlan) {\n      return true; // CNPJ vê todas as categorias\n    } else {\n      // CPF só vê categorias básicas de serviços (sem imobiliária)\n      return category.planType === 'CPF' || category.slug !== 'imobiliaria';\n    }\n  }) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Building2 className=\"h-10 w-10 text-amber-600\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Configure seu Perfil Profissional\n          </h1>\n          <p className=\"text-gray-600\">\n            Escolha sua categoria principal e até 3 subcategorias de especialização\n          </p>\n          <div className=\"mt-4\">\n            <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-800\">\n              {isBusinessPlan ? 'HIVE GOLD (CNPJ) - Inclui categoria Imobiliária' : 'BE HIVE (CPF) - Categorias de serviços'}\n            </Badge>\n          </div>\n        </div>\n\n        {!selectedCategory ? (\n          <div className=\"max-w-6xl mx-auto\">\n            <h2 className=\"text-xl font-semibold mb-6 text-center\">\n              Escolha sua Categoria Principal\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {availableCategories.map((category) => (\n                <Card \n                  key={category.id}\n                  className=\"cursor-pointer hover:shadow-lg transition-all duration-200 hover:border-amber-300\"\n                  onClick={() => handleCategorySelect(category)}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                        <i className={`${category.icon} text-amber-600 text-xl`} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {category.providerCount} prestadores\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {category.subcategories?.slice(0, 3).map((sub) => (\n                        <Badge key={sub} variant=\"secondary\" className=\"text-xs\">\n                          {sub}\n                        </Badge>\n                      ))}\n                      {(category.subcategories?.length || 0) > 3 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{(category.subcategories?.length || 0) - 3} mais\n                        </Badge>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"max-w-4xl mx-auto\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                      <i className={`${selectedCategory.icon} text-amber-600 text-xl`} />\n                    </div>\n                    <div>\n                      <CardTitle>{selectedCategory.name}</CardTitle>\n                      <CardDescription>Selecione de 1 a 3 subcategorias</CardDescription>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setSelectedCategory(null)}\n                  >\n                    Trocar Categoria\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-8\">\n                {/* Seleção de Subcategorias */}\n                <div>\n                  <Label className=\"text-lg font-semibold mb-4 block\">\n                    Subcategorias de Especialização\n                  </Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                    {selectedCategory.subcategories?.map((subcategory) => (\n                      <div\n                        key={subcategory}\n                        className={`\n                          p-3 border-2 rounded-lg cursor-pointer transition-all\n                          ${selectedSubcategories.includes(subcategory)\n                            ? 'border-amber-500 bg-amber-50 text-amber-900'\n                            : 'border-gray-200 hover:border-amber-300'\n                          }\n                        `}\n                        onClick={() => handleSubcategoryToggle(subcategory)}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {selectedSubcategories.includes(subcategory) && (\n                            <CheckCircle className=\"h-5 w-5 text-amber-600\" />\n                          )}\n                          <span className=\"text-sm font-medium\">{subcategory}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    Selecionadas: {selectedSubcategories.length}/3\n                  </p>\n                </div>\n\n                {/* Biografia */}\n                <div>\n                  <Label htmlFor=\"biography\" className=\"text-lg font-semibold mb-4 block\">\n                    <FileText className=\"inline h-5 w-5 mr-2\" />\n                    Biografia Profissional\n                  </Label>\n                  <Textarea\n                    id=\"biography\"\n                    placeholder=\"Conte sobre sua experiência, especialidades e diferenciais. Exemplo: 'Sou eletricista com mais de 10 anos de experiência em instalações residenciais e comerciais. Especializado em sistemas de automação e energia solar...'\"\n                    value={biography}\n                    onChange={(e) => setBiography(e.target.value)}\n                    rows={4}\n                    className=\"resize-none\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    {biography.length}/500 caracteres\n                  </p>\n                </div>\n\n                {/* Upload de Imagem de Perfil */}\n                <div>\n                  <Label className=\"text-lg font-semibold mb-4 block\">\n                    <User className=\"inline h-5 w-5 mr-2\" />\n                    Foto de Perfil (Opcional)\n                  </Label>\n                  <div className=\"flex items-center gap-4\">\n                    {profileImage ? (\n                      <div className=\"relative\">\n                        <img \n                          src={profileImage} \n                          alt=\"Perfil\" \n                          className=\"w-20 h-20 rounded-full object-cover border-4 border-amber-200\"\n                        />\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full p-0\"\n                          onClick={() => setProfileImage(\"\")}\n                        >\n                          ×\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"w-20 h-20 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center\">\n                        <Camera className=\"h-8 w-8 text-gray-400\" />\n                      </div>\n                    )}\n                    <div>\n                      <Input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={(e) => handleImageUpload(e, 'profile')}\n                        className=\"hidden\"\n                        id=\"profile-upload\"\n                      />\n                      <Label htmlFor=\"profile-upload\" className=\"cursor-pointer\">\n                        <Button variant=\"outline\" asChild>\n                          <span>\n                            <Upload className=\"h-4 w-4 mr-2\" />\n                            Escolher Foto\n                          </span>\n                        </Button>\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Upload de Imagens do Portfólio */}\n                <div>\n                  <Label className=\"text-lg font-semibold mb-4 block\">\n                    <Camera className=\"inline h-5 w-5 mr-2\" />\n                    Portfólio de Trabalhos (Opcional)\n                  </Label>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      {portfolioImages.map((image, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img \n                            src={image} \n                            alt={`Portfolio ${index + 1}`}\n                            className=\"w-full h-24 object-cover rounded-lg border-2 border-gray-200\"\n                          />\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => removePortfolioImage(index)}\n                          >\n                            ×\n                          </Button>\n                        </div>\n                      ))}\n                      {portfolioImages.length < 5 && (\n                        <div className=\"w-full h-24 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-amber-300\">\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={(e) => handleImageUpload(e, 'portfolio')}\n                            className=\"hidden\"\n                            id={`portfolio-upload-${portfolioImages.length}`}\n                          />\n                          <Label htmlFor={`portfolio-upload-${portfolioImages.length}`} className=\"cursor-pointer flex flex-col items-center\">\n                            <Upload className=\"h-6 w-6 text-gray-400 mb-1\" />\n                            <span className=\"text-xs text-gray-500\">Adicionar</span>\n                          </Label>\n                        </div>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-500\">\n                      Imagens: {portfolioImages.length}/5 • Mostre seus melhores trabalhos\n                    </p>\n                  </div>\n                </div>\n\n                {/* Botões de Ação */}\n                <div className=\"flex gap-4 pt-4\">\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={isSubmitting || selectedSubcategories.length === 0 || !biography.trim()}\n                    className=\"flex-1\"\n                  >\n                    {isSubmitting ? (\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    ) : (\n                      <ArrowRight className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Finalizar Configuração\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19021},"client/src/components/ProfileProgressTracker.tsx":{"content":"import { CheckCircle, Circle, User, FileText, Camera, Building2, MapPin } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\ninterface ProfileStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  href: string;\n  isCompleted: boolean;\n  isRequired: boolean;\n  weight: number; // Para cálculo da porcentagem\n}\n\ninterface ProfileProgressTrackerProps {\n  user: any;\n  className?: string;\n}\n\nexport function ProfileProgressTracker({ user, className = \"\" }: ProfileProgressTrackerProps) {\n  // Definir as etapas baseadas no tipo de plano\n  const getProfileSteps = (user: any): ProfileStep[] => {\n    const baseSteps: ProfileStep[] = [\n      {\n        id: 'basic-info',\n        title: 'Informações Básicas',\n        description: 'Nome, foto de perfil e informações de contato',\n        icon: <User className=\"h-5 w-5\" />,\n        href: '/profile',\n        isCompleted: !!(user?.name && user?.profileImageUrl && user?.email),\n        isRequired: true,\n        weight: 20\n      },\n      {\n        id: 'address',\n        title: 'Endereço Completo',\n        description: 'Localização para facilitar encontros com clientes',\n        icon: <MapPin className=\"h-5 w-5\" />,\n        href: '/profile',\n        isCompleted: !!(user?.address && user?.city && user?.state && user?.zipCode),\n        isRequired: true,\n        weight: 15\n      },\n      {\n        id: 'documents',\n        title: 'Documentação',\n        description: user?.planType === 'A' ? 'CPF verificado' : 'CNPJ e documentos empresariais',\n        icon: <FileText className=\"h-5 w-5\" />,\n        href: '/profile',\n        isCompleted: !!(user?.documentType && user?.documentNumber && user?.documentsVerified),\n        isRequired: true,\n        weight: 20\n      },\n      {\n        id: 'categories',\n        title: 'Categorias de Serviços',\n        description: 'Especialize-se em áreas específicas',\n        icon: <Building2 className=\"h-5 w-5\" />,\n        href: '/select-categories',\n        isCompleted: !!(user?.categories && user?.categories.length > 0),\n        isRequired: true,\n        weight: 25\n      },\n      {\n        id: 'portfolio',\n        title: 'Portfólio e Biografia',\n        description: 'Mostre seus trabalhos e conte sua história',\n        icon: <Camera className=\"h-5 w-5\" />,\n        href: '/profile',\n        isCompleted: !!(user?.description && user?.portfolioImages && user?.portfolioImages.length > 0),\n        isRequired: false,\n        weight: 20\n      }\n    ];\n\n    // Para imobiliárias, adicionar etapa específica\n    if (user?.planType === 'B' && user?.categories?.includes('imobiliaria')) {\n      baseSteps.push({\n        id: 'properties',\n        title: 'Cadastro de Imóveis',\n        description: 'Adicione pelo menos 3 imóveis ao seu portfólio',\n        icon: <Building2 className=\"h-5 w-5\" />,\n        href: '/dashboard',\n        isCompleted: (user?.propertiesCount || 0) >= 3,\n        isRequired: false,\n        weight: 10\n      });\n    }\n\n    return baseSteps;\n  };\n\n  const steps = getProfileSteps(user);\n  const completedSteps = steps.filter(step => step.isCompleted);\n  const completedWeight = completedSteps.reduce((acc, step) => acc + step.weight, 0);\n  const totalWeight = steps.reduce((acc, step) => acc + step.weight, 0);\n  const progressPercentage = Math.round((completedWeight / totalWeight) * 100);\n\n  const nextStep = steps.find(step => !step.isCompleted);\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 bg-amber-100 rounded-full flex items-center justify-center\">\n                <User className=\"h-4 w-4 text-amber-600\" />\n              </div>\n              Progresso do Perfil\n            </CardTitle>\n            <CardDescription>\n              Complete seu perfil para atrair mais clientes\n            </CardDescription>\n          </div>\n          <Badge variant={progressPercentage === 100 ? \"default\" : \"secondary\"} className=\"text-sm\">\n            {progressPercentage}% concluído\n          </Badge>\n        </div>\n        \n        {/* Barra de Progresso Visual */}\n        <div className=\"w-full bg-gray-200 rounded-full h-3 mt-4\">\n          <div \n            className=\"bg-gradient-to-r from-amber-500 to-amber-600 h-3 rounded-full transition-all duration-500 ease-out\"\n            style={{ width: `${progressPercentage}%` }}\n          />\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {steps.map((step, index) => (\n          <div\n            key={step.id}\n            className={`flex items-center gap-3 p-3 rounded-lg border transition-colors ${\n              step.isCompleted \n                ? 'bg-green-50 border-green-200' \n                : nextStep?.id === step.id \n                  ? 'bg-amber-50 border-amber-200 border-2' \n                  : 'bg-gray-50 border-gray-200'\n            }`}\n          >\n            <div className={`flex-shrink-0 ${step.isCompleted ? 'text-green-600' : 'text-gray-400'}`}>\n              {step.isCompleted ? (\n                <CheckCircle className=\"h-6 w-6\" />\n              ) : (\n                <Circle className=\"h-6 w-6\" />\n              )}\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                {step.icon}\n                <h4 className={`font-medium ${step.isCompleted ? 'text-green-800' : 'text-gray-800'}`}>\n                  {step.title}\n                </h4>\n                {step.isRequired && !step.isCompleted && (\n                  <Badge variant=\"outline\" className=\"text-xs\">Obrigatório</Badge>\n                )}\n              </div>\n              <p className={`text-sm ${step.isCompleted ? 'text-green-600' : 'text-gray-600'}`}>\n                {step.description}\n              </p>\n            </div>\n            \n            {!step.isCompleted && (\n              <Link href={step.href}>\n                <Button size=\"sm\" variant={nextStep?.id === step.id ? \"default\" : \"ghost\"}>\n                  {nextStep?.id === step.id ? 'Continuar' : 'Editar'}\n                </Button>\n              </Link>\n            )}\n          </div>\n        ))}\n        \n        {/* Próxima Ação Recomendada */}\n        {nextStep && (\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-amber-500 to-amber-600 rounded-lg text-white\">\n            <h4 className=\"font-semibold mb-2\">📋 Próxima etapa recomendada:</h4>\n            <p className=\"text-sm mb-3\">{nextStep.description}</p>\n            <Link href={nextStep.href}>\n              <Button variant=\"secondary\" size=\"sm\">\n                {nextStep.title}\n              </Button>\n            </Link>\n          </div>\n        )}\n        \n        {progressPercentage === 100 && (\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-green-500 to-green-600 rounded-lg text-white text-center\">\n            <CheckCircle className=\"h-8 w-8 mx-auto mb-2\" />\n            <h4 className=\"font-semibold mb-1\">🎉 Perfil Completo!</h4>\n            <p className=\"text-sm\">Você está pronto para receber clientes.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7478},"client/src/components/RealEstateDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Building2, Plus, Home, TrendingUp, Eye, MapPin, Edit, Trash2, Camera, DollarSign } from \"lucide-react\";\n\ninterface Property {\n  id: string;\n  title: string;\n  description: string;\n  price: string;\n  priceType: string;\n  propertyType: string;\n  location: string;\n  bedrooms?: number;\n  bathrooms?: number;\n  area?: number;\n  imageUrl: string;\n  status: string;\n  views: number;\n  featured: boolean;\n}\n\nexport function RealEstateDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [newProperty, setNewProperty] = useState({\n    title: '',\n    description: '',\n    price: '',\n    priceType: 'sale',\n    propertyType: 'apartment',\n    location: '',\n    bedrooms: '',\n    bathrooms: '',\n    area: '',\n    imageUrl: '',\n  });\n\n  // Buscar propriedades da imobiliária\n  const { data: properties, isLoading } = useQuery<Property[]>({\n    queryKey: ['/api/my-properties'],\n    enabled: !!user && user.categories?.includes('imobiliaria'),\n  });\n\n  // Estatísticas\n  const stats = {\n    totalProperties: properties?.length || 0,\n    activeProperties: properties?.filter(p => p.status === 'available').length || 0,\n    totalViews: properties?.reduce((sum, p) => sum + p.views, 0) || 0,\n    featuredProperties: properties?.filter(p => p.featured).length || 0,\n  };\n\n  const createPropertyMutation = useMutation({\n    mutationFn: async (propertyData: any) => {\n      const response = await apiRequest('POST', '/api/properties', propertyData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Imóvel Cadastrado\",\n        description: \"Propriedade adicionada com sucesso!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/my-properties'] });\n      setIsAddDialogOpen(false);\n      setNewProperty({\n        title: '',\n        description: '',\n        price: '',\n        priceType: 'sale',\n        propertyType: 'apartment',\n        location: '',\n        bedrooms: '',\n        bathrooms: '',\n        area: '',\n        imageUrl: '',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao cadastrar imóvel\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitProperty = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const propertyData = {\n      ...newProperty,\n      bedrooms: newProperty.bedrooms ? parseInt(newProperty.bedrooms) : undefined,\n      bathrooms: newProperty.bathrooms ? parseInt(newProperty.bathrooms) : undefined,\n      area: newProperty.area ? parseInt(newProperty.area) : undefined,\n      agencyName: user?.name || 'Imobiliária',\n      agencyId: user?.provider?.id,\n      agencyLogo: user?.profileImage,\n    };\n\n    createPropertyMutation.mutate(propertyData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Painel Imobiliário</h2>\n          <p className=\"text-gray-600\">Gerencie seu portfólio de imóveis</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-amber-500 hover:bg-amber-600\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo Imóvel\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Cadastrar Novo Imóvel</DialogTitle>\n              <DialogDescription>\n                Adicione um novo imóvel ao seu portfólio\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmitProperty} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"title\">Título do Imóvel *</Label>\n                  <Input\n                    id=\"title\"\n                    value={newProperty.title}\n                    onChange={(e) => setNewProperty({...newProperty, title: e.target.value})}\n                    placeholder=\"Ex: Apartamento 3 quartos na Copacabana\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"price\">Preço (R$) *</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newProperty.price}\n                    onChange={(e) => setNewProperty({...newProperty, price: e.target.value})}\n                    placeholder=\"450000.00\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"priceType\">Tipo de Negócio *</Label>\n                  <Select value={newProperty.priceType} onValueChange={(value) => setNewProperty({...newProperty, priceType: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sale\">Venda</SelectItem>\n                      <SelectItem value=\"rent\">Aluguel</SelectItem>\n                      <SelectItem value=\"event\">Eventos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"propertyType\">Tipo de Imóvel *</Label>\n                  <Select value={newProperty.propertyType} onValueChange={(value) => setNewProperty({...newProperty, propertyType: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"apartment\">Apartamento</SelectItem>\n                      <SelectItem value=\"house\">Casa</SelectItem>\n                      <SelectItem value=\"commercial\">Comercial</SelectItem>\n                      <SelectItem value=\"event_hall\">Salão de Eventos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"location\">Localização *</Label>\n                  <Input\n                    id=\"location\"\n                    value={newProperty.location}\n                    onChange={(e) => setNewProperty({...newProperty, location: e.target.value})}\n                    placeholder=\"Bairro, Cidade - Estado\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"bedrooms\">Quartos</Label>\n                  <Input\n                    id=\"bedrooms\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={newProperty.bedrooms}\n                    onChange={(e) => setNewProperty({...newProperty, bedrooms: e.target.value})}\n                    placeholder=\"3\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"bathrooms\">Banheiros</Label>\n                  <Input\n                    id=\"bathrooms\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={newProperty.bathrooms}\n                    onChange={(e) => setNewProperty({...newProperty, bathrooms: e.target.value})}\n                    placeholder=\"2\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"area\">Área (m²)</Label>\n                  <Input\n                    id=\"area\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={newProperty.area}\n                    onChange={(e) => setNewProperty({...newProperty, area: e.target.value})}\n                    placeholder=\"120\"\n                  />\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"imageUrl\">URL da Imagem Principal *</Label>\n                  <Input\n                    id=\"imageUrl\"\n                    type=\"url\"\n                    value={newProperty.imageUrl}\n                    onChange={(e) => setNewProperty({...newProperty, imageUrl: e.target.value})}\n                    placeholder=\"https://exemplo.com/imagem.jpg\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"description\">Descrição *</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newProperty.description}\n                    onChange={(e) => setNewProperty({...newProperty, description: e.target.value})}\n                    placeholder=\"Descreva as características e diferenciais do imóvel...\"\n                    rows={3}\n                    required\n                  />\n                </div>\n              </div>\n              \n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createPropertyMutation.isPending}>\n                  {createPropertyMutation.isPending ? 'Salvando...' : 'Cadastrar Imóvel'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Estatísticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total de Imóveis</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalProperties}</p>\n              </div>\n              <Building2 className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Disponíveis</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.activeProperties}</p>\n              </div>\n              <Home className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Visualizações</p>\n                <p className=\"text-2xl font-bold text-amber-600\">{stats.totalViews}</p>\n              </div>\n              <Eye className=\"h-8 w-8 text-amber-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Em Destaque</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{stats.featuredProperties}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Lista de Propriedades */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Seus Imóveis</CardTitle>\n          <CardDescription>\n            Gerencie todas as suas propriedades cadastradas\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {properties && properties.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {properties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"aspect-video relative bg-gray-100\">\n                    <img\n                      src={property.imageUrl}\n                      alt={property.title}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        (e.target as HTMLImageElement).src = '/api/placeholder/400/200';\n                      }}\n                    />\n                    <div className=\"absolute top-2 right-2\">\n                      <Badge variant={property.status === 'available' ? 'default' : 'secondary'}>\n                        {property.status === 'available' ? 'Disponível' : 'Indisponível'}\n                      </Badge>\n                    </div>\n                  </div>\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"font-semibold text-lg mb-1 line-clamp-1\">{property.title}</h3>\n                    <p className=\"text-sm text-gray-600 mb-2 flex items-center\">\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                      {property.location}\n                    </p>\n                    <p className=\"text-2xl font-bold text-amber-600 mb-2\">\n                      R$ {parseFloat(property.price).toLocaleString('pt-BR')}\n                      <span className=\"text-sm text-gray-500 font-normal\">\n                        {property.priceType === 'sale' ? '' : '/mês'}\n                      </span>\n                    </p>\n                    <div className=\"flex items-center justify-between text-sm text-gray-600 mb-3\">\n                      {property.bedrooms && (\n                        <span>{property.bedrooms} quartos</span>\n                      )}\n                      {property.bathrooms && (\n                        <span>{property.bathrooms} banheiros</span>\n                      )}\n                      <span className=\"flex items-center\">\n                        <Eye className=\"h-3 w-3 mr-1\" />\n                        {property.views}\n                      </span>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                        <Edit className=\"h-3 w-3 mr-1\" />\n                        Editar\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                        <Eye className=\"h-3 w-3 mr-1\" />\n                        Ver\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Nenhum imóvel cadastrado\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Comece adicionando seu primeiro imóvel ao portfólio\n              </p>\n              <Button onClick={() => setIsAddDialogOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Cadastrar Primeiro Imóvel\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17038}}}